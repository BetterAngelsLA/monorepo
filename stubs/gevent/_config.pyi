"""
This type stub file was generated by pyright.
"""

"""
gevent tunables.

This should be used as ``from gevent import config``. That variable
is an object of :class:`Config`.

.. versionadded:: 1.3a2

.. versionchanged:: 22.08.0
   Invoking this module like ``python -m gevent._config`` will
   print a help message about available configuration properties.
   This is handy to quickly look for environment variables.
"""
__all__ = ['config']
ALL_SETTINGS = ...
class SettingType(type):
    def __new__(cls, name, bases, cls_dict): # -> Self@SettingType:
        ...
    
    def fmt_desc(cls, desc): # -> str:
        ...
    


def validate_invalid(value):
    ...

def validate_bool(value): # -> bool:
    """
    This is a boolean value.

    In the environment variable, it may be given as ``1``, ``true``,
    ``on`` or ``yes`` for `True`, or ``0``, ``false``, ``off``, or
    ``no`` for `False`.
    """
    ...

def validate_anything(value):
    ...

convert_str_value_as_is = ...
class Setting:
    name = ...
    value = ...
    validate = ...
    default = ...
    environment_key = ...
    document = ...
    desc = ...
    def get(self): # -> None:
        ...
    
    def set(self, val): # -> None:
        ...
    


Setting = ...
def make_settings(): # -> dict[Unknown, Unknown]:
    """
    Return fresh instances of all classes defined in `ALL_SETTINGS`.
    """
    ...

class Config:
    """
    Global configuration for gevent.

    There is one instance of this object at ``gevent.config``. If you
    are going to make changes in code, instead of using the documented
    environment variables, you need to make the changes before using
    any parts of gevent that might need those settings. For example::

        >>> from gevent import config
        >>> config.fileobject = 'thread'

        >>> from gevent import fileobject
        >>> fileobject.FileObject.__name__
        'FileObjectThread'

    .. versionadded:: 1.3a2

    """
    def __init__(self) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def set(self, name, value): # -> None:
        ...
    
    def __dir__(self): # -> list[Unknown]:
        ...
    
    def print_help(self): # -> None:
        ...
    


class ImportableSetting:
    shortname_map = ...
    def validate(self, value): # -> type | Any | object:
        ...
    
    def get_options(self): # -> dict[Unknown, Unknown]:
        ...
    


class BoolSettingMixin:
    validate = ...
    _convert = ...


class IntSettingMixin:
    validate = ...


class _PositiveValueMixin:
    def validate(self, value):
        ...
    


class FloatSettingMixin(_PositiveValueMixin):
    ...


class ByteCountSettingMixin(_PositiveValueMixin):
    _MULTIPLES = ...
    _SUFFIX_SIZE = ...


class Resolver(ImportableSetting, Setting):
    desc = ...
    default = ...
    shortname_map = ...


class Threadpool(ImportableSetting, Setting):
    desc = ...
    default = ...


class ThreadpoolIdleTaskTimeout(FloatSettingMixin, Setting):
    document = ...
    name = ...
    environment_key = ...
    desc = ...
    default = ...


class Loop(ImportableSetting, Setting):
    desc = ...
    default = ...
    shortname_map = ...


class FormatContext(ImportableSetting, Setting):
    name = ...
    default = ...


class LibevBackend(Setting):
    name = ...
    environment_key = ...
    desc = ...
    default = ...
    validate = ...


class FileObject(ImportableSetting, Setting):
    desc = ...
    environment_key = ...
    default = ...
    shortname_map = ...


class WatchChildren(BoolSettingMixin, Setting):
    desc = ...
    name = ...
    environment_key = ...
    default = ...


class TraceMalloc(IntSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class TrackGreenletTree(BoolSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class MonitorThread(BoolSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class MaxBlockingTime(FloatSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class MonitorMemoryPeriod(FloatSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class MonitorMemoryMaxUsage(ByteCountSettingMixin, Setting):
    name = ...
    environment_key = ...
    default = ...
    desc = ...


class AresSettingMixin:
    document = ...
    @property
    def kwarg_name(self):
        ...
    
    validate = ...
    _convert = ...


class AresFlags(AresSettingMixin, Setting):
    name = ...
    default = ...
    environment_key = ...


class AresTimeout(AresSettingMixin, Setting):
    document = ...
    name = ...
    default = ...
    environment_key = ...
    desc = ...


class AresTries(AresSettingMixin, Setting):
    name = ...
    default = ...
    environment_key = ...


class AresNdots(AresSettingMixin, Setting):
    name = ...
    default = ...
    environment_key = ...


class AresUDPPort(AresSettingMixin, Setting):
    name = ...
    default = ...
    environment_key = ...


class AresTCPPort(AresSettingMixin, Setting):
    name = ...
    default = ...
    environment_key = ...


class AresServers(AresSettingMixin, Setting):
    document = ...
    name = ...
    default = ...
    environment_key = ...
    desc = ...


class ResolverNameservers(AresSettingMixin, Setting):
    document = ...
    name = ...
    default = ...
    environment_key = ...
    desc = ...
    _convert = ...
    @property
    def kwarg_name(self): # -> Literal['servers']:
        ...
    


class ResolverTimeout(FloatSettingMixin, AresSettingMixin, Setting):
    document = ...
    name = ...
    environment_key = ...
    desc = ...
    @property
    def kwarg_name(self): # -> Literal['timeout']:
        ...
    


config = ...
if __name__ == '__main__':
    ...
