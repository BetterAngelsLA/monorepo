"""
This type stub file was generated by pyright.
"""

from gevent.events import IPeriodicMonitorThread, implementer

__all__ = ['PeriodicMonitoringThread']
get_thread_ident = ...
start_new_thread = ...
thread_sleep = ...
class MonitorWarning(RuntimeWarning):
    """The type of warnings we emit."""
    ...


class _MonitorEntry:
    __slots__ = ...
    def __init__(self, function, period) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    


@implementer(IPeriodicMonitorThread)
class PeriodicMonitoringThread:
    inactive_sleep_time = ...
    min_sleep_time = ...
    min_memory_monitor_period = ...
    _monitoring_functions = ...
    _calculated_sleep_time = ...
    _memory_exceeded = ...
    _greenlet_tracer = ...
    def __init__(self, hub) -> None:
        ...
    
    @property
    def hub(self): # -> Unknown | None:
        ...
    
    def monitoring_functions(self): # -> list[_MonitorEntry] | None:
        ...
    
    def add_monitoring_function(self, function, period): # -> None:
        ...
    
    def calculate_sleep_time(self): # -> float:
        ...
    
    def kill(self): # -> None:
        ...
    
    def __call__(self): # -> None:
        ...
    
    def monitor_blocking(self, hub): # -> tuple[Unknown | greenlet, list[str]] | None:
        ...
    
    def ignore_current_greenlet_blocking(self): # -> None:
        ...
    
    def monitor_current_greenlet_blocking(self): # -> None:
        ...
    
    def can_monitor_memory_usage(self): # -> bool:
        ...
    
    def install_monitor_memory_usage(self): # -> None:
        ...
    
    def monitor_memory_usage(self, _hub): # -> MemoryUsageThresholdExceeded | MemoryUsageUnderThreshold | Literal[-1] | None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


