"""
This type stub file was generated by pyright.
"""

import gevent
from contextlib import contextmanager
from unittest import TestCase as BaseTestCase
from gevent._util import LazyOnClass
from . import flaky, sysinfo

class TimeAssertMixin:
    @flaky.reraises_flaky_timeout()
    def assertTimeoutAlmostEqual(self, first, second, places=..., msg=..., delta=...): # -> None:
        ...
    
    if sysinfo.EXPECT_POOR_TIMER_RESOLUTION:
        def assertTimeWithinRange(self, time_taken, min_time, max_time): # -> None:
            ...
        
    else:
        def assertTimeWithinRange(self, time_taken, min_time, max_time): # -> None:
            ...
        
    @contextmanager
    def runs_in_given_time(self, expected, fuzzy=..., min_time=...): # -> Generator[tuple[Unknown, Unknown], Any, None]:
        ...
    
    def runs_in_no_time(self, fuzzy=...): # -> _GeneratorContextManager[tuple[Unknown, Unknown]]:
        ...
    


class GreenletAssertMixin:
    """Assertions related to greenlets."""
    def assert_greenlet_ready(self, g): # -> None:
        ...
    
    def assert_greenlet_not_ready(self, g): # -> None:
        ...
    
    def assert_greenlet_spawned(self, g): # -> None:
        ...
    
    assert_greenlet_started = ...
    def assert_greenlet_finished(self, g): # -> None:
        ...
    


class StringAssertMixin:
    """
    Assertions dealing with strings.
    """
    @LazyOnClass
    def HEX_NUM_RE(self): # -> Pattern[str]:
        ...
    
    def normalize_addr(self, s, replace=...):
        ...
    
    def normalize_module(self, s, module=..., replace=...):
        ...
    
    def normalize(self, s):
        ...
    
    def assert_nstr_endswith(self, o, val): # -> None:
        ...
    
    def assert_nstr_startswith(self, o, val): # -> None:
        ...
    


class TestTimeout(gevent.Timeout):
    _expire_info = ...
    def __init__(self, timeout, method=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class TestCaseMetaClass(type):
    def __new__(cls, classname, bases, classDict): # -> Self@TestCaseMetaClass:
        ...
    


class SubscriberCleanupMixin:
    def setUp(self): # -> None:
        ...
    
    def addSubscriber(self, sub): # -> None:
        ...
    
    def tearDown(self): # -> None:
        ...
    


class TestCase(TestCaseMetaClass("NewBase", (SubscriberCleanupMixin, TimeAssertMixin, GreenletAssertMixin, StringAssertMixin, BaseTestCase), {})):
    __timeout__ = ...
    switch_expected = ...
    error_fatal = ...
    uses_handle_error = ...
    close_on_teardown = ...
    __old_subscribers = ...
    def run(self, *args, **kwargs):
        ...
    
    def setUp(self): # -> None:
        ...
    
    def tearDown(self): # -> None:
        ...
    
    @property
    def testname(self): # -> Any | str:
        ...
    
    @property
    def testcasename(self): # -> Any | str:
        ...
    
    @property
    def modulename(self):
        ...
    
    @property
    def fullname(self):
        ...
    
    _none = ...
    _error = ...
    def expect_one_error(self): # -> None:
        ...
    
    def peek_error(self): # -> tuple[None, None, None] | tuple[Unknown, Unknown, Unknown]:
        ...
    
    def get_error(self): # -> tuple[None, None, None] | tuple[Unknown, Unknown, Unknown]:
        ...
    
    def assert_error(self, kind=..., value=..., error=..., where_type=...): # -> tuple[None, None, None] | tuple[Unknown, Unknown, Unknown]:
        ...
    
    def assertMonkeyPatchedFuncSignatures(self, mod_name, func_names=..., exclude=...): # -> None:
        ...
    
    def assertEqualFlakyRaceCondition(self, a, b): # -> None:
        ...
    
    def assertStartsWith(self, it, has_prefix): # -> None:
        ...
    
    def assertNotMonkeyPatched(self): # -> None:
        ...
    


