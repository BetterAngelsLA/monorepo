"""
This type stub file was generated by pyright.
"""

import unittest
import threading
import subprocess

BUFFER_OUTPUT = ...
QUIET = ...
class Popen(subprocess.Popen):
    """
    Depending on when we're imported and if the process has been monkey-patched,
    this could use cooperative or native Popen.
    """
    timer = ...
    def __enter__(self): # -> Self@Popen:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    


_colorscheme = ...
_prefixes = ...
_colorcodes = ...
def log(message, *args, **kwargs): # -> None:
    """
    Log a *message*

    :keyword str color: One of the values from _colorscheme
    """
    ...

def debug(message, *args, **kwargs): # -> None:
    """
    Log the *message* only if we're not in quiet mode.
    """
    ...

def killpg(pid): # -> None:
    ...

def kill_processtree(pid): # -> None:
    ...

def kill(popen): # -> None:
    ...

IGNORED_GEVENT_ENV_KEYS = ...
IGNORED_GEVENT_ENV_ITEMS = ...
def getname(command, env=..., setenv=...): # -> LiteralString:
    ...

def start(command, quiet=..., **kwargs): # -> Popen:
    ...

class RunResult:
    """
    The results of running an external command.

    If the command was successful, this has a boolean
    value of True; otherwise, a boolean value of false.

    The integer value of this object is the command's exit code.

    """
    def __init__(self, command, run_kwargs, code, output: str = ..., error: str = ..., name=..., run_count=..., skipped_count=..., run_duration: float = ...) -> None:
        ...
    
    @property
    def output_lines(self): # -> list[str]:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    __nonzero__ = ...
    def __int__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    


output_lock = ...
def run(command, **kwargs): # -> RunResult:
    """
    Execute *command*, returning a `RunResult`.

    This blocks until *command* finishes or until it times out.
    """
    ...

class NoSetupPyFound(Exception):
    "Raised by find_setup_py_above"
    ...


def find_setup_py_above(a_file):
    "Return the directory containing setup.py somewhere above *a_file*"
    ...

def search_for_setup_py(a_file=..., a_module_name=..., a_class=..., climb_cwd=...):
    ...

def find_stdlib_tests(): # -> tuple[str, str]:
    """
    Return a sequence of directories that could contain
    stdlib tests for the running version of Python.

    The most specific tests are at the end of the sequence.

    No checks are performed on existence of the directories.
    """
    ...

def absolute_pythonpath(): # -> str | None:
    """
    Return the PYTHONPATH environment variable (if set) with each
    entry being an absolute path. If not set, returns None.
    """
    ...

class ExampleMixin:
    """
    Something that uses the ``examples/`` directory
    from the root of the gevent distribution.

    The `cwd` property is set to the root of the gevent distribution.
    """
    example_args = ...
    before_delay = ...
    after_delay = ...
    example = ...
    start_kwargs = ...
    def find_setup_py(self):
        "Return the directory containing setup.py"
        ...
    
    @property
    def cwd(self): # -> str:
        ...
    
    @property
    def setenv(self): # -> dict[str, str] | None:
        """
        Returns a dictionary of environment variables to set for the
        child in addition to (or replacing) the ones already in the
        environment.

        Since the child is run in `cwd`, relative paths in ``PYTHONPATH``
        need to be converted to absolute paths.
        """
        ...
    
    def start_example(self): # -> Popen:
        ...
    
    def run_example(self): # -> RunResult:
        ...
    


class TestServer(ExampleMixin, unittest.TestCase):
    popen = ...
    def running_server(self): # -> _GeneratorContextManager[None]:
        ...
    
    def test(self): # -> None:
        ...
    
    def before(self): # -> None:
        ...
    
    def after(self): # -> None:
        ...
    


class alarm(threading.Thread):
    def __init__(self, timeout) -> None:
        ...
    
    def run(self):
        ...
    


