"""
This type stub file was generated by pyright.
"""

from gevent._compat import thread_mod_name

"""
Internal module, support for the linkable protocol for "event" like objects.

"""
__all__ = ['AbstractLinkable']
_get_thread_ident = __import__(thread_mod_name).get_ident
_allocate_thread_lock = __import__(thread_mod_name).allocate_lock
class _FakeNotifier:
    __slots__ = ...
    def __init__(self) -> None:
        ...
    


def get_roots_and_hubs(): # -> dict[Unknown, Hub]:
    ...

class AbstractLinkable:
    __slots__ = ...
    def __init__(self, hub=...) -> None:
        ...
    
    def linkcount(self): # -> int:
        ...
    
    def ready(self):
        ...
    
    def rawlink(self, callback): # -> None:
        """
        Register a callback to call when this object is ready.

        *callback* will be called in the :class:`Hub
        <gevent.hub.Hub>`, so it must not use blocking gevent API.
        *callback* will be passed one argument: this instance.
        """
        ...
    
    def unlink(self, callback): # -> None:
        """Remove the callback set by :meth:`rawlink`"""
        ...
    


