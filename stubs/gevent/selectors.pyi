"""
This type stub file was generated by pyright.
"""

import selectors as __selectors__
from gevent._util import Lazy

"""
This module provides :class:`GeventSelector`, a high-level IO
multiplexing mechanism. This is aliased to :class:`DefaultSelector`.

This module provides the same API as the selectors defined in :mod:`selectors`.

On Python 2, this module is only available if the `selectors2
<https://pypi.org/project/selectors2/>`_ backport is installed.

.. versionadded:: 20.6.0
"""
__implements__ = ...
__extra__ = ...
__all__ = __implements__ + __extra__
__imports__ = ...
_POLL_ALL = ...
EVENT_READ = ...
EVENT_WRITE = ...
_ALL_EVENTS = ...
SelectorKey = __selectors__.SelectorKey
_BaseSelectorImpl = ...
class GeventSelector(_BaseSelectorImpl):
    """
    A selector implementation using gevent primitives.

    This is a type of :class:`selectors.BaseSelector`, so the documentation
    for that class applies here.

    .. caution::
       As the base class indicates, it is critically important to
       unregister file objects before closing them. (Or close the selector
       they are registered with before closing them.) Failure to do so
       may crash the process or have other unintended results.
    """
    def __init__(self, hub=...) -> None:
        ...
    
    @Lazy
    def hub(self):
        ...
    
    def register(self, fileobj, events, data=...): # -> Any | SelectorKey:
        ...
    
    def unregister(self, fileobj): # -> Any | SelectorKey:
        ...
    
    def select(self, timeout=...): # -> list[Unknown]:
        """
        Poll for I/O.

        Note that, like the built-in selectors, this will block
        indefinitely if no timeout is given and no files have been
        registered.
        """
        ...
    
    def close(self): # -> None:
        ...
    


DefaultSelector = GeventSelector
