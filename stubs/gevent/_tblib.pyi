"""
This type stub file was generated by pyright.
"""

__version__ = ...
__all__ = ('Traceback', 'TracebackParseError', 'Frame', 'Code')
FRAME_RE = ...
class _AttrDict(dict):
    __slots__ = ...
    def __getattr__(self, name):
        ...
    


class __traceback_maker(Exception):
    ...


class TracebackParseError(Exception):
    ...


class Code:
    """
    Class that replicates just enough of the builtin Code object to enable serialization and traceback rendering.
    """
    co_code = ...
    def __init__(self, code) -> None:
        ...
    


class Frame:
    """
    Class that replicates just enough of the builtin Frame object to enable serialization and traceback rendering.
    """
    def __init__(self, frame) -> None:
        ...
    
    def clear(self): # -> None:
        """
        For compatibility with PyPy 3.5;
        clear() was added to frame in Python 3.4
        and is called by traceback.clear_frames(), which
        in turn is called by unittest.TestCase.assertRaises
        """
        ...
    


class Traceback:
    """
    Class that wraps builtin Traceback objects.
    """
    tb_next = ...
    def __init__(self, tb) -> None:
        ...
    
    def as_traceback(self): # -> TracebackType | None:
        """
        Convert to a builtin Traceback object that is usable for raising or rendering a stacktrace.
        """
        ...
    
    to_traceback = ...
    def as_dict(self): # -> dict[str, dict[str, dict[Unknown, Unknown] | dict[str, Unknown] | Unknown] | int | None]:
        """
        Converts to a dictionary representation. You can serialize the result to JSON as it only has
        builtin objects like dicts, lists, ints or strings.
        """
        ...
    
    to_dict = ...
    @classmethod
    def from_dict(cls, dct): # -> Self@Traceback:
        """
        Creates an instance from a dictionary with the same structure as ``.as_dict()`` returns.
        """
        ...
    
    @classmethod
    def from_string(cls, string, strict=...): # -> Self@Traceback:
        """
        Creates an instance by parsing a stacktrace. Strict means that parsing stops when lines are not indented by at least two spaces
        anymore.
        """
        ...
    


def unpickle_traceback(tb_frame, tb_lineno, tb_next): # -> TracebackType | None:
    ...

def pickle_traceback(tb): # -> tuple[(tb_frame: Unknown, tb_lineno: Unknown, tb_next: Unknown) -> (TracebackType | None), tuple[Frame, Unknown, Unknown | Traceback]]:
    ...

def unpickle_exception(func, args, cause, tb):
    ...

def pickle_exception(obj): # -> tuple[((func: Unknown, args: Unknown, cause: Unknown, tb: Unknown) -> Unknown) | tuple[Unknown, ...], ...]:
    ...

def install(*exc_classes_or_instances): # -> type[BaseException] | None:
    ...

_installed = ...
def dump_traceback(tb): # -> bytes:
    ...

def load_traceback(s): # -> TracebackType | None:
    ...

