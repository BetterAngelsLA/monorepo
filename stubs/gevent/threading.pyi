"""
This type stub file was generated by pyright.
"""

import threading as __threading__
from gevent.local import local
from gevent.thread import allocate_lock as _allocate_lock, get_ident as _get_ident
from gevent.hub import getcurrent, sleep as _sleep
from gevent.lock import RLock

"""
Implementation of the standard :mod:`threading` using greenlets.

.. note::

    This module is a helper for :mod:`gevent.monkey` and is not
    intended to be used directly. For spawning greenlets in your
    applications, prefer higher level constructs like
    :class:`gevent.Greenlet` class or :func:`gevent.spawn`. Attributes
    in this module like ``__threading__`` are implementation artifacts subject
    to change at any time.

.. versionchanged:: 1.2.3

   Defer adjusting the stdlib's list of active threads until we are
   monkey patched. Previously this was done at import time. We are
   documented to only be used as a helper for monkey patching, so this should
   functionally be the same, but some applications ignore the documentation and
   directly import this module anyway.

   A positive consequence is that ``import gevent.threading,
   threading; threading.current_thread()`` will no longer return a DummyThread
   before monkey-patching.
"""
__implements__ = ...
_DummyThread_ = __threading__._DummyThread
local = ...
start_new_thread = ...
allocate_lock = _allocate_lock
_get_ident = ...
_sleep = ...
getcurrent = ...
Lock = _allocate_lock
RLock = ...
_weakref = ...
class _DummyThread(_DummyThread_):
    _stopped = ...
    _initialized = ...
    _daemonic = ...
    _args = ...
    _kwargs = ...
    _target = ...
    _ident = ...
    _started = ...
    _tstate_lock = ...
    def __init__(self) -> None:
        ...
    
    _stop = ...


if hasattr(__threading__, 'main_thread'):
    def main_native_thread(): # -> Thread:
        ...
    
else:
    def main_native_thread():
        ...
    
class Thread(__threading__.Thread):
    ...


class Timer(Thread, __threading__.Timer):
    ...


_set_sentinel = allocate_lock
get_ident = ...
if hasattr(__threading__, '_CRLock'):
    _CRLock = ...
