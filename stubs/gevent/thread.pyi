"""
This type stub file was generated by pyright.
"""

import _thread as __thread__
from gevent._compat import PYPY
from gevent.lock import BoundedSemaphore

"""
Implementation of the standard :mod:`thread` module that spawns greenlets.

.. note::

    This module is a helper for :mod:`gevent.monkey` and is not
    intended to be used directly. For spawning greenlets in your
    applications, prefer higher level constructs like
    :class:`gevent.Greenlet` class or :func:`gevent.spawn`.
"""
__implements__ = ...
__imports__ = ...
__target__ = ...
if hasattr(__thread__, 'daemon_threads_allowed'):
    ...
error = __thread__.error
if hasattr(__thread__, 'RLock'):
    ...
def get_ident(gr=...): # -> int:
    ...

def start_new_thread(function, args=..., kwargs=...): # -> int:
    ...

class LockType(BoundedSemaphore):
    _OVER_RELEASE_ERROR = __thread__.error
    if PYPY:
        _OVER_RELEASE_ERROR = ...
    _TIMEOUT_MAX = ...
    def acquire(self, blocking=..., timeout=...): # -> Literal[False]:
        ...
    


allocate_lock = LockType
def exit():
    ...

if hasattr(__thread__, 'stack_size'):
    _original_stack_size = ...
    def stack_size(size=...): # -> int | None:
        ...
    
else:
    ...
__imports__ = ...
__all__ = __implements__ + __imports__
