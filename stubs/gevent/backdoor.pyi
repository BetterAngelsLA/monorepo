"""
This type stub file was generated by pyright.
"""

from gevent.greenlet import Greenlet
from gevent.server import StreamServer

"""
Interactive greenlet-based network console that can be used in any process.

The :class:`BackdoorServer` provides a REPL inside a running process. As
long as the process is monkey-patched, the ``BackdoorServer`` can coexist
with other elements of the process.

.. seealso:: :class:`code.InteractiveConsole`
"""
__all__ = ['BackdoorServer']
class _Greenlet_stdreplace(Greenlet):
    __slots__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def switch(self, *args, **kw): # -> None:
        ...
    
    def switch_in(self): # -> None:
        ...
    
    def switch_out(self): # -> None:
        ...
    
    def throw(self, *args, **kwargs): # -> None:
        ...
    
    def run(self): # -> None:
        ...
    


class BackdoorServer(StreamServer):
    """
    Provide a backdoor to a program for debugging purposes.

    .. warning:: This backdoor provides no authentication and makes no
          attempt to limit what remote users can do. Anyone that
          can access the server can take any action that the running
          python process can. Thus, while you may bind to any interface, for
          security purposes it is recommended that you bind to one
          only accessible to the local machine, e.g.,
          127.0.0.1/localhost.

    Basic usage::

        from gevent.backdoor import BackdoorServer
        server = BackdoorServer(('127.0.0.1', 5001),
                                banner="Hello from gevent backdoor!",
                                locals={'foo': "From defined scope!"})
        server.serve_forever()

    In a another terminal, connect with...::

        $ telnet 127.0.0.1 5001
        Trying 127.0.0.1...
        Connected to 127.0.0.1.
        Escape character is '^]'.
        Hello from gevent backdoor!
        >> print(foo)
        From defined scope!

    .. versionchanged:: 1.2a1
       Spawned greenlets are now tracked in a pool and killed when the server
       is stopped.
    """
    def __init__(self, listener, locals=..., banner=..., **server_args) -> None:
        """
        :keyword locals: If given, a dictionary of "builtin" values that will be available
            at the top-level.
        :keyword banner: If geven, a string that will be printed to each connecting user.
        """
        ...
    
    def handle(self, conn, _address): # -> None:
        """
        Interact with one remote user.

        .. versionchanged:: 1.1b2 Each connection gets its own
            ``locals`` dictionary. Previously they were shared in a
            potentially unsafe manner.
        """
        ...
    


class _BaseFileLike:
    softspace = ...
    encoding = ...
    __slots__ = ...
    def __init__(self, sock, stdin) -> None:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def close(self): # -> None:
        ...
    


class _StdErr(_BaseFileLike):
    """
    A file-like object that wraps the result of socket.makefile (composition
    instead of inheritance lets us work identically under CPython and PyPy).

    We write directly to the socket, avoiding the buffering that the text-oriented
    makefile would want to do (otherwise we'd be at the mercy of waiting on a
    flush() to get called for the remote user to see data); this beats putting
    the file in binary mode and translating everywhere with a non-default
    encoding.
    """
    def flush(self): # -> None:
        "Does nothing. raw_input() calls this, only on Python 3."
        ...
    
    def write(self, data): # -> None:
        ...
    


class _StdIn(_BaseFileLike):
    def readline(self, *a): # -> Literal['']:
        ...
    


if __name__ == '__main__':
    ...
