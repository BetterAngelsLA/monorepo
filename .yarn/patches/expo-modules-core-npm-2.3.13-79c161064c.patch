diff --git a/ios/DevTools/ExpoRequestInterceptorProtocol.swift b/ios/DevTools/ExpoRequestInterceptorProtocol.swift
index 4e8682e3727580a6a95c1fa9db328e23d51b5550..ba95fef7c7be5291abf5539c6fe3a277774cfd1f 100644
--- a/ios/DevTools/ExpoRequestInterceptorProtocol.swift
+++ b/ios/DevTools/ExpoRequestInterceptorProtocol.swift
@@ -1,3 +1,4 @@
+
 // Copyright 2015-present 650 Industries. All rights reserved.

 import Foundation
@@ -158,25 +159,47 @@ public final class ExpoRequestInterceptorProtocol: URLProtocol, URLSessionDataDe
   ) {
     // swiftlint:disable line_length
     // Apple does not support sending upload progress from URLProtocol back to URLProtocolClient.
-    // > Similarly, there is no way for your NSURLProtocol subclass to call the NSURLConnection delegate's -connection:needNewBodyStream: or -connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite: methods (<rdar://problem/9226155> and <rdar://problem/9226157>).  The latter is not a serious concern--it just means that your clients don't get upload progress--but the former is a real issue.  If you're in a situation where you might need a second copy of a request body, you will need your own logic to make that copy, including the case where the body is a stream.
+    // > Similarly, there is no way for your NSURLProtocol subclass to call the NSURLConnection delegate's
+    //   -connection:needNewBodyStream: or
+    //   -connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:
+    //   methods (<rdar://problem/9226155> and <rdar://problem/9226157>). The latter is not a serious concern—it
+    //   just means that your clients don't get upload progress—but the former is a real issue. If you're in a
+    //   situation where you might need a second copy of a request body, you will need your own logic to make that
+    //   copy, including the case where the body is a stream.
     // See: https://developer.apple.com/library/archive/samplecode/CustomHTTPProtocol/Listings/Read_Me_About_CustomHTTPProtocol_txt.html
     //
-    // Workaround to get the original task's URLSessionDelegate through the internal property and send upload process
-    // Fixes https://github.com/expo/expo/issues/28269
+    // Workaround to forward the progress event to the URLSession/task delegate when possible.
+    // Fixes https://github.com/expo/expo/issues/28269 and prevents infinite loops or iOS 16 crash due to unavailable selector.
     // swiftlint:enable line_length
-    guard let task = self.task else {
-      return
-    }
-    if #available(iOS 15.0, tvOS 15.0, macOS 12.0, *), let delegate = task.delegate {
-      // For the case if the task has a dedicated delegate than the default delegate from its URLSession
-      delegate.urlSession?(session, task: task, didSendBodyData: bytesSent, totalBytesSent: totalBytesSent, totalBytesExpectedToSend: totalBytesExpectedToSend)
+
+    // ───────── iOS 15+ : Use task-scoped delegate (skip self/proxy to avoid recursion) ─────────
+    if #available(iOS 15.0, tvOS 15.0, macOS 12.0, *),
+      let delegate = task.delegate,
+      !(delegate is ExpoRequestInterceptorProtocol),          // Prevent infinite self-loop
+      !(delegate is URLSessionSessionDelegateProxy) {         // Prevent infinite proxy-loop
+      delegate.urlSession?(session,
+                          task: task,
+                          didSendBodyData: bytesSent,
+                          totalBytesSent: totalBytesSent,
+                          totalBytesExpectedToSend: totalBytesExpectedToSend)
       return
     }
-    guard let session = task.value(forKey: "session") as? URLSession,
-      let delegate = session.delegate as? URLSessionTaskDelegate else {
+
+    // ───────── iOS 14↓ : Fall back to session-wide delegate (skip self/proxy to avoid recursion) ─────────
+    guard
+      let s = task.value(forKey: "session") as? URLSession,
+      let delegate = s.delegate as? URLSessionTaskDelegate,
+      !(delegate is ExpoRequestInterceptorProtocol),          // Prevent infinite self-loop
+      !(delegate is URLSessionSessionDelegateProxy)           // Prevent infinite proxy-loop
+    else {
       return
     }
-    delegate.urlSession?(session, task: task, didSendBodyData: bytesSent, totalBytesSent: totalBytesSent, totalBytesExpectedToSend: totalBytesExpectedToSend)
+
+    delegate.urlSession?(s,
+                        task: task,
+                        didSendBodyData: bytesSent,
+                        totalBytesSent: totalBytesSent,
+                        totalBytesExpectedToSend: totalBytesExpectedToSend)
   }

   /**
