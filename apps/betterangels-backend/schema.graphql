"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

input AddNoteTaskInput {
  taskId: ID!
  noteId: ID!
  taskType: TaskTypeEnum!
}

union AddNoteTaskPayload = NoteType | OperationInfo

input AddressInput {
  addressComponents: JSON
  formattedAddress: String
}

type AddressType {
  id: ID!
  street: String
  city: String
  state: String
  zipCode: String
}

interface AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  UNKNOWN
}

input AuthInput {
  code: String!
  code_verifier: String!
  redirect_uri: String!
}

type AuthResponse {
  status_code: String!
}

type BedsType {
  totalBeds: Int
  privateBeds: Int
  availableBeds: Int
  maxStay: Int
  averageBedRate: Decimal
  bedLayoutDescription: String
}

input ClientProfileFilter {
  AND: ClientProfileFilter
  OR: ClientProfileFilter
  NOT: ClientProfileFilter
  DISTINCT: Boolean
  isActive: Boolean
  search: String
}

type ClientProfileType {
  id: ID!
  hmisId: String
  user: UserType!
}

input CreateClientProfileInput {
  hmisId: String
  user: CreateUserInput!
}

union CreateClientProfilePayload = ClientProfileType | OperationInfo

union CreateLocationPayload = NoteLocationType | OperationInfo

input CreateNoteAttachmentInput {
  note: ID!
  file: Upload!
  namespace: NoteNamespaceEnum!
}

union CreateNoteAttachmentPayload = NoteAttachmentType | OperationInfo

input CreateNoteInput {
  title: String!
  publicDetails: String
  privateDetails: String
  client: ID
}

input CreateNoteMoodInput {
  descriptor: MoodEnum!
  noteId: ID!
}

union CreateNoteMoodPayload = MoodType | OperationInfo

union CreateNotePayload = NoteType | OperationInfo

input CreateNoteServiceRequestInput {
  service: ServiceEnum!
  customService: String
  noteId: ID!
  serviceRequestType: ServiceRequestTypeEnum!
}

union CreateNoteServiceRequestPayload = ServiceRequestType | OperationInfo

input CreateNoteTaskInput {
  title: String!
  status: TaskStatusEnum!
  noteId: ID!
  taskType: TaskTypeEnum!
}

union CreateNoteTaskPayload = TaskType | OperationInfo

input CreateServiceRequestInput {
  service: ServiceEnum!
  status: ServiceRequestStatusEnum!
  customService: String
  client: ID
}

union CreateServiceRequestPayload = ServiceRequestType | OperationInfo

input CreateTaskInput {
  title: String!
  status: TaskStatusEnum!
  dueBy: DateTime
  client: ID
}

union CreateTaskPayload = TaskType | OperationInfo

input CreateUserInput {
  firstName: String
  lastName: String
  email: String
}

"""Date with time (isoformat)"""
scalar DateTime

"""Decimal (fixed-point)"""
scalar Decimal

input DeleteDjangoObjectInput {
  id: ID!
}

union DeleteMoodPayload = DeletedObjectType | OperationInfo

union DeleteNoteAttachmentPayload = NoteAttachmentType | OperationInfo

union DeleteNotePayload = NoteType | OperationInfo

union DeleteServiceRequestPayload = ServiceRequestType | OperationInfo

union DeleteTaskPayload = TaskType | OperationInfo

type DeletedObjectType {
  id: Int!
}

type DescriptionType {
  description: String
  typicalStayDescription: String
}

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

input DjangoModelFilterInput {
  pk: ID!
}

type DjangoModelType {
  pk: ID!
}

type FeatureControlData {
  flags: [FlagType!]!
  switches: [SwitchType!]!
  samples: [SampleType!]!
}

type FlagType {
  name: String!
  isActive: Boolean
  lastModified: DateTime
}

union GetOrCreateAddressPayload = AddressType | OperationInfo

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

type LocationType {
  point: Point
  spa: Int
  address: String
  city: String
  state: String
  zipCode: String
  confidential: Boolean
}

input MagicLinkInput {
  email: String!
}

type MagicLinkResponse {
  message: String!
}

enum MoodEnum {
  AGITATED
  AGREEABLE
  ANXIOUS
  DEPRESSED
  DETACHED
  DISORGANIZED_THOUGHT
  DISORIENTED
  ESCALATED
  EUTHYMIC
  FLAT_BLUNTED
  HAPPY
  HOPELESS
  INDIFFERENT
  MANIC
  MOTIVATED
  OPTIMISTIC
  PERSONABLE
  PLEASANT
  RESTLESS
  SUICIDAL
}

type MoodType {
  id: ID!
  descriptor: MoodEnum!
}

type Mutation {
  logout: Boolean!
  idmeAuth(input: AuthInput!): AuthResponse!
  googleAuth(input: AuthInput!): AuthResponse!
  generateMagicLink(data: MagicLinkInput!): MagicLinkResponse!
  createClientProfile(data: CreateClientProfileInput!): CreateClientProfilePayload! @hasPerm(permissions: [{app: "accounts", permission: "add_clientprofile"}], any: true)
  getOrCreateAddress(data: AddressInput!): GetOrCreateAddressPayload! @hasPerm(permissions: [{app: "common", permission: "add_location"}], any: true)
  createLocation(data: NoteLocationInput!): CreateLocationPayload! @hasPerm(permissions: [{app: "common", permission: "add_location"}], any: true)
  deleteNote(data: DeleteDjangoObjectInput!): DeleteNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_note"}], any: true)
  deleteNoteAttachment(data: DeleteDjangoObjectInput!): DeleteNoteAttachmentPayload! @hasRetvalPerm(permissions: [{app: "common", permission: "delete_attachment"}], any: true)
  deleteServiceRequest(data: DeleteDjangoObjectInput!): DeleteServiceRequestPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_servicerequest"}], any: true)
  deleteTask(data: DeleteDjangoObjectInput!): DeleteTaskPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_task"}], any: true)
  createNote(data: CreateNoteInput!): CreateNotePayload! @hasPerm(permissions: [{app: "notes", permission: "add_note"}], any: true)
  updateNote(data: UpdateNoteInput!): UpdateNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  updateNoteLocation(data: UpdateNoteLocationInput!): UpdateNoteLocationPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true) @hasPerm(permissions: [{app: "common", permission: "add_location"}], any: true)
  revertNote(data: RevertNoteInput!): RevertNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  createNoteAttachment(data: CreateNoteAttachmentInput!): CreateNoteAttachmentPayload! @hasPerm(permissions: [{app: "common", permission: "add_attachment"}], any: true)
  addNoteTask(data: AddNoteTaskInput!): AddNoteTaskPayload!
  removeNoteTask(data: RemoveNoteTaskInput!): RemoveNoteTaskPayload!
  createNoteMood(data: CreateNoteMoodInput!): CreateNoteMoodPayload!
  deleteMood(data: DeleteDjangoObjectInput!): DeleteMoodPayload!
  createServiceRequest(data: CreateServiceRequestInput!): CreateServiceRequestPayload! @hasPerm(permissions: [{app: "notes", permission: "add_servicerequest"}], any: true)
  createNoteServiceRequest(data: CreateNoteServiceRequestInput!): CreateNoteServiceRequestPayload! @hasPerm(permissions: [{app: "notes", permission: "add_servicerequest"}], any: true)
  updateServiceRequest(data: UpdateServiceRequestInput!): UpdateServiceRequestPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_servicerequest"}], any: true)
  removeNoteServiceRequest(data: RemoveNoteServiceRequestInput!): RemoveNoteServiceRequestPayload!
  createTask(data: CreateTaskInput!): CreateTaskPayload! @hasPerm(permissions: [{app: "notes", permission: "add_task"}], any: true)
  createNoteTask(data: CreateNoteTaskInput!): CreateNoteTaskPayload! @hasPerm(permissions: [{app: "notes", permission: "add_task"}], any: true)
  updateTask(data: UpdateTaskInput!): UpdateTaskPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_task"}], any: true)
  updateTaskLocation(data: UpdateTaskLocationInput!): UpdateTaskLocationPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_task"}], any: true) @hasPerm(permissions: [{app: "common", permission: "add_location"}], any: true)
}

input NoteAttachmentFilter {
  attachmentType: AttachmentType
  namespace: NoteNamespaceEnum!
  AND: NoteAttachmentFilter
  OR: NoteAttachmentFilter
  NOT: NoteAttachmentFilter
  DISTINCT: Boolean
}

type NoteAttachmentType implements AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
  namespace: NoteNamespaceEnum!
}

input NoteFilter {
  client: DjangoModelFilterInput
  createdBy: DjangoModelFilterInput
  isSubmitted: Boolean
  AND: NoteFilter
  OR: NoteFilter
  NOT: NoteFilter
  DISTINCT: Boolean
}

input NoteLocationInput {
  address: AddressInput
  point: Point
  pointOfInterest: String
}

type NoteLocationType {
  id: ID!
  address: AddressType!
  point: Point
  pointOfInterest: String
}

enum NoteNamespaceEnum {
  MOOD_ASSESSMENT
  PROVIDED_SERVICES
  REQUESTED_SERVICES
}

input NoteOrder {
  interactedAt: Ordering
}

type NoteType {
  id: ID!
  title: String!
  point: Point
  address: AddressType
  attachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]!
  moods: [MoodType!]!
  purposes(pagination: OffsetPaginationInput): [TaskType!]!
  nextSteps(pagination: OffsetPaginationInput): [TaskType!]!
  providedServices(pagination: OffsetPaginationInput): [ServiceRequestType!]!
  requestedServices(pagination: OffsetPaginationInput): [ServiceRequestType!]!
  publicDetails: String!
  isSubmitted: Boolean!
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
  interactedAt: DateTime!
  privateDetails: String
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

type OperationInfo {
  """List of messages returned by the operation."""
  messages: [OperationMessage!]!
}

type OperationMessage {
  """The kind of this message."""
  kind: OperationMessageKind!

  """The error message."""
  message: String!

  """
  The field that caused the error, or `null` if it isn't associated with any particular field.
  """
  field: String

  """The error code, or `null` if no error code was set."""
  code: String
}

enum OperationMessageKind {
  INFO
  WARNING
  ERROR
  PERMISSION
  VALIDATION
}

enum Ordering {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

"""Represents a point as `(x, y, z)` or `(x, y)`."""
scalar Point

type Query {
  currentUser: UserType!
  clientProfile(pk: ID!): ClientProfileType! @hasRetvalPerm(permissions: [{app: "accounts", permission: "view_clientprofile"}], any: true)
  clientProfiles(filters: ClientProfileFilter, pagination: OffsetPaginationInput): [ClientProfileType!]! @hasRetvalPerm(permissions: [{app: "accounts", permission: "view_clientprofile"}], any: true)
  address(pk: ID!): AddressType! @hasPerm(permissions: [{app: "common", permission: "view_address"}], any: true)
  addresses: [AddressType!]! @hasPerm(permissions: [{app: "common", permission: "view_address"}], any: true)
  location(pk: ID!): NoteLocationType! @hasPerm(permissions: [{app: "common", permission: "view_location"}], any: true)
  locations: [NoteLocationType!]! @hasPerm(permissions: [{app: "common", permission: "view_location"}], any: true)
  featureControls: FeatureControlData!
  note(pk: ID!): NoteType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notes(filters: NoteFilter, order: NoteOrder, pagination: OffsetPaginationInput): [NoteType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  noteAttachment(pk: ID!): NoteAttachmentType! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  noteAttachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  serviceRequest(pk: ID!): ServiceRequestType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_servicerequest"}], any: true)
  serviceRequests(pagination: OffsetPaginationInput): [ServiceRequestType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_servicerequest"}], any: true)
  task(pk: ID!): TaskType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
  tasks(pagination: OffsetPaginationInput): [TaskType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
  shelter(pk: ID!): ShelterType!
  shelters(pagination: OffsetPaginationInput): [ShelterType!]!
}

input RemoveNoteServiceRequestInput {
  serviceRequestId: ID!
  noteId: ID!
  serviceRequestType: ServiceRequestTypeEnum!
}

union RemoveNoteServiceRequestPayload = NoteType | OperationInfo

input RemoveNoteTaskInput {
  taskId: ID!
  noteId: ID!
  taskType: TaskTypeEnum!
}

union RemoveNoteTaskPayload = NoteType | OperationInfo

input RevertNoteInput {
  id: ID
  savedAt: DateTime!
}

union RevertNotePayload = NoteType | OperationInfo

type SampleType {
  name: String!
  isActive: Boolean!
  lastModified: DateTime
}

enum ServiceEnum {
  BLANKET
  BOOK
  CLOTHES
  DENTAL
  FOOD
  HARM_REDUCTION
  HYGIENE_KIT
  MEDICAL
  PET_CARE
  PET_FOOD
  SHELTER
  SHOES
  SHOWER
  STABILIZE
  STORAGE
  TRANSPORT
  WATER
  OTHER
}

enum ServiceRequestStatusEnum {
  COMPLETED
  TO_DO
}

type ServiceRequestType {
  id: ID!
  service: ServiceEnum!
  customService: String
  status: ServiceRequestStatusEnum!
  dueBy: DateTime
  completedOn: DateTime
  client: UserType
  createdBy: UserType!
  createdAt: DateTime!
}

enum ServiceRequestTypeEnum {
  PROVIDED
  REQUESTED
}

type ShelterType {
  id: ID!
  title: String!
  imageUrl: String
  howToEnter: [DjangoModelType!]!
  email: String
  phone: String!
  website: String
  services: [String!]!
  populations: [String!]!
  requirements: [String!]!
  funders: [String!]!
  location: LocationType!
  organization: String!
  description: DescriptionType!
  beds: BedsType!
}

type SwitchType {
  name: String!
  isActive: Boolean!
  lastModified: DateTime
}

enum TaskStatusEnum {
  COMPLETED
  TO_DO
}

type TaskType {
  id: ID!
  title: String!
  point: Point
  address: AddressType
  status: TaskStatusEnum!
  dueBy: DateTime
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
}

enum TaskTypeEnum {
  PURPOSE
  NEXT_STEP
}

input UpdateNoteInput {
  id: ID
  title: String
  point: Point
  address: ID
  publicDetails: String
  privateDetails: String
  isSubmitted: Boolean
  interactedAt: DateTime
}

input UpdateNoteLocationInput {
  id: ID
  point: Point
  address: AddressInput!
}

union UpdateNoteLocationPayload = NoteType | OperationInfo

union UpdateNotePayload = NoteType | OperationInfo

input UpdateServiceRequestInput {
  id: ID
  customService: String
  status: ServiceRequestStatusEnum
  dueBy: DateTime
  client: ID
}

union UpdateServiceRequestPayload = ServiceRequestType | OperationInfo

input UpdateTaskInput {
  id: ID
  title: String
  point: Point
  address: ID
  status: TaskStatusEnum
  dueBy: DateTime
  client: ID
}

input UpdateTaskLocationInput {
  id: ID
  point: Point
  address: AddressInput!
}

union UpdateTaskLocationPayload = TaskType | OperationInfo

union UpdateTaskPayload = TaskType | OperationInfo

scalar Upload

type UserType {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  email: String!
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
