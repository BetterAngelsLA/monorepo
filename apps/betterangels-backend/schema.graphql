"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

enum AdaAccommodationEnum {
  HEARING
  MOBILITY
  VISUAL
  OTHER
}

input AddressInput {
  addressComponents: JSON
  formattedAddress: String
}

type AddressType {
  id: ID!
  street: String
  city: String
  state: String
  zipCode: String
}

interface AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  UNKNOWN
}

input AuthInput {
  code: String
  code_verifier: String
  id_token: String
  redirect_uri: String
}

type AuthResponse {
  status_code: String!
}

input ClientContactInput {
  name: String
  email: String
  phoneNumber: PhoneNumber
  mailingAddress: String
  relationshipToClient: RelationshipTypeEnum
  relationshipToClientOther: String
  id: ID
}

type ClientContactType {
  name: String
  email: String
  phoneNumber: PhoneNumber
  mailingAddress: String
  relationshipToClient: RelationshipTypeEnum
  relationshipToClientOther: String
  id: ID!
  clientProfile: DjangoModelType!
}

enum ClientDocumentNamespaceEnum {
  DRIVERS_LICENSE_FRONT
  DRIVERS_LICENSE_BACK
  PHOTO_ID
  BIRTH_CERTIFICATE
  SOCIAL_SECURITY_CARD
  OTHER_DOC_READY
  CONSENT_FORM
  HMIS_FORM
  INCOME_FORM
  OTHER_FORM
  OTHER_CLIENT_DOCUMENT
}

type ClientDocumentType implements AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
  createdAt: DateTime!
  updatedAt: DateTime!
  namespace: ClientDocumentNamespaceEnum!
}

type ClientDocumentTypeOffsetPaginated {
  pageInfo: OffsetPaginationInfo!

  """Total count of existing results."""
  totalCount: Int!

  """List of paginated results."""
  results: [ClientDocumentType!]!
}

input ClientHouseholdMemberInput {
  name: String
  dateOfBirth: Date
  gender: GenderEnum
  genderOther: String
  relationshipToClient: RelationshipTypeEnum
  relationshipToClientOther: String
  id: ID
}

type ClientHouseholdMemberType {
  name: String
  dateOfBirth: Date
  gender: GenderEnum
  genderOther: String
  relationshipToClient: RelationshipTypeEnum
  relationshipToClientOther: String
  id: ID!
  clientProfile: DjangoModelType!
  displayGender: String
}

input ClientProfileFilter {
  AND: ClientProfileFilter
  OR: ClientProfileFilter
  NOT: ClientProfileFilter
  DISTINCT: Boolean
  isActive: Boolean
  search: String
  searchClient: ClientSearchInput
}

input ClientProfileOrder {
  user_FirstName: Ordering
  user_LastName: Ordering
  id: Ordering
}

input ClientProfilePhotoInput {
  clientProfile: ID!
  photo: Upload!
}

type ClientProfileType {
  adaAccommodation: [AdaAccommodationEnum!]
  address: String
  age: Int
  californiaId: String
  dateOfBirth: Date
  eyeColor: EyeColorEnum
  gender: GenderEnum
  genderOther: String
  hairColor: HairColorEnum
  heightInInches: Float
  hmisId: String
  importantNotes: String
  livingSituation: LivingSituationEnum
  maritalStatus: MaritalStatusEnum
  mailingAddress: String
  nickname: String
  phoneNumber: PhoneNumber
  physicalDescription: String
  placeOfBirth: String
  preferredCommunication: [PreferredCommunicationEnum!]
  preferredLanguage: LanguageEnum
  profilePhoto: DjangoImageType
  pronouns: PronounEnum
  pronounsOther: String
  race: RaceEnum
  residenceAddress: String
  spokenLanguages: [LanguageEnum!]
  veteranStatus: YesNoPreferNotToSayEnum
  id: ID!
  contacts: [ClientContactType!]
  hmisProfiles: [HmisProfileType!]
  householdMembers: [ClientHouseholdMemberType!]
  phoneNumbers: [PhoneNumberType!]
  socialMediaProfiles: [SocialMediaProfileType!]
  displayGender: String
  displayPronouns: String
  docReadyDocuments(pagination: OffsetPaginationInput): [ClientDocumentType!]
  consentFormDocuments(pagination: OffsetPaginationInput): [ClientDocumentType!]
  otherDocuments(pagination: OffsetPaginationInput): [ClientDocumentType!]
  user: UserType!
  displayCaseManager: String!
}

type ClientProfileTypeOffsetPaginated {
  pageInfo: OffsetPaginationInfo!

  """Total count of existing results."""
  totalCount: Int!

  """List of paginated results."""
  results: [ClientProfileType!]!
}

input ClientSearchInput {
  excludedClientProfileId: String = null
  californiaId: String = null
  firstName: String = null
  lastName: String = null
  middleName: String = null
}

input CreateClientDocumentInput {
  clientProfile: ID!
  file: Upload!
  namespace: ClientDocumentNamespaceEnum!
}

union CreateClientDocumentPayload = ClientDocumentType | OperationInfo

input CreateClientProfileInput {
  adaAccommodation: [AdaAccommodationEnum!]
  address: String
  age: Int
  californiaId: String
  dateOfBirth: Date
  eyeColor: EyeColorEnum
  gender: GenderEnum
  genderOther: String
  hairColor: HairColorEnum
  heightInInches: Float
  hmisId: String
  importantNotes: String
  livingSituation: LivingSituationEnum
  maritalStatus: MaritalStatusEnum
  mailingAddress: String
  nickname: String
  phoneNumber: PhoneNumber
  physicalDescription: String
  placeOfBirth: String
  preferredCommunication: [PreferredCommunicationEnum!]
  preferredLanguage: LanguageEnum
  profilePhoto: Upload
  pronouns: PronounEnum
  pronounsOther: String
  race: RaceEnum
  residenceAddress: String
  spokenLanguages: [LanguageEnum!]
  veteranStatus: YesNoPreferNotToSayEnum
  contacts: [ClientContactInput!]
  hmisProfiles: [HmisProfileInput!]
  householdMembers: [ClientHouseholdMemberInput!]
  phoneNumbers: [PhoneNumberInput!]
  socialMediaProfiles: [SocialMediaProfileInput!]
  user: CreateUserInput!
}

union CreateClientProfilePayload = ClientProfileType | OperationInfo

input CreateNoteAttachmentInput {
  note: ID!
  file: Upload!
  namespace: NoteNamespaceEnum!
}

union CreateNoteAttachmentPayload = NoteAttachmentType | OperationInfo

input CreateNoteInput {
  purpose: String
  title: String
  publicDetails: String
  privateDetails: String
  client: ID
}

input CreateNoteMoodInput {
  descriptor: MoodEnum!
  noteId: ID!
}

union CreateNoteMoodPayload = MoodType | OperationInfo

union CreateNotePayload = NoteType | OperationInfo

input CreateNoteServiceRequestInput {
  service: ServiceEnum!
  customService: String
  serviceOther: String
  noteId: ID!
  serviceRequestType: ServiceRequestTypeEnum!
}

union CreateNoteServiceRequestPayload = ServiceRequestType | OperationInfo

input CreateServiceRequestInput {
  service: ServiceEnum!
  status: ServiceRequestStatusEnum!
  customService: String
  serviceOther: String
  client: ID
}

union CreateServiceRequestPayload = ServiceRequestType | OperationInfo

input CreateTaskInput {
  title: String!
  status: TaskStatusEnum!
  dueBy: DateTime
  client: ID
}

union CreateTaskPayload = TaskType | OperationInfo

input CreateUserInput {
  firstName: String
  lastName: String
  middleName: String
  email: String
}

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

union DeleteClientDocumentPayload = ClientDocumentType | OperationInfo

union DeleteClientProfilePayload = DeletedObjectType | OperationInfo

union DeleteCurrentUserPayload = DeletedObjectType | OperationInfo

input DeleteDjangoObjectInput {
  id: ID!
}

union DeleteMoodPayload = DeletedObjectType | OperationInfo

union DeleteNoteAttachmentPayload = NoteAttachmentType | OperationInfo

union DeleteNotePayload = NoteType | OperationInfo

union DeleteServiceRequestPayload = DeletedObjectType | OperationInfo

union DeleteTaskPayload = DeletedObjectType | OperationInfo

type DeletedObjectType {
  id: Int!
}

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

type DjangoImageType {
  name: String!
  path: String!
  size: Int!
  url: String!
  width: Int!
  height: Int!
}

type DjangoModelType {
  pk: ID!
}

enum DueByGroupEnum {
  OVERDUE
  TODAY
  TOMORROW
  IN_THE_NEXT_WEEK
  FUTURE_TASKS
  NO_DUE_DATE
}

enum EyeColorEnum {
  BLUE
  BROWN
  GREEN
  GRAY
  HAZEL
  OTHER
}

type FeatureControlData {
  flags: [FlagType!]!
  switches: [SwitchType!]!
  samples: [SampleType!]!
}

type FlagType {
  name: String!
  isActive: Boolean
  lastModified: DateTime
}

enum GenderEnum {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

enum HairColorEnum {
  BLACK
  BLONDE
  BROWN
  GRAY
  RED
  WHITE
  BALD
  OTHER
}

enum HmisAgencyEnum {
  LAHSA
  SANTA_MONICA
  PASADENA
  CHAMP
  VASH
}

input HmisProfileInput {
  id: ID
  hmisId: String!
  agency: HmisAgencyEnum!
}

type HmisProfileType {
  id: ID!
  hmisId: String!
  agency: HmisAgencyEnum!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

enum LanguageEnum {
  ARABIC
  ARMENIAN
  ENGLISH
  FARSI
  INDONESIAN
  JAPANESE
  KHMER
  KOREAN
  RUSSIAN
  SIMPLIFIED_CHINESE
  SPANISH
  TAGALOG
  TRADITIONAL_CHINESE
  VIETNAMESE
}

enum LivingSituationEnum {
  HOUSING
  OPEN_AIR
  SHELTER
  TENT
  VEHICLE
  OTHER
}

input LocationInput {
  address: AddressInput
  point: Point!
  pointOfInterest: String
}

type LocationType {
  id: ID!
  address: AddressType!
  point: Point!
  pointOfInterest: String
}

input LoginInput {
  username: String!
  password: String!
}

input MagicLinkInput {
  email: String!
}

type MagicLinkResponse {
  message: String!
}

enum MaritalStatusEnum {
  DIVORCED
  MARRIED
  SEPARATED
  SINGLE
  WIDOWED
}

enum MoodEnum {
  AGITATED
  AGREEABLE
  ANXIOUS
  DEPRESSED
  DETACHED
  DISORGANIZED_THOUGHT
  DISORIENTED
  ESCALATED
  EUTHYMIC
  FLAT_BLUNTED
  HAPPY
  HOPELESS
  INDIFFERENT
  MANIC
  MOTIVATED
  OPTIMISTIC
  PERSONABLE
  PLEASANT
  RESTLESS
  SUICIDAL
}

type MoodType {
  id: ID!
  descriptor: MoodEnum!
}

type Mutation {
  logout: Boolean!
  login(input: LoginInput!): AuthResponse!
  googleAuth(input: AuthInput!): AuthResponse!
  appleAuth(input: AuthInput!): AuthResponse!
  generateMagicLink(data: MagicLinkInput!): MagicLinkResponse!
  updateCurrentUser(data: UpdateUserInput!): UpdateCurrentUserPayload!
  deleteCurrentUser: DeleteCurrentUserPayload!
  deleteClientDocument(data: DeleteDjangoObjectInput!): DeleteClientDocumentPayload! @hasRetvalPerm(permissions: [{app: "common", permission: "delete_attachment"}], any: true)
  createClientDocument(data: CreateClientDocumentInput!): CreateClientDocumentPayload! @hasPerm(permissions: [{app: "common", permission: "add_attachment"}], any: true)
  createClientProfile(data: CreateClientProfileInput!): CreateClientProfilePayload! @hasPerm(permissions: [{app: "clients", permission: "add_clientprofile"}], any: true)
  updateClientProfile(data: UpdateClientProfileInput!): UpdateClientProfilePayload! @hasRetvalPerm(permissions: [{app: "clients", permission: "change_clientprofile"}], any: true)
  updateClientProfilePhoto(data: ClientProfilePhotoInput!): UpdateClientProfilePhotoPayload! @hasRetvalPerm(permissions: [{app: "clients", permission: "change_clientprofile"}], any: true)
  deleteClientProfile(data: DeleteDjangoObjectInput!): DeleteClientProfilePayload!
  deleteNote(data: DeleteDjangoObjectInput!): DeleteNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_note"}], any: true)
  deleteNoteAttachment(data: DeleteDjangoObjectInput!): DeleteNoteAttachmentPayload! @hasRetvalPerm(permissions: [{app: "common", permission: "delete_attachment"}], any: true)
  createNote(data: CreateNoteInput!): CreateNotePayload! @hasPerm(permissions: [{app: "notes", permission: "add_note"}], any: true)
  updateNote(data: UpdateNoteInput!): UpdateNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  updateNoteLocation(data: UpdateNoteLocationInput!): UpdateNoteLocationPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  revertNote(data: RevertNoteInput!): RevertNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  createNoteAttachment(data: CreateNoteAttachmentInput!): CreateNoteAttachmentPayload! @hasPerm(permissions: [{app: "common", permission: "add_attachment"}], any: true)
  createNoteMood(data: CreateNoteMoodInput!): CreateNoteMoodPayload!
  deleteMood(data: DeleteDjangoObjectInput!): DeleteMoodPayload!
  createServiceRequest(data: CreateServiceRequestInput!): CreateServiceRequestPayload! @hasPerm(permissions: [{app: "notes", permission: "add_servicerequest"}], any: true)
  createNoteServiceRequest(data: CreateNoteServiceRequestInput!): CreateNoteServiceRequestPayload! @hasPerm(permissions: [{app: "notes", permission: "add_servicerequest"}], any: true)
  updateServiceRequest(data: UpdateServiceRequestInput!): UpdateServiceRequestPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_servicerequest"}], any: true)
  removeNoteServiceRequest(data: RemoveNoteServiceRequestInput!): RemoveNoteServiceRequestPayload!
  deleteServiceRequest(data: DeleteDjangoObjectInput!): DeleteServiceRequestPayload!
  createTask(data: CreateTaskInput!): CreateTaskPayload! @hasPerm(permissions: [{app: "notes", permission: "add_task"}], any: true)
  updateTask(data: UpdateTaskInput!): UpdateTaskPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_task"}], any: true)
  updateTaskLocation(data: UpdateTaskLocationInput!): UpdateTaskLocationPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_task"}], any: true)
  deleteTask(data: DeleteDjangoObjectInput!): DeleteTaskPayload!
}

input NoteAttachmentFilter {
  attachmentType: AttachmentType
  namespace: NoteNamespaceEnum!
  AND: NoteAttachmentFilter
  OR: NoteAttachmentFilter
  NOT: NoteAttachmentFilter
  DISTINCT: Boolean
}

type NoteAttachmentType implements AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
  createdAt: DateTime!
  updatedAt: DateTime!
  namespace: NoteNamespaceEnum!
}

input NoteFilter {
  client: ID
  createdBy: ID
  isSubmitted: Boolean
  AND: NoteFilter
  OR: NoteFilter
  NOT: NoteFilter
  DISTINCT: Boolean
  search: String
}

enum NoteNamespaceEnum {
  MOOD_ASSESSMENT
  PROVIDED_SERVICES
  REQUESTED_SERVICES
}

input NoteOrder {
  interactedAt: Ordering
  id: Ordering
}

type NoteType {
  id: ID!
  purpose: String
  team: SelahTeamEnum
  title: String
  location: LocationType
  attachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]!
  moods: [MoodType!]!
  providedServices(pagination: OffsetPaginationInput): [ServiceRequestType!]!
  requestedServices(pagination: OffsetPaginationInput): [ServiceRequestType!]!
  publicDetails: String!
  isSubmitted: Boolean!
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
  interactedAt: DateTime!
  privateDetails: String
}

type NoteTypeOffsetPaginated {
  pageInfo: OffsetPaginationInfo!

  """Total count of existing results."""
  totalCount: Int!

  """List of paginated results."""
  results: [NoteType!]!
}

type OffsetPaginationInfo {
  offset: Int!
  limit: Int
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int = null
}

input OneToManyInput {
  set: ID
}

type OperationInfo {
  """List of messages returned by the operation."""
  messages: [OperationMessage!]!
}

type OperationMessage {
  """The kind of this message."""
  kind: OperationMessageKind!

  """The error message."""
  message: String!

  """
  The field that caused the error, or `null` if it isn't associated with any particular field.
  """
  field: String

  """The error code, or `null` if no error code was set."""
  code: String
}

enum OperationMessageKind {
  INFO
  WARNING
  ERROR
  PERMISSION
  VALIDATION
}

enum Ordering {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type OrganizationType {
  id: ID!
  name: String!
}

scalar PhoneNumber

input PhoneNumberInput {
  id: ID
  number: PhoneNumber
  isPrimary: Boolean = false
}

type PhoneNumberType {
  id: ID!
  number: PhoneNumber
  isPrimary: Boolean
}

"""Represents a point as `(x, y, z)` or `(x, y)`."""
scalar Point

enum PreferredCommunicationEnum {
  CALL
  EMAIL
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TEXT
  WHATSAPP
}

enum PronounEnum {
  HE_HIM_HIS
  SHE_HER_HERS
  THEY_THEM_THEIRS
  OTHER
}

type Query {
  currentUser: UserType!
  clientProfiles(filters: ClientProfileFilter, order: ClientProfileOrder, pagination: OffsetPaginationInput): [ClientProfileType!]! @hasRetvalPerm(permissions: [{app: "clients", permission: "view_clientprofile"}], any: true)
  clientProfilesPaginated(pagination: OffsetPaginationInput, filters: ClientProfileFilter, order: ClientProfileOrder): ClientProfileTypeOffsetPaginated! @hasRetvalPerm(permissions: [{app: "clients", permission: "view_clientprofile"}], any: true)
  clientDocument(pk: ID!): ClientDocumentType! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  clientDocuments(pagination: OffsetPaginationInput): [ClientDocumentType!]! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  clientDocumentsPaginated(pagination: OffsetPaginationInput): ClientDocumentTypeOffsetPaginated! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  clientProfile(pk: ID!): ClientProfileType! @hasRetvalPerm(permissions: [{app: "clients", permission: "view_clientprofile"}], any: true)
  featureControls: FeatureControlData!
  note(pk: ID!): NoteType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notes(filters: NoteFilter, order: NoteOrder, pagination: OffsetPaginationInput): [NoteType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notesPaginated(pagination: OffsetPaginationInput, filters: NoteFilter, order: NoteOrder): NoteTypeOffsetPaginated! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  noteAttachment(pk: ID!): NoteAttachmentType! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  noteAttachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  serviceRequest(pk: ID!): ServiceRequestType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_servicerequest"}], any: true)
  serviceRequests(pagination: OffsetPaginationInput): [ServiceRequestType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_servicerequest"}], any: true)
  task(pk: ID!): TaskType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
  tasks(order: TaskOrder, pagination: OffsetPaginationInput): [TaskType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
}

enum RaceEnum {
  AMERICAN_INDIAN_ALASKA_NATIVE
  ASIAN
  BLACK_AFRICAN_AMERICAN
  HISPANIC_LATINO
  NATIVE_HAWAIIAN_PACIFIC_ISLANDER
  WHITE_CAUCASIAN
  OTHER
}

enum RelationshipTypeEnum {
  CURRENT_CASE_MANAGER
  PAST_CASE_MANAGER
  ORGANIZATION
  AUNT
  CHILD
  COUSIN
  FATHER
  FRIEND
  GRANDPARENT
  MOTHER
  PET
  SIBLING
  UNCLE
  OTHER
}

input RemoveNoteServiceRequestInput {
  serviceRequestId: ID!
  noteId: ID!
  serviceRequestType: ServiceRequestTypeEnum!
}

union RemoveNoteServiceRequestPayload = NoteType | OperationInfo

input RevertNoteInput {
  id: ID!
  revertBeforeTimestamp: DateTime!
}

union RevertNotePayload = NoteType | OperationInfo

type SampleType {
  name: String!
  isActive: Boolean!
  lastModified: DateTime
}

enum SelahTeamEnum {
  BOWTIE_RIVERSIDE_OUTREACH
  ECHO_PARK_ON_SITE
  ECHO_PARK_OUTREACH
  HOLLYWOOD_ON_SITE
  HOLLYWOOD_OUTREACH
  LA_RIVER_OUTREACH
  LOS_FELIZ_OUTREACH
  NORTHEAST_HOLLYWOOD_OUTREACH
  SILVER_LAKE_OUTREACH
  SLCC_ON_SITE
  SUNDAY_SOCIAL_ATWATER_ON_SITE
  SUNDAY_SOCIAL_ATWATER_OUTREACH
  WDI_ON_SITE
  WDI_OUTREACH
}

enum ServiceEnum {
  BICYCLE
  BIRTH_CERTIFICATE
  BLANKET
  BOOK
  CALIFORNIA_LIFELINE_PHONE
  CLOTHES
  CONTACT_DPSS
  CONTACT_FRIEND
  DMH_EVALUATION
  DMV_NO_FEE_ID_FORM
  DENTAL
  DISCOUNT_SCOOTER_RIDES
  FAMILY_REUNIFICATION
  FOOD
  HARM_REDUCTION
  HYGIENE_KIT
  INTERNET_ACCESS
  LEGAL_COUNSEL
  MAIL_PICK_UP
  MEDICAL
  METRO_LIFE_TAP
  PET_CARE
  PET_FOOD
  PUBLIC_BENEFITS_PROGRAMS
  RIDE
  SAFE_PARKING
  SHELTER
  SHOES
  SHOWER
  SOCIAL_SECURITY_CARD_REPLACEMENT
  STABILIZE
  STIMULUS_ASSISTANCE
  STORAGE
  STORAGE_BELONGINGS
  STORAGE_DOCUMENTS
  TENT
  THERAPIST_APPOINTMENT
  TRANSPORT
  UNEMPLOYMENT_CERTIFICATION
  VACCINE_PASSPORT
  WATER
  OTHER
}

enum ServiceRequestStatusEnum {
  COMPLETED
  TO_DO
}

type ServiceRequestType {
  id: ID!
  service: ServiceEnum!
  customService: String
  serviceOther: String
  status: ServiceRequestStatusEnum!
  dueBy: DateTime
  completedOn: DateTime
  client: UserType
  createdBy: UserType!
  createdAt: DateTime!
}

enum ServiceRequestTypeEnum {
  PROVIDED
  REQUESTED
}

enum SocialMediaEnum {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  SNAPCHAT
  TIKTOK
  TWITTER
  WHATSAPP
}

input SocialMediaProfileInput {
  id: ID
  clientProfile: OneToManyInput
  platform: SocialMediaEnum
  platformUserId: String
}

type SocialMediaProfileType {
  id: ID
  clientProfile: DjangoModelType!
  platform: SocialMediaEnum!
  platformUserId: String!
}

type SwitchType {
  name: String!
  isActive: Boolean!
  lastModified: DateTime
}

input TaskOrder {
  dueBy: Ordering
  id: Ordering
}

enum TaskStatusEnum {
  COMPLETED
  TO_DO
}

type TaskType {
  id: ID!
  title: String!
  location: LocationType
  status: TaskStatusEnum!
  dueBy: DateTime
  dueByGroup: DueByGroupEnum!
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
}

input UpdateClientProfileInput {
  adaAccommodation: [AdaAccommodationEnum!]
  address: String
  age: Int
  californiaId: String
  dateOfBirth: Date
  eyeColor: EyeColorEnum
  gender: GenderEnum
  genderOther: String
  hairColor: HairColorEnum
  heightInInches: Float
  hmisId: String
  importantNotes: String
  livingSituation: LivingSituationEnum
  maritalStatus: MaritalStatusEnum
  mailingAddress: String
  nickname: String
  phoneNumber: PhoneNumber
  physicalDescription: String
  placeOfBirth: String
  preferredCommunication: [PreferredCommunicationEnum!]
  preferredLanguage: LanguageEnum
  profilePhoto: Upload
  pronouns: PronounEnum
  pronounsOther: String
  race: RaceEnum
  residenceAddress: String
  spokenLanguages: [LanguageEnum!]
  veteranStatus: YesNoPreferNotToSayEnum
  id: ID!
  contacts: [ClientContactInput!]
  hmisProfiles: [HmisProfileInput!]
  householdMembers: [ClientHouseholdMemberInput!]
  phoneNumbers: [PhoneNumberInput!]
  socialMediaProfiles: [SocialMediaProfileInput!]
  user: UpdateUserInput
}

union UpdateClientProfilePayload = ClientProfileType | OperationInfo

union UpdateClientProfilePhotoPayload = ClientProfileType | OperationInfo

union UpdateCurrentUserPayload = UserType | OperationInfo

input UpdateNoteInput {
  id: ID!
  purpose: String
  team: SelahTeamEnum
  title: String
  location: ID
  publicDetails: String
  privateDetails: String
  isSubmitted: Boolean
  interactedAt: DateTime
}

input UpdateNoteLocationInput {
  id: ID!
  location: LocationInput!
}

union UpdateNoteLocationPayload = NoteType | OperationInfo

union UpdateNotePayload = NoteType | OperationInfo

input UpdateServiceRequestInput {
  id: ID!
  customService: String
  serviceOther: String
  status: ServiceRequestStatusEnum
  dueBy: DateTime
  client: ID
}

union UpdateServiceRequestPayload = ServiceRequestType | OperationInfo

input UpdateTaskInput {
  id: ID!
  title: String
  location: ID
  status: TaskStatusEnum
  dueBy: DateTime
  client: ID
}

input UpdateTaskLocationInput {
  id: ID!
  location: LocationInput!
}

union UpdateTaskLocationPayload = TaskType | OperationInfo

union UpdateTaskPayload = TaskType | OperationInfo

input UpdateUserInput {
  firstName: String
  lastName: String
  middleName: String
  email: String
  id: ID!
  hasAcceptedTos: Boolean
  hasAcceptedPrivacyPolicy: Boolean
}

scalar Upload

type UserType {
  firstName: String
  lastName: String
  middleName: String
  email: String
  id: ID!
  clientProfile: DjangoModelType
  hasAcceptedTos: Boolean
  hasAcceptedPrivacyPolicy: Boolean
  isOutreachAuthorized: Boolean
  organizationsOrganization: [OrganizationType!]
  username: String!
}

enum YesNoPreferNotToSayEnum {
  YES
  NO
  PREFER_NOT_TO_SAY
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
