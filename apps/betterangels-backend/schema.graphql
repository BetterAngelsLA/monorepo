"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

interface AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  UNKNOWN
}

input CreateMoodInput {
  descriptor: MoodEnum!
}

input CreateNoteAttachmentInput {
  note: ID!
  file: Upload!
  namespace: NoteNamespaceEnum!
}

union CreateNoteAttachmentPayload = NoteAttachmentType | OperationInfo

input CreateNoteInput {
  title: String!
  publicDetails: String
  privateDetails: String
  client: ID
}

union CreateNotePayload = NoteType | OperationInfo

input CreateServiceRequestInput {
  service: ServiceEnum!
  status: ServiceRequestStatusEnum!
  customService: String
  client: ID
}

union CreateServiceRequestPayload = ServiceRequestType | OperationInfo

input CreateTaskInput {
  title: String!
  status: TaskStatusEnum!
  dueBy: DateTime
  client: ID
}

union CreateTaskPayload = TaskType | OperationInfo

"""Date with time (isoformat)"""
scalar DateTime

input DeleteDjangoObjectInput {
  id: ID!
}

union DeleteNoteAttachmentPayload = NoteAttachmentType | OperationInfo

union DeleteNotePayload = NoteType | OperationInfo

union DeleteServiceRequestPayload = ServiceRequestType | OperationInfo

union DeleteTaskPayload = TaskType | OperationInfo

type DjangoFileType {
  name: String!
  path: String!
  size: Int!
  url: String!
}

input DjangoModelFilterInput {
  pk: ID!
}

input MagicLinkInput {
  email: String!
}

type MagicLinkResponse {
  message: String!
}

enum MoodEnum {
  AGITATED
  AGREEABLE
  ANXIOUS
  DEPRESSED
  DETACHED
  DISORGANIZED_THOUGHT
  DISORIENTED
  ESCALATED
  EUTHYMIC
  FLAT_BLUNTED
  HAPPY
  HOPELESS
  INDIFFERENT
  MANIC
  MOTIVATED
  OPTIMISTIC
  PERSONABLE
  PLEASANT
  RESTLESS
  SUICIDAL
}

type MoodType {
  descriptor: MoodEnum!
}

type Mutation {
  logout: Boolean!
  generateMagicLink(data: MagicLinkInput!): MagicLinkResponse!
  deleteNote(data: DeleteDjangoObjectInput!): DeleteNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_note"}], any: true)
  deleteNoteAttachment(data: DeleteDjangoObjectInput!): DeleteNoteAttachmentPayload! @hasRetvalPerm(permissions: [{app: "common", permission: "delete_attachment"}], any: true)
  deleteServiceRequest(data: DeleteDjangoObjectInput!): DeleteServiceRequestPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_service_request"}], any: true)
  deleteTask(data: DeleteDjangoObjectInput!): DeleteTaskPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_task"}], any: true)
  createNote(data: CreateNoteInput!): CreateNotePayload! @hasPerm(permissions: [{app: "notes", permission: "add_note"}], any: true)
  revertNote(data: RevertNoteInput!): RevertNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  updateNote(data: UpdateNoteInput!): UpdateNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  createNoteAttachment(data: CreateNoteAttachmentInput!): CreateNoteAttachmentPayload! @hasPerm(permissions: [{app: "common", permission: "add_attachment"}], any: true)
  createServiceRequest(data: CreateServiceRequestInput!): CreateServiceRequestPayload! @hasPerm(permissions: [{app: "notes", permission: "add_service_request"}], any: true)
  updateServiceRequest(data: UpdateServiceRequestInput!): UpdateServiceRequestPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_service_request"}], any: true)
  createTask(data: CreateTaskInput!): CreateTaskPayload! @hasPerm(permissions: [{app: "notes", permission: "add_task"}], any: true)
  updateTask(data: UpdateTaskInput!): UpdateTaskPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_task"}], any: true)
}

input NoteAttachmentFilter {
  attachmentType: AttachmentType
  namespace: NoteNamespaceEnum!
  AND: NoteAttachmentFilter
  OR: NoteAttachmentFilter
  NOT: NoteAttachmentFilter
  DISTINCT: Boolean
}

type NoteAttachmentType implements AttachmentInterface {
  id: ID!
  file: DjangoFileType!
  attachmentType: AttachmentType!
  originalFilename: String
  namespace: NoteNamespaceEnum!
}

input NoteFilter {
  client: DjangoModelFilterInput
  createdBy: DjangoModelFilterInput
  isSubmitted: Boolean
  AND: NoteFilter
  OR: NoteFilter
  NOT: NoteFilter
  DISTINCT: Boolean
}

enum NoteNamespaceEnum {
  MOOD_ASSESSMENT
  PROVIDED_SERVICES
  REQUESTED_SERVICES
}

type NoteType {
  id: ID!
  title: String!
  attachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]!
  publicDetails: String!
  moods: [MoodType!]!
  isSubmitted: Boolean!
  timestamp: DateTime!
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
  privateDetails: String
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

type OperationInfo {
  """List of messages returned by the operation."""
  messages: [OperationMessage!]!
}

type OperationMessage {
  """The kind of this message."""
  kind: OperationMessageKind!

  """The error message."""
  message: String!

  """
  The field that caused the error, or `null` if it isn't associated with any particular field.
  """
  field: String

  """The error code, or `null` if no error code was set."""
  code: String
}

enum OperationMessageKind {
  INFO
  WARNING
  ERROR
  PERMISSION
  VALIDATION
}

type Query {
  currentUser: UserType!
  note(pk: ID!): NoteType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notes(filters: NoteFilter, pagination: OffsetPaginationInput): [NoteType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  noteAttachment(pk: ID!): NoteAttachmentType! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  noteAttachments(filters: NoteAttachmentFilter, pagination: OffsetPaginationInput): [NoteAttachmentType!]! @hasRetvalPerm(permissions: [{app: "common", permission: "view_attachment"}], any: true)
  serviceRequest(pk: ID!): ServiceRequestType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_service_request"}], any: true)
  serviceRequests(pagination: OffsetPaginationInput): [ServiceRequestType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_service_request"}], any: true)
  task(pk: ID!): TaskType! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
  tasks(pagination: OffsetPaginationInput): [TaskType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_task"}], any: true)
}

input RevertNoteInput {
  id: ID
  savedAt: DateTime!
}

union RevertNotePayload = NoteType | OperationInfo

enum ServiceEnum {
  BLANKET
  BOOK
  CLOTHES
  DENTAL
  FOOD
  HARM_REDUCTION
  HYGIENE_KIT
  MEDICAL
  PET_CARE
  PET_FOOD
  SHELTER
  SHOES
  SHOWER
  STABILIZE
  STORAGE
  TRANSPORT
  WATER
  OTHER
}

enum ServiceRequestStatusEnum {
  COMPLETED
  TO_DO
}

type ServiceRequestType {
  id: ID!
  service: ServiceEnum!
  customService: String
  status: ServiceRequestStatusEnum!
  dueBy: DateTime
  completedOn: DateTime
  client: UserType
  createdBy: UserType!
  createdAt: DateTime!
}

enum TaskStatusEnum {
  COMPLETED
  TO_DO
}

type TaskType {
  id: ID!
  title: String!
  status: TaskStatusEnum!
  dueBy: DateTime
  client: UserType
  createdAt: DateTime!
  createdBy: UserType!
}

input UpdateNoteInput {
  id: ID
  title: String
  publicDetails: String
  privateDetails: String
  moods: [CreateMoodInput!]
  isSubmitted: Boolean
  timestamp: DateTime
}

union UpdateNotePayload = NoteType | OperationInfo

input UpdateServiceRequestInput {
  id: ID
  customService: String
  status: ServiceRequestStatusEnum
  dueBy: DateTime
  client: ID
}

union UpdateServiceRequestPayload = ServiceRequestType | OperationInfo

input UpdateTaskInput {
  id: ID
  title: String
  status: TaskStatusEnum
  dueBy: DateTime
  client: ID
}

union UpdateTaskPayload = TaskType | OperationInfo

scalar Upload

type UserType {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
