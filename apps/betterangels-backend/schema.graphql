"""
Will check if the user has any/all permissions for the parent of this field to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasSourcePerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions to resolve this.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

input CreateMoodInput {
  descriptor: MoodEnum!
}

input CreateNoteInput {
  title: String!
  publicDetails: String
  privateDetails: String
  client: UserInput
}

union CreateNotePayload = NoteType | OperationInfo

"""Date with time (isoformat)"""
scalar DateTime

input DeleteDjangoObjectInput {
  id: ID!
}

union DeleteNotePayload = NoteType | OperationInfo

input MagicLinkInput {
  email: String!
}

type MagicLinkResponse {
  message: String!
}

enum MoodEnum {
  AGITATED
  AGREEABLE
  ANXIOUS
  DEPRESSED
  DETACHED
  DISORGANIZED_THOUGHT
  DISORIENTED
  ESCALATED
  EUTHYMIC
  FLAT_BLUNTED
  HAPPY
  HOPELESS
  INDIFFERENT
  MANIC
  MOTIVATED
  OPTIMISTIC
  PERSONABLE
  PLEASANT
  RESTLESS
  SUICIDAL
}

type MoodType {
  descriptor: MoodEnum!
}

type Mutation {
  logout: Boolean!
  generateMagicLink(data: MagicLinkInput!): MagicLinkResponse!
  updateNote(data: UpdateNoteInput!): UpdateNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  deleteNote(data: DeleteDjangoObjectInput!): DeleteNotePayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_note"}], any: true)
  createNote(data: CreateNoteInput!): CreateNotePayload! @hasPerm(permissions: [{app: "notes", permission: "add_note"}], any: true)
  revertNoteVersion(data: RevertNoteVersionInput!): RevertNoteVersionPayload! @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
}

type NoteType {
  id: ID!
  title: String!
  publicDetails: String!
  client: UserType
  moods: [MoodType!]!
  isSubmitted: Boolean!
  createdAt: DateTime!
  createdBy: UserType!
  privateDetails: String @hasSourcePerm(permissions: [{app: "notes", permission: "view_note_private_details"}], any: true)
  historyId: Int!
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

type OperationInfo {
  """List of messages returned by the operation."""
  messages: [OperationMessage!]!
}

type OperationMessage {
  """The kind of this message."""
  kind: OperationMessageKind!

  """The error message."""
  message: String!

  """
  The field that caused the error, or `null` if it isn't associated with any particular field.
  """
  field: String

  """The error code, or `null` if no error code was set."""
  code: String
}

enum OperationMessageKind {
  INFO
  WARNING
  ERROR
  PERMISSION
  VALIDATION
}

type Query {
  currentUser: UserType!
  note(pk: ID!): NoteType! @hasPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notes(pagination: OffsetPaginationInput): [NoteType!]! @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
}

input RevertNoteVersionInput {
  id: String!
  historyId: Int!
}

union RevertNoteVersionPayload = NoteType | OperationInfo

input UpdateNoteInput {
  id: ID
  title: String!
  publicDetails: String
  privateDetails: String
  moods: [CreateMoodInput!]
  isSaved: Boolean
  isSubmitted: Boolean
}

union UpdateNotePayload = NoteType | OperationInfo

input UserInput {
  id: ID
}

type UserType {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
