"""
Can only be resolved by authenticated users.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @isAuthenticated repeatable on FIELD_DEFINITION

"""
Will check if the user has any/all permissions for the resolved value of this field before returning it.

When the condition fails, the following can be returned (following this priority):
1) `OperationInfo`/`OperationMessage` if those types are allowed at the return type
2) `null` in case the field is not mandatory (e.g. `String` or `[String]`)
3) An empty list in case the field is a list (e.g. `[String]!`)
4) An empty `Connection` in case the return type is a relay connection
2) Otherwise, an error will be raised
"""
directive @hasRetvalPerm(permissions: [PermDefinition!]!, any: Boolean! = true) repeatable on FIELD_DEFINITION

type BedsType {
  totalBeds: Int
  privateBeds: Int
  availableBeds: Int
  maxStay: Int
  averageBedRate: Float
  bedLayoutDescription: String!
}

input CreateNoteInput {
  title: String!
  body: String!
}

"""Date with time (isoformat)"""
scalar DateTime

input DeleteDjangoObjectInput {
  id: ID!
}

type DescriptionType {
  description: String
  typicalStayDescription: String
}

type LocationType {
  latitude: Float
  longitude: Float
  spa: Int
  address: String!
  city: String!
  state: String!
  zipCode: Int
  confidential: Boolean
}

input MagicLinkInput {
  email: String!
}

type MagicLinkResponse {
  message: String!
}

type Mutation {
  logout: Boolean!
  generateMagicLink(data: MagicLinkInput!): MagicLinkResponse!
  updateNote(data: UpdateNoteInput!): NoteType! @isAuthenticated @hasRetvalPerm(permissions: [{app: "notes", permission: "change_note"}], any: true)
  deleteNote(data: DeleteDjangoObjectInput!): NoteType! @isAuthenticated @hasRetvalPerm(permissions: [{app: "notes", permission: "delete_note"}], any: true)
  createNote(data: CreateNoteInput!): NoteType! @isAuthenticated
}

type NoteType {
  id: ID!
  title: String!
  body: String!
  createdAt: DateTime!
  createdBy: UserType!
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

input PopulationFilter {
  id: ID
  title: String
  AND: PopulationFilter
  OR: PopulationFilter
  NOT: PopulationFilter
}

type Query {
  currentUser: UserType!
  note(pk: ID!): NoteType! @isAuthenticated @hasRetvalPerm(permissions: [{app: "notes", permission: "view_note"}], any: true)
  notes(pagination: OffsetPaginationInput): [NoteType!]! @isAuthenticated
  shelter(pk: ID!): ShelterType!
  shelters(filters: ShelterFilter, pagination: OffsetPaginationInput): [ShelterType!]!
}

input RequirementFilter {
  id: ID
  title: String
  AND: RequirementFilter
  OR: RequirementFilter
  NOT: RequirementFilter
}

input ServicesFilter {
  id: ID
  title: String
  AND: ServicesFilter
  OR: ServicesFilter
  NOT: ServicesFilter
}

input ShelterFilter {
  id: Int
  title: String
  services: ServicesFilter
  population: PopulationFilter
  shelterType: ShelterTypeFilter
  requirementsFilter: RequirementFilter
  AND: ShelterFilter
  OR: ShelterFilter
  NOT: ShelterFilter
}

type ShelterType {
  id: ID!
  title: String!
  imageUrl: String
  howToEnter: String!
  email: String
  phone: String!
  website: String
  services: [String!]!
  population: [String!]!
  requirements: [String!]!
  location: LocationType!
  description: DescriptionType!
  beds: BedsType!
}

input ShelterTypeFilter {
  id: ID
  title: String
  AND: ShelterTypeFilter
  OR: ShelterTypeFilter
  NOT: ShelterTypeFilter
}

input UpdateNoteInput {
  id: ID
  title: String!
  body: String!
}

type UserType {
  id: ID!
  username: String!
  email: String!
}

"""Permission definition for schema directives."""
input PermDefinition {
  """
  The app to which we are requiring permission. If this is empty that means that we are checking the permission directly.
  """
  app: String

  """
  The permission itself. If this is empty that means that we are checking for any permission for the given app.
  """
  permission: String
}
