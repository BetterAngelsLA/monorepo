# Generated by Django 5.1.7 on 2025-03-18 04:28

import clients.enums
import clients.models
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_choices_field.fields
import pgtrigger.compiler
import pgtrigger.migrations
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("clients", "0016_alter_clientprofile_california_id_regex"),
        ("pghistory", "0006_delete_aggregateevent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ClientContactEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region="US"),
                ),
                ("mailing_address", models.TextField(blank=True, null=True)),
                (
                    "relationship_to_client",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("current_case_manager", "Current Case Manager"),
                            ("past_case_manager", "Past Case Manager"),
                            ("organization", "Organization"),
                            ("aunt", "Aunt"),
                            ("child", "Child"),
                            ("cousin", "Cousin"),
                            ("father", "Father"),
                            ("friend", "Friend"),
                            ("grandparent", "Grandparent"),
                            ("mother", "Mother"),
                            ("pet", "Pet"),
                            ("sibling", "Sibling"),
                            ("uncle", "Uncle"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.RelationshipTypeEnum,
                        max_length=20,
                        null=True,
                    ),
                ),
                ("relationship_to_client_other", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ClientHouseholdMemberEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("trans_male", "Transgender Male"),
                            ("trans_female", "Transgender Female"),
                            ("non_binary", "Non-binary"),
                            ("other", "Other"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        choices_enum=clients.enums.GenderEnum,
                        max_length=17,
                        null=True,
                    ),
                ),
                ("gender_other", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "relationship_to_client",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("current_case_manager", "Current Case Manager"),
                            ("past_case_manager", "Past Case Manager"),
                            ("organization", "Organization"),
                            ("aunt", "Aunt"),
                            ("child", "Child"),
                            ("cousin", "Cousin"),
                            ("father", "Father"),
                            ("friend", "Friend"),
                            ("grandparent", "Grandparent"),
                            ("mother", "Mother"),
                            ("pet", "Pet"),
                            ("sibling", "Sibling"),
                            ("uncle", "Uncle"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.RelationshipTypeEnum,
                        max_length=20,
                        null=True,
                    ),
                ),
                ("relationship_to_client_other", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ClientProfileEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ada_accommodation",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django_choices_field.fields.TextChoicesField(
                            choices=[
                                ("hearing", "Hearing"),
                                ("mobility", "Mobility"),
                                ("visual", "Visual"),
                                ("other", "Other"),
                            ],
                            choices_enum=clients.enums.AdaAccommodationEnum,
                            max_length=8,
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("address", models.TextField(blank=True, null=True)),
                (
                    "california_id",
                    models.CharField(
                        blank=True,
                        max_length=8,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="California ID must be 1 letter followed by 7 numbers", regex="^[a-zA-Z]\\d{7}$"
                            )
                        ],
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "eye_color",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("blue", "Blue"),
                            ("brown", "Brown"),
                            ("green", "Green"),
                            ("gray", "Gray"),
                            ("hazel", "Hazel"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.EyeColorEnum,
                        max_length=5,
                        null=True,
                    ),
                ),
                (
                    "gender",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("trans_male", "Transgender Male"),
                            ("trans_female", "Transgender Female"),
                            ("non_binary", "Non-binary"),
                            ("other", "Other"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        choices_enum=clients.enums.GenderEnum,
                        max_length=17,
                        null=True,
                    ),
                ),
                ("gender_other", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "hair_color",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("black", "Black"),
                            ("blonde", "Blonde"),
                            ("brown", "Brown"),
                            ("gray", "Gray"),
                            ("red", "Red"),
                            ("white", "White"),
                            ("bald", "Bald"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.HairColorEnum,
                        max_length=6,
                        null=True,
                    ),
                ),
                ("height_in_inches", models.FloatField(blank=True, null=True)),
                ("important_notes", models.TextField(blank=True, null=True)),
                (
                    "living_situation",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("housing", "Housing"),
                            ("open_air", "Open Air"),
                            ("shelter", "Shelter"),
                            ("tent", "Tent"),
                            ("vehicle", "Vehicle"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.LivingSituationEnum,
                        max_length=8,
                        null=True,
                    ),
                ),
                ("mailing_address", models.TextField(blank=True, null=True)),
                (
                    "marital_status",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("divorced", "Divorced"),
                            ("married", "Married"),
                            ("separated", "Separated"),
                            ("single", "Single"),
                            ("widowed", "Widowed"),
                        ],
                        choices_enum=clients.enums.MaritalStatusEnum,
                        max_length=9,
                        null=True,
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region="US"),
                ),
                ("physical_description", models.TextField(blank=True, null=True)),
                ("place_of_birth", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "preferred_communication",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django_choices_field.fields.TextChoicesField(
                            choices=[
                                ("call", "Call"),
                                ("email", "Email"),
                                ("facebook", "Facebook"),
                                ("instagram", "Instagram"),
                                ("linkedin", "LinkedIn"),
                                ("text", "Text"),
                                ("whatsapp", "WhatsApp"),
                            ],
                            choices_enum=clients.enums.PreferredCommunicationEnum,
                            max_length=9,
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "preferred_language",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("asl", "American Sign Language"),
                            ("arabic", "Arabic"),
                            ("armenian", "Armenian"),
                            ("english", "English"),
                            ("farsi", "Farsi"),
                            ("french", "French"),
                            ("indonesian", "Indonesian"),
                            ("japanese", "Japanese"),
                            ("khmer", "Khmer"),
                            ("korean", "Korean"),
                            ("russian", "Russian"),
                            ("simplified_chinese", "Simplified Chinese"),
                            ("spanish", "Spanish"),
                            ("tagalog", "Tagalog"),
                            ("traditional_chinese", "Traditional Chinese"),
                            ("vietnamese", "Vietnamese"),
                        ],
                        choices_enum=clients.enums.LanguageEnum,
                        max_length=19,
                        null=True,
                    ),
                ),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to=clients.models.get_client_profile_photo_file_path
                    ),
                ),
                (
                    "pronouns",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("he_him_his", "He/Him/His"),
                            ("she_her_hers", "She/Her/Hers"),
                            ("they_them_theirs", "They/Them/Theirs"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.PronounEnum,
                        max_length=16,
                        null=True,
                    ),
                ),
                ("pronouns_other", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "race",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("american_indian_alaska_native", "American Indian/Alaska Native"),
                            ("asian", "Asian"),
                            ("black_african_american", "Black/African American"),
                            ("hispanic_latino", "Hispanic/Latino"),
                            ("native_hawaiian_pacific_islander", "Native Hawaiian/Pacific Islander"),
                            ("white_caucasian", "White/Caucasian"),
                            ("other", "Other"),
                        ],
                        choices_enum=clients.enums.RaceEnum,
                        max_length=32,
                        null=True,
                    ),
                ),
                ("residence_address", models.TextField(blank=True, null=True)),
                (
                    "spoken_languages",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django_choices_field.fields.TextChoicesField(
                            choices=[
                                ("asl", "American Sign Language"),
                                ("arabic", "Arabic"),
                                ("armenian", "Armenian"),
                                ("english", "English"),
                                ("farsi", "Farsi"),
                                ("french", "French"),
                                ("indonesian", "Indonesian"),
                                ("japanese", "Japanese"),
                                ("khmer", "Khmer"),
                                ("korean", "Korean"),
                                ("russian", "Russian"),
                                ("simplified_chinese", "Simplified Chinese"),
                                ("spanish", "Spanish"),
                                ("tagalog", "Tagalog"),
                                ("traditional_chinese", "Traditional Chinese"),
                                ("vietnamese", "Vietnamese"),
                            ],
                            choices_enum=clients.enums.LanguageEnum,
                            max_length=19,
                        ),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "veteran_status",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("yes", "Yes"),
                            ("no", "No"),
                            ("prefer_not_to_say", "Prefer not to say"),
                            ("other_than_honorable", "Other than Honorable Discharge"),
                        ],
                        choices_enum=clients.enums.VeteranStatusEnum,
                        max_length=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HmisProfileEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("hmis_id", models.CharField(max_length=50)),
                (
                    "agency",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("lahsa", "LAHSA"),
                            ("long_beach", "Long Beach"),
                            ("pasadena", "Pasadena"),
                            ("champ", "CHAMP"),
                            ("vash", "VASH"),
                        ],
                        choices_enum=clients.enums.HmisAgencyEnum,
                        max_length=10,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SocialMediaProfileEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "platform",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("facebook", "Facebook"),
                            ("instagram", "Instagram"),
                            ("linkedin", "LinkedIn"),
                            ("snapchat", "Snapchat"),
                            ("tiktok", "TikTok"),
                            ("twitter", "Twitter"),
                            ("whatsapp", "WhatsApp"),
                        ],
                        choices_enum=clients.enums.SocialMediaEnum,
                        max_length=9,
                    ),
                ),
                ("platform_user_id", models.CharField(max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="clienthouseholdmember",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="clienthouseholdmember",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="clientprofile",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="clientprofile",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="hmisprofile",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="hmisprofile",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="socialmediaprofile",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="socialmediaprofile",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientcontact",
            trigger=pgtrigger.compiler.Trigger(
                name="client_contact_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clientcontactevent" ("client_profile_id", "created_at", "email", "id", "mailing_address", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."email", NEW."id", NEW."mailing_address", NEW."name", _pgh_attach_context(), NOW(), \'client_contact.add\', NEW."id", NEW."phone_number", NEW."relationship_to_client", NEW."relationship_to_client_other", NEW."updated_at"); RETURN NULL;',
                    hash="4c1bc3509a601b67bdf1e7ebc66654df29715d88",
                    operation="INSERT",
                    pgid="pgtrigger_client_contact_add_insert_1ed2a",
                    table="clients_clientcontact",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientcontact",
            trigger=pgtrigger.compiler.Trigger(
                name="client_contact_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "clients_clientcontactevent" ("client_profile_id", "created_at", "email", "id", "mailing_address", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."email", NEW."id", NEW."mailing_address", NEW."name", _pgh_attach_context(), NOW(), \'client_contact.update\', NEW."id", NEW."phone_number", NEW."relationship_to_client", NEW."relationship_to_client_other", NEW."updated_at"); RETURN NULL;',
                    hash="0213c302391e6f8aa8ad36d2f2c703e098f581e9",
                    operation="UPDATE",
                    pgid="pgtrigger_client_contact_update_update_466d4",
                    table="clients_clientcontact",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientcontact",
            trigger=pgtrigger.compiler.Trigger(
                name="client_contact_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clientcontactevent" ("client_profile_id", "created_at", "email", "id", "mailing_address", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."email", OLD."id", OLD."mailing_address", OLD."name", _pgh_attach_context(), NOW(), \'client_contact.remove\', OLD."id", OLD."phone_number", OLD."relationship_to_client", OLD."relationship_to_client_other", OLD."updated_at"); RETURN NULL;',
                    hash="6b46378ffda90c7e06120ecb7e7005678309c286",
                    operation="DELETE",
                    pgid="pgtrigger_client_contact_remove_delete_74c1b",
                    table="clients_clientcontact",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clienthouseholdmember",
            trigger=pgtrigger.compiler.Trigger(
                name="client_household_member_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clienthouseholdmemberevent" ("client_profile_id", "created_at", "date_of_birth", "gender", "gender_other", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."date_of_birth", NEW."gender", NEW."gender_other", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'client_household_member.add\', NEW."id", NEW."relationship_to_client", NEW."relationship_to_client_other", NEW."updated_at"); RETURN NULL;',
                    hash="b2a018e4bf94c468ff54df9b474fe735510f62ac",
                    operation="INSERT",
                    pgid="pgtrigger_client_household_member_add_insert_13024",
                    table="clients_clienthouseholdmember",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clienthouseholdmember",
            trigger=pgtrigger.compiler.Trigger(
                name="client_household_member_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "clients_clienthouseholdmemberevent" ("client_profile_id", "created_at", "date_of_birth", "gender", "gender_other", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."date_of_birth", NEW."gender", NEW."gender_other", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'client_household_member.update\', NEW."id", NEW."relationship_to_client", NEW."relationship_to_client_other", NEW."updated_at"); RETURN NULL;',
                    hash="57919a2ab6e6e2ba7010d00775a3482c9036e7d8",
                    operation="UPDATE",
                    pgid="pgtrigger_client_household_member_update_update_cd31b",
                    table="clients_clienthouseholdmember",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clienthouseholdmember",
            trigger=pgtrigger.compiler.Trigger(
                name="client_household_member_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clienthouseholdmemberevent" ("client_profile_id", "created_at", "date_of_birth", "gender", "gender_other", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "relationship_to_client", "relationship_to_client_other", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."date_of_birth", OLD."gender", OLD."gender_other", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'client_household_member.remove\', OLD."id", OLD."relationship_to_client", OLD."relationship_to_client_other", OLD."updated_at"); RETURN NULL;',
                    hash="ad8e87ae3b98c490bc47134f4dab7c175cc63c25",
                    operation="DELETE",
                    pgid="pgtrigger_client_household_member_remove_delete_b6be6",
                    table="clients_clienthouseholdmember",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="client_profile_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clientprofileevent" ("ada_accommodation", "address", "california_id", "created_at", "date_of_birth", "eye_color", "gender", "gender_other", "hair_color", "height_in_inches", "id", "important_notes", "living_situation", "mailing_address", "marital_status", "nickname", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "physical_description", "place_of_birth", "preferred_communication", "preferred_language", "profile_photo", "pronouns", "pronouns_other", "race", "residence_address", "spoken_languages", "updated_at", "user_id", "veteran_status") VALUES (NEW."ada_accommodation", NEW."address", NEW."california_id", NEW."created_at", NEW."date_of_birth", NEW."eye_color", NEW."gender", NEW."gender_other", NEW."hair_color", NEW."height_in_inches", NEW."id", NEW."important_notes", NEW."living_situation", NEW."mailing_address", NEW."marital_status", NEW."nickname", _pgh_attach_context(), NOW(), \'client_profile.add\', NEW."id", NEW."phone_number", NEW."physical_description", NEW."place_of_birth", NEW."preferred_communication", NEW."preferred_language", NEW."profile_photo", NEW."pronouns", NEW."pronouns_other", NEW."race", NEW."residence_address", NEW."spoken_languages", NEW."updated_at", NEW."user_id", NEW."veteran_status"); RETURN NULL;',
                    hash="8467c460d833a3821146a5e069080e05f29b4345",
                    operation="INSERT",
                    pgid="pgtrigger_client_profile_add_insert_4c2ed",
                    table="clients_clientprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="client_profile_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "clients_clientprofileevent" ("ada_accommodation", "address", "california_id", "created_at", "date_of_birth", "eye_color", "gender", "gender_other", "hair_color", "height_in_inches", "id", "important_notes", "living_situation", "mailing_address", "marital_status", "nickname", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "physical_description", "place_of_birth", "preferred_communication", "preferred_language", "profile_photo", "pronouns", "pronouns_other", "race", "residence_address", "spoken_languages", "updated_at", "user_id", "veteran_status") VALUES (NEW."ada_accommodation", NEW."address", NEW."california_id", NEW."created_at", NEW."date_of_birth", NEW."eye_color", NEW."gender", NEW."gender_other", NEW."hair_color", NEW."height_in_inches", NEW."id", NEW."important_notes", NEW."living_situation", NEW."mailing_address", NEW."marital_status", NEW."nickname", _pgh_attach_context(), NOW(), \'client_profile.update\', NEW."id", NEW."phone_number", NEW."physical_description", NEW."place_of_birth", NEW."preferred_communication", NEW."preferred_language", NEW."profile_photo", NEW."pronouns", NEW."pronouns_other", NEW."race", NEW."residence_address", NEW."spoken_languages", NEW."updated_at", NEW."user_id", NEW."veteran_status"); RETURN NULL;',
                    hash="e17437a1ef2d2f2843f88ca52003167000b84e0e",
                    operation="UPDATE",
                    pgid="pgtrigger_client_profile_update_update_858fb",
                    table="clients_clientprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="clientprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="client_profile_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_clientprofileevent" ("ada_accommodation", "address", "california_id", "created_at", "date_of_birth", "eye_color", "gender", "gender_other", "hair_color", "height_in_inches", "id", "important_notes", "living_situation", "mailing_address", "marital_status", "nickname", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phone_number", "physical_description", "place_of_birth", "preferred_communication", "preferred_language", "profile_photo", "pronouns", "pronouns_other", "race", "residence_address", "spoken_languages", "updated_at", "user_id", "veteran_status") VALUES (OLD."ada_accommodation", OLD."address", OLD."california_id", OLD."created_at", OLD."date_of_birth", OLD."eye_color", OLD."gender", OLD."gender_other", OLD."hair_color", OLD."height_in_inches", OLD."id", OLD."important_notes", OLD."living_situation", OLD."mailing_address", OLD."marital_status", OLD."nickname", _pgh_attach_context(), NOW(), \'client_profile.remove\', OLD."id", OLD."phone_number", OLD."physical_description", OLD."place_of_birth", OLD."preferred_communication", OLD."preferred_language", OLD."profile_photo", OLD."pronouns", OLD."pronouns_other", OLD."race", OLD."residence_address", OLD."spoken_languages", OLD."updated_at", OLD."user_id", OLD."veteran_status"); RETURN NULL;',
                    hash="484cd9f6754a023194b7396507d6df4dd32d436e",
                    operation="DELETE",
                    pgid="pgtrigger_client_profile_remove_delete_ade5a",
                    table="clients_clientprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="hmisprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="hmis_profile_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_hmisprofileevent" ("agency", "client_profile_id", "created_at", "hmis_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (NEW."agency", NEW."client_profile_id", NEW."created_at", NEW."hmis_id", NEW."id", _pgh_attach_context(), NOW(), \'hmis_profile.add\', NEW."id", NEW."updated_at"); RETURN NULL;',
                    hash="1b69ab5be08cbb60aa8ee2bfe5d2a9eececcf028",
                    operation="INSERT",
                    pgid="pgtrigger_hmis_profile_add_insert_cf767",
                    table="clients_hmisprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="hmisprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="hmis_profile_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "clients_hmisprofileevent" ("agency", "client_profile_id", "created_at", "hmis_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (NEW."agency", NEW."client_profile_id", NEW."created_at", NEW."hmis_id", NEW."id", _pgh_attach_context(), NOW(), \'hmis_profile.update\', NEW."id", NEW."updated_at"); RETURN NULL;',
                    hash="0737cbe4cb6ee205f19f5ff61b3af0e99c63f9a2",
                    operation="UPDATE",
                    pgid="pgtrigger_hmis_profile_update_update_994eb",
                    table="clients_hmisprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="hmisprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="hmis_profile_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_hmisprofileevent" ("agency", "client_profile_id", "created_at", "hmis_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (OLD."agency", OLD."client_profile_id", OLD."created_at", OLD."hmis_id", OLD."id", _pgh_attach_context(), NOW(), \'hmis_profile.remove\', OLD."id", OLD."updated_at"); RETURN NULL;',
                    hash="1e859a27534120b81a34c4ab2458b3900182649a",
                    operation="DELETE",
                    pgid="pgtrigger_hmis_profile_remove_delete_d3bb1",
                    table="clients_hmisprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="socialmediaprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="social_media_profile_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_socialmediaprofileevent" ("client_profile_id", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "platform", "platform_user_id", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'social_media_profile.add\', NEW."id", NEW."platform", NEW."platform_user_id", NEW."updated_at"); RETURN NULL;',
                    hash="fc7294eacbd873d10ea26592aa8570e92663190e",
                    operation="INSERT",
                    pgid="pgtrigger_social_media_profile_add_insert_e7fca",
                    table="clients_socialmediaprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="socialmediaprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="social_media_profile_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "clients_socialmediaprofileevent" ("client_profile_id", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "platform", "platform_user_id", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'social_media_profile.update\', NEW."id", NEW."platform", NEW."platform_user_id", NEW."updated_at"); RETURN NULL;',
                    hash="40af4970d03c5d3ad710f45815da164e1eb53f28",
                    operation="UPDATE",
                    pgid="pgtrigger_social_media_profile_update_update_1c76a",
                    table="clients_socialmediaprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="socialmediaprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="social_media_profile_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "clients_socialmediaprofileevent" ("client_profile_id", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "platform", "platform_user_id", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'social_media_profile.remove\', OLD."id", OLD."platform", OLD."platform_user_id", OLD."updated_at"); RETURN NULL;',
                    hash="d95593f74d584c2552a845613d737e059100895b",
                    operation="DELETE",
                    pgid="pgtrigger_social_media_profile_remove_delete_4c47e",
                    table="clients_socialmediaprofile",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="clientcontactevent",
            name="client_profile",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="clients.clientprofile",
            ),
        ),
        migrations.AddField(
            model_name="clientcontactevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="clientcontactevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="clients.clientcontact",
            ),
        ),
        migrations.AddField(
            model_name="clienthouseholdmemberevent",
            name="client_profile",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="clients.clientprofile",
            ),
        ),
        migrations.AddField(
            model_name="clienthouseholdmemberevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="clienthouseholdmemberevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="clients.clienthouseholdmember",
            ),
        ),
        migrations.AddField(
            model_name="clientprofileevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="clientprofileevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="clients.clientprofile",
            ),
        ),
        migrations.AddField(
            model_name="clientprofileevent",
            name="user",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="hmisprofileevent",
            name="client_profile",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="clients.clientprofile",
            ),
        ),
        migrations.AddField(
            model_name="hmisprofileevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="hmisprofileevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="clients.hmisprofile",
            ),
        ),
        migrations.AddField(
            model_name="socialmediaprofileevent",
            name="client_profile",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="clients.clientprofile",
            ),
        ),
        migrations.AddField(
            model_name="socialmediaprofileevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="socialmediaprofileevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="clients.socialmediaprofile",
            ),
        ),
    ]
