# Assuming Django version and date for the unified migration
# Generated by Django 4.2.9 on 2024-02-06 21:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def create_permissions_if_not_exist(apps, schema_editor):
    Note = apps.get_model("notes", "Note")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")

    NoteContentType = ContentType.objects.get_for_model(Note)

    permissions_to_add = [
        ("notes.view_private_note", "Can add private note"),
        ("notes.change_private_note", "Can change private note"),
        ("notes.delete_private_note", "Can delete private note"),
        ("notes.add_private_note", "Can view private note"),
    ]

    for perm, description in permissions_to_add:
        # Split the enum value to get the codename without the app label
        codename = perm.split(".")[-1]
        Permission.objects.get_or_create(
            codename=codename,
            defaults={
                "name": description,
                "content_type": NoteContentType,
            },
        )


class Migration(migrations.Migration):
    dependencies = [
        ("notes", "0005_alter_note_options_note_organization_and_more"),
    ]

    operations = [
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.CreateModel(
            name="PrivateNoteDetail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name="note",
            name="private_details",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note",
                to="notes.privatenotedetail",
            ),
        ),
        migrations.CreateModel(
            name="PrivateNoteDetailUserObjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="notes.privatenotedetail",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth.permission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("user", "permission", "content_object")},
            },
        ),
        migrations.CreateModel(
            name="PrivateNoteDetailGroupObjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="notes.privatenotedetail",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="auth.group"
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("group", "permission", "content_object")},
            },
        ),
    ]
