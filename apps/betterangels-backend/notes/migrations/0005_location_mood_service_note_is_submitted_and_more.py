# Generated by Django 4.2.9 on 2024-02-02 04:28

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import notes.enums


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("notes", "0004_remove_note_created_by_note_deleted_at"),
    ]

    operations = [
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("point", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("address", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=100)),
                ("zip_code", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Mood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            (notes.enums.MoodEnum["AGITATED"], "Agitated"),
                            (notes.enums.MoodEnum["AGREEABLE"], "Agreeable"),
                            (notes.enums.MoodEnum["ANXIOUS"], "Anxious"),
                            (notes.enums.MoodEnum["DEPRESSED"], "Depressed"),
                            (notes.enums.MoodEnum["DETACHED"], "Detached"),
                            (
                                notes.enums.MoodEnum["DISORGANIZED_THOUGHT"],
                                "Disorganized Thought",
                            ),
                            (notes.enums.MoodEnum["DISORIENTED"], "Disoriented"),
                            (notes.enums.MoodEnum["ESCALATED"], "Escalated"),
                            (notes.enums.MoodEnum["EUTHYMIC"], "Euthymic"),
                            (notes.enums.MoodEnum["FLAT_BLUNTED"], "Flat/blunted"),
                            (notes.enums.MoodEnum["HAPPY"], "Happy"),
                            (notes.enums.MoodEnum["HOPELESS"], "Hopeless"),
                            (notes.enums.MoodEnum["INDIFFERENT"], "Indifferent"),
                            (notes.enums.MoodEnum["MANIC"], "Manic"),
                            (notes.enums.MoodEnum["MOTIVATED"], "Motivated"),
                            (notes.enums.MoodEnum["OPTIMISTIC"], "Optimistic"),
                            (notes.enums.MoodEnum["PERSONABLE"], "Personable"),
                            (notes.enums.MoodEnum["PLEASANT"], "Pleasant"),
                            (notes.enums.MoodEnum["RESTLESS"], "Restless"),
                            (notes.enums.MoodEnum["SUICIDAL"], "Suicidal"),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            (notes.enums.ServiceEnum["BLANKET"], "Blanket"),
                            (notes.enums.ServiceEnum["BOOK"], "Book"),
                            (notes.enums.ServiceEnum["CLOTHES"], "Clothes"),
                            (notes.enums.ServiceEnum["DENTAL"], "Dental"),
                            (notes.enums.ServiceEnum["FOOD"], "Food"),
                            (
                                notes.enums.ServiceEnum["HARM_REDUCTION"],
                                "Harm Reduction",
                            ),
                            (notes.enums.ServiceEnum["HYGIENE_KIT"], "Hygiene Kit"),
                            (notes.enums.ServiceEnum["MEDICAL"], "Medical"),
                            (notes.enums.ServiceEnum["PET_CARE"], "Pet Care"),
                            (notes.enums.ServiceEnum["PET_FOOD"], "Pet Food"),
                            (notes.enums.ServiceEnum["SHELTER"], "Shelter"),
                            (notes.enums.ServiceEnum["SHOES"], "Shoes"),
                            (notes.enums.ServiceEnum["SHOWER"], "Shower"),
                            (notes.enums.ServiceEnum["STABILIZE"], "Stabilize"),
                            (notes.enums.ServiceEnum["STORAGE"], "Storage"),
                            (notes.enums.ServiceEnum["TRANSPORT"], "Transport"),
                            (notes.enums.ServiceEnum["WATER"], "Water"),
                            (notes.enums.ServiceEnum["OTHER"], "Other"),
                        ],
                    ),
                ),
                ("custom_title", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="note",
            name="is_submitted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="note",
            name="private_details",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="note",
            name="timestamp",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("title", models.CharField(max_length=100)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "child_tasks",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="parents",
                        to="notes.task",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="notes.location",
                    ),
                ),
                (
                    "parent_tasks",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="notes.task",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="note",
            name="location",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to="notes.location",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="moods",
            field=models.ManyToManyField(to="notes.mood"),
        ),
        migrations.AddField(
            model_name="note",
            name="provided_services",
            field=models.ManyToManyField(
                related_name="notes_with_requested", to="notes.service"
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="requested_services",
            field=models.ManyToManyField(
                related_name="notes_with_provided", to="notes.service"
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="tasks",
            field=models.ManyToManyField(to="notes.task"),
        ),
    ]
