# Generated by Django 4.2.11 on 2024-04-01 22:06

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("common", "0006_address_and_address_permissions"),
        ("notes", "0017_remove_note_insert_insert_remove_note_update_update_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_remove_delete",
        ),
        migrations.RemoveField(
            model_name="note",
            name="location",
        ),
        migrations.RemoveField(
            model_name="noteevent",
            name="location",
        ),
        migrations.RemoveField(
            model_name="task",
            name="location",
        ),
        migrations.RemoveField(
            model_name="taskevent",
            name="location",
        ),
        migrations.AddField(
            model_name="note",
            name="address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="address",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="address",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.add\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="c2203486cec6595e7984ed60eb0c29a3c5b42806",
                    operation="INSERT",
                    pgid="pgtrigger_note_add_insert_e05e6",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.update\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="1cf563b63928fcb6bd83a652221aaac5c1a29229",
                    operation="UPDATE",
                    pgid="pgtrigger_note_update_update_ac81f",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (OLD."address_id", OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."id", OLD."is_submitted", OLD."organization_id", _pgh_attach_context(), NOW(), \'note.remove\', OLD."id", OLD."point", OLD."private_details", OLD."public_details", OLD."timestamp", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="983b94db6a13c80ffaee3d64d8ecb98a4e464217",
                    operation="DELETE",
                    pgid="pgtrigger_note_remove_delete_dd722",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("address_id", "client_id", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "status", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."point", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="2d381068ce6fe4142cc150a58434ef9027c2de9f",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_19a6c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("address_id", "client_id", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "status", "title", "updated_at") VALUES (OLD."address_id", OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."point", OLD."status", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="6baffa0a34661eb6b04dcdf45dc5b37e2e1903a8",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_ced05",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
    ]
