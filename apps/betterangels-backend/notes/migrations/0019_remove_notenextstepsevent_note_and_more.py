# Generated by Django 5.2.4 on 2025-07-31 02:45

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("notes", "0018_delete_task_permissions"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="notenextstepsevent",
            name="note",
        ),
        migrations.RemoveField(
            model_name="notenextstepsevent",
            name="pgh_context",
        ),
        migrations.RemoveField(
            model_name="notenextstepsevent",
            name="task",
        ),
        migrations.RemoveField(
            model_name="notepurposesevent",
            name="note",
        ),
        migrations.RemoveField(
            model_name="notepurposesevent",
            name="pgh_context",
        ),
        migrations.RemoveField(
            model_name="notepurposesevent",
            name="task",
        ),
        migrations.AlterUniqueTogether(
            name="taskgroupobjectpermission",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="taskgroupobjectpermission",
            name="content_object",
        ),
        migrations.RemoveField(
            model_name="taskgroupobjectpermission",
            name="group",
        ),
        migrations.RemoveField(
            model_name="taskgroupobjectpermission",
            name="permission",
        ),
        migrations.AlterUniqueTogether(
            name="taskuserobjectpermission",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="taskuserobjectpermission",
            name="content_object",
        ),
        migrations.RemoveField(
            model_name="taskuserobjectpermission",
            name="permission",
        ),
        migrations.RemoveField(
            model_name="taskuserobjectpermission",
            name="user",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="notenextsteps",
            name="note_next_steps_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="notenextsteps",
            name="note_next_steps_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="notepurposes",
            name="note_purposes_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="notepurposes",
            name="note_purposes_remove_delete",
        ),
        migrations.DeleteModel(
            name="NoteNextSteps",
        ),
        migrations.DeleteModel(
            name="NotePurposes",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_remove_delete",
        ),
        migrations.RemoveField(
            model_name="task",
            name="status",
        ),
        migrations.RemoveField(
            model_name="taskevent",
            name="status",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="4acae6ade2df3d883afbd34029badcdb1f7dfc1c",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_19a6c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'task.update\', NEW."id", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="e11e3b35aef83fc0282c36af9c6dc91e6b2561c5",
                    operation="UPDATE",
                    pgid="pgtrigger_task_update_update_6df80",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", OLD."location_id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="5fc0c24a93fe10e001420ff0c6328c3df3d75c65",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_ced05",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        migrations.DeleteModel(
            name="NoteNextStepsEvent",
        ),
        migrations.DeleteModel(
            name="NotePurposesEvent",
        ),
        migrations.DeleteModel(
            name="TaskGroupObjectPermission",
        ),
        migrations.DeleteModel(
            name="TaskUserObjectPermission",
        ),
    ]
