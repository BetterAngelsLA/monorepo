# Generated by Django 5.2.5 on 2025-09-02 21:23

from django.db import migrations
from django.db import models
from django.utils.translation import gettext_lazy as _


class ServiceEnum(models.TextChoices):
    BAG = "bag", _("Bag(s)")
    BATTERIES = "batteries", _("Batteries")
    BICYCLE = "bicycle", _("Bicycle")
    BICYCLE_REPAIR = "bicycle_repair", _("Bicycle Repair")
    BIRTH_CERTIFICATE = "birth_certificate", _("Birth Certificate")
    BLANKET = "blanket", _("Blanket")
    BOOK = "book", _("Book")
    CALIFORNIA_LIFELINE_PHONE = "california_lifeline_phone", _("California Lifeline Phone")
    CLOTHES = "clothes", _("Clothes")
    CONSENT_TO_CONNECT = "consent_to_connect", _("Consent to Connect (CM or Council District)")
    CONTACT_DPSS = "contact_dpss", _("Contact DPSS")
    CONTACT_FRIEND = "contact_friend", _("Contact Friend")
    DENTAL = "dental", _("Dental")
    DISCOUNT_SCOOTER_RIDES = "discount_scooter_rides", _("Discount Scooter Rides")
    DMH_EVALUATION = "dmh_evaluation", _("DMH Evaluation")
    DMV_NO_FEE_ID_FORM = "dmv_no_fee_id_form", _("DMV No Fee ID Form")
    EBT = "ebt", _("EBT")
    FAMILY_REUNIFICATION = "family_reunification", _("Family Reunification")
    FEMININE_HYGIENE = "feminine_hygiene", _("Feminine Hygiene")
    FIRST_AID = "first_aid", _("First Aid")
    FOOD = "food", _("Food")
    HARM_REDUCTION = "harm_reduction", _("Harm Reduction")
    HMIS_CONSENT = "hmis_consent", _("HMIS Consent")
    HYGIENE_KIT = "hygiene_kit", _("Hygiene Kit")
    INTERNET_ACCESS = "internet_access", _("Internet Access")
    LAHOP = "lahop", _("LAHOP")
    LEGAL_COUNSEL = "legal_counsel", _("Legal Counsel")
    MAIL_PICK_UP = "mail_pick_up", _("Mail Pick Up")
    MEDICAL = "medical", _("Medical")
    MEDI_CAL = "medi_cal", _("Medi-Cal")
    METRO_LIFE_TAP = "metro_life_tap", _("Metro LIFE Tap")
    NOTARY = "notary", _("Notary")
    OTHER = "other", _("Other")
    PET_CARE = "pet_care", _("Pet Care")
    PET_FOOD = "pet_food", _("Pet Food")
    PUBLIC_BENEFITS_PROGRAMS = "public_benefits_programs", _("Public Benefits Programs")
    RIDE = "ride", _("Ride")
    SAFE_PARKING = "safe_parking", _("Safe Parking")
    SHELTER = "shelter", _("Shelter")
    SHOES = "shoes", _("Shoes")
    SHOWER = "shower", _("Shower")
    SLEEPING_BAG = "sleeping_bag", _("Sleeping Bag")
    SOCIAL_SECURITY_CARD_REPLACEMENT = "social_security_card_replacement", _("Social Security Card Replacement")
    SSI_SSDI = "ssi_ssdi", _("SSI/SSDI")
    STIMULUS_ASSISTANCE = "stimulus_assistance", _("Stimulus Assistance")
    STORAGE_BELONGINGS = "storage_belongings", _("Storage - Belongings")
    STORAGE_DOCUMENTS = "storage_documents", _("Storage - Documents")
    TARP = "tarp", _("Tarp")
    TENT = "tent", _("Tent")
    THERAPIST_APPOINTMENT = "therapist_appointment", _("Therapist Appointment")
    UNEMPLOYMENT_CERTIFICATION = "unemployment_certification", _("Unemployment Certification")
    VACCINE_PASSPORT = "vaccine_passport", _("Vaccine Passport")
    WATER = "water", _("Water")


def copy_service_enum_to_service(apps, schema_editor):
    ServiceRequest = apps.get_model("notes", "ServiceRequest")
    OrganizationService = apps.get_model("notes", "OrganizationService")
    db_alias = schema_editor.connection.alias

    enum_to_pk_map = {}

    for enum in [e for e in ServiceEnum if e != ServiceEnum.OTHER]:
        enum_to_pk_map[enum] = OrganizationService.objects.using(db_alias).get(label=enum.label).pk

    for enum in enum_to_pk_map:
        ServiceRequest.objects.using(db_alias).filter(service_enum=enum).update(service_id=enum_to_pk_map[enum])


def create_services_from_service_other(apps, schema_editor):
    ServiceRequest = apps.get_model("notes", "ServiceRequest")
    OrganizationService = apps.get_model("notes", "OrganizationService")
    db_alias = schema_editor.connection.alias

    other_services = ServiceRequest.objects.using(db_alias).filter(service_enum=ServiceEnum.OTHER)

    for svc_req in other_services:
        svc, _ = OrganizationService.objects.using(db_alias).get_or_create(
            category=None,
            label=svc_req.service_other,
            organization=svc_req.created_by.groups.first().permissiongroup.organization,
        )
        svc_req.service = svc
        svc_req.save()


def clear_service(apps, schema_editor):
    ServiceRequest = apps.get_model("notes", "ServiceRequest")
    db_alias = schema_editor.connection.alias

    ServiceRequest.objects.using(db_alias).all().update(service=None)


class Migration(migrations.Migration):

    dependencies = [
        ("notes", "0026_rename_service_to_label"),
    ]

    operations = [
        migrations.RunPython(copy_service_enum_to_service, clear_service),
        migrations.RunPython(create_services_from_service_other, clear_service),
    ]
