# Generated by Django 5.1.8 on 2025-04-10 14:58

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("notes", "0016_note_client_profile_data"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_remove_delete",
        ),
        migrations.RemoveField(
            model_name="note",
            name="client",
        ),
        migrations.RemoveField(
            model_name="noteevent",
            name="client",
        ),
        migrations.RemoveField(
            model_name="servicerequest",
            name="client",
        ),
        migrations.RemoveField(
            model_name="servicerequestevent",
            name="client",
        ),
        migrations.RemoveField(
            model_name="task",
            name="client",
        ),
        migrations.RemoveField(
            model_name="taskevent",
            name="client",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_profile_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "purpose", "team", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."interacted_at", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.add\', NEW."id", NEW."private_details", NEW."public_details", NEW."purpose", NEW."team", NEW."updated_at"); RETURN NULL;',
                    hash="a295f472c23ff50ec1317d4361f2aa86dc6f51b0",
                    operation="INSERT",
                    pgid="pgtrigger_note_add_insert_e05e6",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("client_profile_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "purpose", "team", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."interacted_at", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.update\', NEW."id", NEW."private_details", NEW."public_details", NEW."purpose", NEW."team", NEW."updated_at"); RETURN NULL;',
                    hash="5d98024b85ee50d15f171885de8238a6ece55202",
                    operation="UPDATE",
                    pgid="pgtrigger_note_update_update_ac81f",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_profile_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "purpose", "team", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."created_by_id", OLD."id", OLD."interacted_at", OLD."is_submitted", OLD."location_id", OLD."organization_id", _pgh_attach_context(), NOW(), \'note.remove\', OLD."id", OLD."private_details", OLD."public_details", OLD."purpose", OLD."team", OLD."updated_at"); RETURN NULL;',
                    hash="a6913ee5846e2da6e3fbf956f4394c757307431b",
                    operation="DELETE",
                    pgid="pgtrigger_note_remove_delete_dd722",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_profile_id", "completed_on", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (NEW."client_profile_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'service_request.add\', NEW."id", NEW."service", NEW."service_other", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="23a3589cebaafbbc7dae91bebfd61f6058d370df",
                    operation="INSERT",
                    pgid="pgtrigger_service_request_add_insert_f5d42",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_servicerequestevent" ("client_profile_id", "completed_on", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (NEW."client_profile_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'service_request.update\', NEW."id", NEW."service", NEW."service_other", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="47c302146a6056a670733a0620193cfe1a562af3",
                    operation="UPDATE",
                    pgid="pgtrigger_service_request_update_update_261d7",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_profile_id", "completed_on", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (OLD."client_profile_id", OLD."completed_on", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", _pgh_attach_context(), NOW(), \'service_request.remove\', OLD."id", OLD."service", OLD."service_other", OLD."status", OLD."updated_at"); RETURN NULL;',
                    hash="05dbb9b8f0a45380c8586a2012e9bfcc6197e622",
                    operation="DELETE",
                    pgid="pgtrigger_service_request_remove_delete_53389",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="473f87246f99517e2d708e1ba36de8696702c95a",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_19a6c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'task.update\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="92f316e2ee2ee5a8f417a5822f57222f06d69949",
                    operation="UPDATE",
                    pgid="pgtrigger_task_update_update_6df80",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_profile_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", OLD."location_id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."status", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="25ecd237404beb95789b336c99d0dacce6eef286",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_ced05",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
    ]
