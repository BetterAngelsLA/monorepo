# Generated by Django 5.1.1 on 2024-10-04 19:51

import django_choices_field.fields
import notes.enums
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


def copy_custom_service_to_service_other(apps, schema_editor) -> None:
    ServiceRequest = apps.get_model("notes", "ServiceRequest")

    service_requests = ServiceRequest.objects.all()
    for service_request in service_requests:
        if service_request.custom_service:
            service_request.service_other = service_request.custom_service
            service_request.save()


class Migration(migrations.Migration):

    dependencies = [
        ("notes", "0010_alter_note_title_alter_noteevent_title"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="service_request_update_update",
        ),
        migrations.AddField(
            model_name="servicerequest",
            name="service_other",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="service_other",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name="servicerequest",
            name="service",
            field=django_choices_field.fields.TextChoicesField(
                choices=[
                    ("bicycle", "Bicycle"),
                    ("birth_certificate", "Birth Certificate"),
                    ("blanket", "Blanket"),
                    ("book", "Book"),
                    ("california_lifeline_phone", "California Lifeline Phone"),
                    ("clothes", "Clothes"),
                    ("contact_dpss", "Contact DPSS"),
                    ("contact_friend", "Contact Friend"),
                    ("dmh_evaluation", "DMH Evaluation"),
                    ("dmv_no_fee_id_form", "DMV No Fee ID Form"),
                    ("dental", "Dental"),
                    ("discount_scooter_rides", "Discount Scooter Rides"),
                    ("family_reunification", "Family Reunification"),
                    ("food", "Food"),
                    ("harm_reduction", "Harm Reduction"),
                    ("hygiene_kit", "Hygiene Kit"),
                    ("internet_access", "Internet Access"),
                    ("legal_counsel", "Legal Counsel"),
                    ("mail_pick_up", "Mail Pick Up"),
                    ("medical", "Medical"),
                    ("metro_life_tap", "Metro LIFE Tap"),
                    ("pet_care", "Pet Care"),
                    ("pet_food", "Pet Food"),
                    ("public_benefits_programs", "Public Benefits Programs"),
                    ("ride", "Ride"),
                    ("safe_parking", "Safe Parking"),
                    ("shelter", "Shelter"),
                    ("shoes", "Shoes"),
                    ("shower", "Shower"),
                    ("social_security_card_replacement", "Social Security Card Replacement"),
                    ("stabilize", "Stabilize"),
                    ("stimulus_assistance", "Stimulus Assistance"),
                    ("storage", "Storage"),
                    ("storage_belongings", "Storage - Belongings"),
                    ("storage_documents", "Storage - Documents"),
                    ("tent", "Tent"),
                    ("therapist_appointment", "Therapist Appointment"),
                    ("transport", "Transport"),
                    ("unemployment_certification", "Unemployment Certification"),
                    ("vaccine_passport", "Vaccine Passport"),
                    ("water", "Water"),
                    ("other", "Other"),
                ],
                choices_enum=notes.enums.ServiceEnum,
                max_length=32,
            ),
        ),
        migrations.AlterField(
            model_name="servicerequestevent",
            name="service",
            field=django_choices_field.fields.TextChoicesField(
                choices=[
                    ("bicycle", "Bicycle"),
                    ("birth_certificate", "Birth Certificate"),
                    ("blanket", "Blanket"),
                    ("book", "Book"),
                    ("california_lifeline_phone", "California Lifeline Phone"),
                    ("clothes", "Clothes"),
                    ("contact_dpss", "Contact DPSS"),
                    ("contact_friend", "Contact Friend"),
                    ("dmh_evaluation", "DMH Evaluation"),
                    ("dmv_no_fee_id_form", "DMV No Fee ID Form"),
                    ("dental", "Dental"),
                    ("discount_scooter_rides", "Discount Scooter Rides"),
                    ("family_reunification", "Family Reunification"),
                    ("food", "Food"),
                    ("harm_reduction", "Harm Reduction"),
                    ("hygiene_kit", "Hygiene Kit"),
                    ("internet_access", "Internet Access"),
                    ("legal_counsel", "Legal Counsel"),
                    ("mail_pick_up", "Mail Pick Up"),
                    ("medical", "Medical"),
                    ("metro_life_tap", "Metro LIFE Tap"),
                    ("pet_care", "Pet Care"),
                    ("pet_food", "Pet Food"),
                    ("public_benefits_programs", "Public Benefits Programs"),
                    ("ride", "Ride"),
                    ("safe_parking", "Safe Parking"),
                    ("shelter", "Shelter"),
                    ("shoes", "Shoes"),
                    ("shower", "Shower"),
                    ("social_security_card_replacement", "Social Security Card Replacement"),
                    ("stabilize", "Stabilize"),
                    ("stimulus_assistance", "Stimulus Assistance"),
                    ("storage", "Storage"),
                    ("storage_belongings", "Storage - Belongings"),
                    ("storage_documents", "Storage - Documents"),
                    ("tent", "Tent"),
                    ("therapist_appointment", "Therapist Appointment"),
                    ("transport", "Transport"),
                    ("unemployment_certification", "Unemployment Certification"),
                    ("vaccine_passport", "Vaccine Passport"),
                    ("water", "Water"),
                    ("other", "Other"),
                ],
                choices_enum=notes.enums.ServiceEnum,
                max_length=32,
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'service_request.add\', NEW."id", NEW."service", NEW."service_other", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="610e466248097529b6c072ae9b97f440516b8c6c",
                    operation="INSERT",
                    pgid="pgtrigger_service_request_add_insert_f5d42",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'service_request.update\', NEW."id", NEW."service", NEW."service_other", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="27b92ec22f0f992f3d7e65789bd8cb1bebbff50b",
                    operation="UPDATE",
                    pgid="pgtrigger_service_request_update_update_261d7",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "service_other", "status", "updated_at") VALUES (OLD."client_id", OLD."completed_on", OLD."created_at", OLD."created_by_id", OLD."custom_service", OLD."due_by", OLD."id", _pgh_attach_context(), NOW(), \'service_request.remove\', OLD."id", OLD."service", OLD."service_other", OLD."status", OLD."updated_at"); RETURN NULL;',
                    hash="974e68f39d89f7d9d4678edd15afd78624eb422e",
                    operation="DELETE",
                    pgid="pgtrigger_service_request_remove_delete_53389",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        migrations.RunPython(copy_custom_service_to_service_other),
    ]
