# Assuming Django version and date for the unified migration
# Generated by Django 4.2.9 on 2024-02-06 21:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def create_permissions_if_not_exist(apps, schema_editor):
    Note = apps.get_model("notes", "Note")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")

    NoteContentType = ContentType.objects.get_for_model(Note)

    permissions_to_add = [
        ("notes.view_note_private_details", "Can view note private details"),
    ]

    for perm, description in permissions_to_add:
        # Split the enum value to get the codename without the app label
        codename = perm.split(".")[-1]
        Permission.objects.get_or_create(
            codename=codename,
            defaults={
                "name": description,
                "content_type": NoteContentType,
            },
        )


def remove_change_and_delete_from_caseworker_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    PermissionGroupTemplate.objects.get(name="Caseworker").permissions.filter(
        codename__in=["change_note", "delete_note"]
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("notes", "0006_add_note_component_fields"),
    ]

    operations = [
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.RunPython(remove_change_and_delete_from_caseworker_permission_template),
        migrations.AlterField(
            model_name="historicalnote",
            name="public_details",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="note",
            name="public_details",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="note",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to="notes.location",
            ),
        ),
        migrations.AlterModelOptions(
            name="note",
            options={"permissions": (("view_note_private_details", "Can view note private details"),)},
        ),
    ]
