# Generated by Django 5.0.5 on 2024-05-07 19:43

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import django_choices_field.fields
import notes.enums
from notes.permissions import NotePermissions, TaskPermissions, ServiceRequestPermissions, PrivateDetailsPermissions
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


def create_permissions_if_not_exist(apps, schema_editor):
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    db_alias = schema_editor.connection.alias

    # Create Note permissions and add to Caseworker group template
    Note = apps.get_model("notes", "Note")
    NoteContentType = ContentType.objects.get_for_model(Note)
    NOTE_PERM_MAP = {perm.split(".")[1]: perm.label for perm in NotePermissions}
    PRIVATE_NOTE_PERM_MAP = {perm.split(".")[1]: perm.label for perm in PrivateDetailsPermissions}

    for codename, name in NOTE_PERM_MAP.items():
        cur_perm = Permission.objects.using(db_alias).create(
            codename=codename,
            content_type=NoteContentType,
        )
        cur_perm.name = name
        cur_perm.save()

    for codename, name in PRIVATE_NOTE_PERM_MAP.items():
        cur_perm = Permission.objects.using(db_alias).create(
            codename=codename,
            content_type=NoteContentType,
        )
        cur_perm.name = name
        cur_perm.save()

    # Create ServiceRequest permissions and add to Caseworker group template
    ServiceRequest = apps.get_model("notes", "ServiceRequest")
    ServiceRequestContentType = ContentType.objects.get_for_model(ServiceRequest)
    SERVICE_REQUEST_PERM_MAP = {perm.split(".")[1]: perm.label for perm in ServiceRequestPermissions}

    for codename, name in SERVICE_REQUEST_PERM_MAP.items():
        cur_perm = Permission.objects.using(db_alias).create(
            codename=codename,
            content_type=ServiceRequestContentType,
        )
        cur_perm.name = name
        cur_perm.save()

    # Create Task permissions and add to Caseworker group template
    Task = apps.get_model("notes", "Task")
    TaskContentType = ContentType.objects.get_for_model(Task)
    TASK_PERM_MAP = {perm.split(".")[1]: perm.label for perm in TaskPermissions}

    for codename, name in TASK_PERM_MAP.items():
        cur_perm = Permission.objects.using(db_alias).create(
            codename=codename,
            content_type=TaskContentType,
        )
        cur_perm.name = name
        cur_perm.save()


def update_caseworker_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    caseworker_template = PermissionGroupTemplate.objects.get(name="Caseworker")

    perm_map = [
        perm.split(".")[1]
        for perm in [
            "notes.add_note",
            "notes.view_note",
            "notes.add_servicerequest",
            "notes.add_task",
        ]
    ]

    permissions = Permission.objects.filter(codename__in=perm_map)
    caseworker_template.permissions.add(*permissions)


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0005_extendedorganizationinvitation_squashed_0018"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("common", "0001_squashed_0010_location_and_location_permissions"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("organizations", "0006_alter_organization_slug"),
        ("pghistory", "0006_delete_aggregateevent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Note",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=100)),
                ("body", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="notes", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NoteUserObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_object_permissions",
                        to="notes.note",
                    ),
                ),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
                "unique_together": {("user", "permission", "content_object")},
            },
        ),
        migrations.CreateModel(
            name="NoteGroupObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_object_permissions",
                        to="notes.note",
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.group")),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
            ],
            options={
                "abstract": False,
                "unique_together": {("group", "permission", "content_object")},
            },
        ),
        migrations.AlterField(
            model_name="notegroupobjectpermission",
            name="content_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.note"),
        ),
        migrations.AlterField(
            model_name="noteuserobjectpermission",
            name="content_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.note"),
        ),
        migrations.AddField(
            model_name="note",
            name="organization",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="organizations.organization"),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="note",
            name="body",
        ),
        migrations.AddField(
            model_name="note",
            name="client",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="client_notes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="is_submitted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="note",
            name="private_details",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="note",
            name="public_details",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="note",
            name="timestamp",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="note",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Mood",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "descriptor",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("agitated", "Agitated"),
                            ("agreeable", "Agreeable"),
                            ("anxious", "Anxious"),
                            ("depressed", "Depressed"),
                            ("detached", "Detached"),
                            ("disorganized_thought", "Disorganized Thought"),
                            ("disoriented", "Disoriented"),
                            ("escalated", "Escalated"),
                            ("euthymic", "Euthymic"),
                            ("flat_blunted", "Flat/blunted"),
                            ("happy", "Happy"),
                            ("hopeless", "Hopeless"),
                            ("indifferent", "Indifferent"),
                            ("manic", "Manic"),
                            ("motivated", "Motivated"),
                            ("optimistic", "Optimistic"),
                            ("personable", "Personable"),
                            ("pleasant", "Pleasant"),
                            ("restless", "Restless"),
                            ("suicidal", "Suicidal"),
                        ],
                        choices_enum=notes.enums.MoodEnum,
                        max_length=20,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="moods", to="notes.note"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalNote",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("title", models.CharField(max_length=100)),
                ("timestamp", models.DateTimeField(blank=True, editable=False)),
                ("public_details", models.TextField(null=True)),
                ("private_details", models.TextField(blank=True)),
                ("is_submitted", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical note",
                "verbose_name_plural": "historical notes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
        ),
        migrations.AlterField(
            model_name="historicalnote",
            name="public_details",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="note",
            name="public_details",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name="note",
            options={"permissions": (("view_note_private_details", "Can view note private details"),)},
        ),
        migrations.AddField(
            model_name="historicalnote",
            name="history_relation",
            field=models.ForeignKey(
                db_constraint=False,
                default=0,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="history",
                to="notes.note",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="mood",
            name="note",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="moods", to="notes.note"),
        ),
        migrations.CreateModel(
            name="HistoricalMood",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "descriptor",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("agitated", "Agitated"),
                            ("agreeable", "Agreeable"),
                            ("anxious", "Anxious"),
                            ("depressed", "Depressed"),
                            ("detached", "Detached"),
                            ("disorganized_thought", "Disorganized Thought"),
                            ("disoriented", "Disoriented"),
                            ("escalated", "Escalated"),
                            ("euthymic", "Euthymic"),
                            ("flat_blunted", "Flat/blunted"),
                            ("happy", "Happy"),
                            ("hopeless", "Hopeless"),
                            ("indifferent", "Indifferent"),
                            ("manic", "Manic"),
                            ("motivated", "Motivated"),
                            ("optimistic", "Optimistic"),
                            ("personable", "Personable"),
                            ("pleasant", "Pleasant"),
                            ("restless", "Restless"),
                            ("suicidal", "Suicidal"),
                        ],
                        choices_enum=notes.enums.MoodEnum,
                        max_length=20,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="history",
                        to="notes.mood",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="notes.note",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical mood",
                "verbose_name_plural": "historical moods",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=100)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.TaskStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tasks", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskUserObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content_object", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.task")),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
                "unique_together": {("user", "permission", "content_object")},
            },
        ),
        migrations.CreateModel(
            name="TaskGroupObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content_object", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.task")),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.group")),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
            ],
            options={
                "abstract": False,
                "unique_together": {("group", "permission", "content_object")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalServiceRequest",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "service",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("blanket", "Blanket"),
                            ("book", "Book"),
                            ("clothes", "Clothes"),
                            ("dental", "Dental"),
                            ("food", "Food"),
                            ("harm_reduction", "Harm Reduction"),
                            ("hygiene_kit", "Hygiene Kit"),
                            ("medical", "Medical"),
                            ("pet_care", "Pet Care"),
                            ("pet_food", "Pet Food"),
                            ("shelter", "Shelter"),
                            ("shoes", "Shoes"),
                            ("shower", "Shower"),
                            ("stabilize", "Stabilize"),
                            ("storage", "Storage"),
                            ("transport", "Transport"),
                            ("water", "Water"),
                            ("other", "Other"),
                        ],
                        choices_enum=notes.enums.ServiceEnum,
                        max_length=14,
                    ),
                ),
                ("custom_service", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.ServiceRequestStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical service request",
                "verbose_name_plural": "historical service requests",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
        ),
        migrations.CreateModel(
            name="ServiceRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("blanket", "Blanket"),
                            ("book", "Book"),
                            ("clothes", "Clothes"),
                            ("dental", "Dental"),
                            ("food", "Food"),
                            ("harm_reduction", "Harm Reduction"),
                            ("hygiene_kit", "Hygiene Kit"),
                            ("medical", "Medical"),
                            ("pet_care", "Pet Care"),
                            ("pet_food", "Pet Food"),
                            ("shelter", "Shelter"),
                            ("shoes", "Shoes"),
                            ("shower", "Shower"),
                            ("stabilize", "Stabilize"),
                            ("storage", "Storage"),
                            ("transport", "Transport"),
                            ("water", "Water"),
                            ("other", "Other"),
                        ],
                        choices_enum=notes.enums.ServiceEnum,
                        max_length=14,
                    ),
                ),
                ("custom_service", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.ServiceRequestStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServiceRequestGroupObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "content_object",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.servicerequest"),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.group")),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
            ],
            options={
                "abstract": False,
                "unique_together": {("group", "permission", "content_object")},
            },
        ),
        migrations.CreateModel(
            name="ServiceRequestUserObjectPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "content_object",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notes.servicerequest"),
                ),
                ("permission", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="auth.permission")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
                "unique_together": {("user", "permission", "content_object")},
            },
        ),
        migrations.AddField(
            model_name="historicalservicerequest",
            name="history_relation",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="history",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="historicalservicerequest",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="next_steps",
            field=models.ManyToManyField(related_name="next_step_notes", to="notes.task"),
        ),
        migrations.AddField(
            model_name="note",
            name="provided_services",
            field=models.ManyToManyField(related_name="provided_notes", to="notes.servicerequest"),
        ),
        migrations.AddField(
            model_name="note",
            name="purposes",
            field=models.ManyToManyField(related_name="purpose_notes", to="notes.task"),
        ),
        migrations.AddField(
            model_name="note",
            name="requested_services",
            field=models.ManyToManyField(related_name="requested_notes", to="notes.servicerequest"),
        ),
        migrations.RemoveField(
            model_name="historicalnote",
            name="client",
        ),
        migrations.RemoveField(
            model_name="historicalnote",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="historicalnote",
            name="history_relation",
        ),
        migrations.RemoveField(
            model_name="historicalnote",
            name="history_user",
        ),
        migrations.RemoveField(
            model_name="historicalnote",
            name="organization",
        ),
        migrations.CreateModel(
            name="HistoricalNote_next_steps",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("m2m_history_id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "verbose_name": "HistoricalNote_next_steps",
            },
        ),
        migrations.CreateModel(
            name="HistoricalNote_purposes",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("m2m_history_id", models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                "verbose_name": "HistoricalNote_purposes",
            },
        ),
        migrations.RemoveField(
            model_name="historicalservicerequest",
            name="client",
        ),
        migrations.RemoveField(
            model_name="historicalservicerequest",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="historicalservicerequest",
            name="history_relation",
        ),
        migrations.RemoveField(
            model_name="historicalservicerequest",
            name="history_user",
        ),
        migrations.CreateModel(
            name="HistoricalTask",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("title", models.CharField(max_length=100)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.TaskStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
            ],
            options={
                "verbose_name": "historical task",
                "verbose_name_plural": "historical tasks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
        ),
        migrations.AlterField(
            model_name="mood",
            name="note",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="moods", to="notes.note"),
        ),
        migrations.DeleteModel(
            name="HistoricalMood",
        ),
        migrations.DeleteModel(
            name="HistoricalNote",
        ),
        migrations.DeleteModel(
            name="HistoricalNote_next_steps",
        ),
        migrations.DeleteModel(
            name="HistoricalNote_purposes",
        ),
        migrations.DeleteModel(
            name="HistoricalServiceRequest",
        ),
        migrations.DeleteModel(
            name="HistoricalTask",
        ),
        migrations.CreateModel(
            name="MoodEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "descriptor",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("agitated", "Agitated"),
                            ("agreeable", "Agreeable"),
                            ("anxious", "Anxious"),
                            ("depressed", "Depressed"),
                            ("detached", "Detached"),
                            ("disorganized_thought", "Disorganized Thought"),
                            ("disoriented", "Disoriented"),
                            ("escalated", "Escalated"),
                            ("euthymic", "Euthymic"),
                            ("flat_blunted", "Flat/blunted"),
                            ("happy", "Happy"),
                            ("hopeless", "Hopeless"),
                            ("indifferent", "Indifferent"),
                            ("manic", "Manic"),
                            ("motivated", "Motivated"),
                            ("optimistic", "Optimistic"),
                            ("personable", "Personable"),
                            ("pleasant", "Pleasant"),
                            ("restless", "Restless"),
                            ("suicidal", "Suicidal"),
                        ],
                        choices_enum=notes.enums.MoodEnum,
                        max_length=20,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=100)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("public_details", models.TextField(blank=True)),
                ("private_details", models.TextField(blank=True)),
                ("is_submitted", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteNextStepsEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteProvidedServicesEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NotePurposesEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteRequestedServicesEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServiceRequestEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("blanket", "Blanket"),
                            ("book", "Book"),
                            ("clothes", "Clothes"),
                            ("dental", "Dental"),
                            ("food", "Food"),
                            ("harm_reduction", "Harm Reduction"),
                            ("hygiene_kit", "Hygiene Kit"),
                            ("medical", "Medical"),
                            ("pet_care", "Pet Care"),
                            ("pet_food", "Pet Food"),
                            ("shelter", "Shelter"),
                            ("shoes", "Shoes"),
                            ("shower", "Shower"),
                            ("stabilize", "Stabilize"),
                            ("storage", "Storage"),
                            ("transport", "Transport"),
                            ("water", "Water"),
                            ("other", "Other"),
                        ],
                        choices_enum=notes.enums.ServiceEnum,
                        max_length=14,
                    ),
                ),
                ("custom_service", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.ServiceRequestStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=100)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.TaskStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteNextSteps",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("notes.note_next_steps",),
        ),
        migrations.CreateModel(
            name="NoteProvidedServices",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("notes.note_provided_services",),
        ),
        migrations.CreateModel(
            name="NotePurposes",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("notes.note_purposes",),
        ),
        migrations.CreateModel(
            name="NoteRequestedServices",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("notes.note_requested_services",),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mood",
            trigger=pgtrigger.compiler.Trigger(
                name="mood_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_moodevent" ("created_at", "descriptor", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (NEW."created_at", NEW."descriptor", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'mood.add\', NEW."id", NEW."updated_at"); RETURN NULL;',
                    hash="464d79fe7451d66cdd2edadb7129d590bd748405",
                    operation="INSERT",
                    pgid="pgtrigger_mood_add_insert_d64e0",
                    table="notes_mood",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mood",
            trigger=pgtrigger.compiler.Trigger(
                name="mood_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_moodevent" ("created_at", "descriptor", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (OLD."created_at", OLD."descriptor", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'mood.remove\', OLD."id", OLD."updated_at"); RETURN NULL;',
                    hash="444b324a517f0c7683728da7516d1dee65d13faf",
                    operation="DELETE",
                    pgid="pgtrigger_mood_remove_delete_0c941",
                    table="notes_mood",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="b6834ce3c49a5384b7512cca9bb0ee8e01324000",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7ed5b",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="b5122522cee54db6bbbf17531fda6675ccd39bc9",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_38f06",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."service", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="3808bcb7f1b9e4a0e1dbbf73d9e38310789c6c45",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_cd1b7",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."service", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="a292da22eb4c4c8ff98873c2753938299d67b4c5",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_f5094",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="8e1505708a01bc6eafa853b18b75b99d428f1532",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_2b90e",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="1d329e70cbd6aff275c5d1aff0bf41ea531b8e2f",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_9f74c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="created_by",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="created_by",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedservicesevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedservicesevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedservicesevent",
            name="servicerequest",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="notepurposesevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notepurposesevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="notepurposesevent",
            name="task",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedservicesevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedservicesevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedservicesevent",
            name="servicerequest",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepsevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepsevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepsevent",
            name="task",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="organization",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="organizations.organization",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.mood",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notenextsteps",
            trigger=pgtrigger.compiler.Trigger(
                name="note_next_steps_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notenextstepsevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "task_id") VALUES (NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_next_steps.add\', NEW."task_id"); RETURN NULL;',
                    hash="fd9d398f604fe5af53c1046b43f4c0b934c5e579",
                    operation="INSERT",
                    pgid="pgtrigger_note_next_steps_add_insert_65c34",
                    table="notes_note_next_steps",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notenextsteps",
            trigger=pgtrigger.compiler.Trigger(
                name="note_next_steps_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notenextstepsevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "task_id") VALUES (OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_next_steps.remove\', OLD."task_id"); RETURN NULL;',
                    hash="0d60192743f8ec4d739390621be7b5e165c9ffe6",
                    operation="DELETE",
                    pgid="pgtrigger_note_next_steps_remove_delete_b9bdf",
                    table="notes_note_next_steps",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noteprovidedservices",
            trigger=pgtrigger.compiler.Trigger(
                name="note_provided_services_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteprovidedservicesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "servicerequest_id") VALUES (NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_provided_services.add\', NEW."servicerequest_id"); RETURN NULL;',
                    hash="609d058ed697cb14e6dd519cde60c15fd968e138",
                    operation="INSERT",
                    pgid="pgtrigger_note_provided_services_add_insert_c8860",
                    table="notes_note_provided_services",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noteprovidedservices",
            trigger=pgtrigger.compiler.Trigger(
                name="note_provided_services_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteprovidedservicesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "servicerequest_id") VALUES (OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_provided_services.remove\', OLD."servicerequest_id"); RETURN NULL;',
                    hash="1c4d44d2790dac31828a1ae933628adc05747275",
                    operation="DELETE",
                    pgid="pgtrigger_note_provided_services_remove_delete_46d32",
                    table="notes_note_provided_services",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notepurposes",
            trigger=pgtrigger.compiler.Trigger(
                name="note_purposes_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notepurposesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "task_id") VALUES (NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_purposes.add\', NEW."task_id"); RETURN NULL;',
                    hash="0728183e85f7def7904f688a49837f203eec26ac",
                    operation="INSERT",
                    pgid="pgtrigger_note_purposes_add_insert_c0f5c",
                    table="notes_note_purposes",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notepurposes",
            trigger=pgtrigger.compiler.Trigger(
                name="note_purposes_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notepurposesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "task_id") VALUES (OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_purposes.remove\', OLD."task_id"); RETURN NULL;',
                    hash="52a84731643fad0cd59146ef3ac210644f732eb7",
                    operation="DELETE",
                    pgid="pgtrigger_note_purposes_remove_delete_a6c75",
                    table="notes_note_purposes",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noterequestedservices",
            trigger=pgtrigger.compiler.Trigger(
                name="note_requested_services_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noterequestedservicesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "servicerequest_id") VALUES (NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_requested_services.add\', NEW."servicerequest_id"); RETURN NULL;',
                    hash="42724de35837c902d807e71a5561dcc75f793acb",
                    operation="INSERT",
                    pgid="pgtrigger_note_requested_services_add_insert_54897",
                    table="notes_note_requested_services",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noterequestedservices",
            trigger=pgtrigger.compiler.Trigger(
                name="note_requested_services_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noterequestedservicesevent" ("id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "servicerequest_id") VALUES (OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_requested_services.remove\', OLD."servicerequest_id"); RETURN NULL;',
                    hash="2001696ad18650cee44f5a8d45d24d9d0df42bec",
                    operation="DELETE",
                    pgid="pgtrigger_note_requested_services_remove_delete_1a764",
                    table="notes_note_requested_services",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="servicerequest",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="update_update",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.add\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="bac408a5fa247951f418a3cc0a3346b2532f5bdd",
                    operation="INSERT",
                    pgid="pgtrigger_note_add_insert_e05e6",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.update\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="6e08787f8c9e1f9078a744594e1fab47fb7f974f",
                    operation="UPDATE",
                    pgid="pgtrigger_note_update_update_ac81f",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."id", OLD."is_submitted", OLD."location_id", OLD."organization_id", _pgh_attach_context(), NOW(), \'note.remove\', OLD."id", OLD."private_details", OLD."public_details", OLD."timestamp", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="d1ef50679d177cf06c9eb39fea661eaa83fc3825",
                    operation="DELETE",
                    pgid="pgtrigger_note_remove_delete_dd722",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'service_request.add\', NEW."id", NEW."service", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="62b41e55698280f66ebeef02d09d2de54520c236",
                    operation="INSERT",
                    pgid="pgtrigger_service_request_add_insert_f5d42",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="service_request_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (OLD."client_id", OLD."completed_on", OLD."created_at", OLD."created_by_id", OLD."custom_service", OLD."due_by", OLD."id", _pgh_attach_context(), NOW(), \'service_request.remove\', OLD."id", OLD."service", OLD."status", OLD."updated_at"); RETURN NULL;',
                    hash="9e4917e19072a96e82d29a8524688dfc343a30ba",
                    operation="DELETE",
                    pgid="pgtrigger_service_request_remove_delete_53389",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="777c9013b20ae4be3e84796c7c6ee46475b22314",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_19a6c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", OLD."location_id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."status", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="5505b247462744dfc057e37a894bae961798488a",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_ced05",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_remove_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="task",
            name="task_remove_delete",
        ),
        migrations.AddField(
            model_name="note",
            name="address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="address",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="task",
            name="address",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="address",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.address",
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="point",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.add\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="c2203486cec6595e7984ed60eb0c29a3c5b42806",
                    operation="INSERT",
                    pgid="pgtrigger_note_add_insert_e05e6",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.update\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="1cf563b63928fcb6bd83a652221aaac5c1a29229",
                    operation="UPDATE",
                    pgid="pgtrigger_note_update_update_ac81f",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (OLD."address_id", OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."id", OLD."is_submitted", OLD."organization_id", _pgh_attach_context(), NOW(), \'note.remove\', OLD."id", OLD."point", OLD."private_details", OLD."public_details", OLD."timestamp", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="983b94db6a13c80ffaee3d64d8ecb98a4e464217",
                    operation="DELETE",
                    pgid="pgtrigger_note_remove_delete_dd722",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("address_id", "client_id", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "status", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."point", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="2d381068ce6fe4142cc150a58434ef9027c2de9f",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_19a6c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("address_id", "client_id", "created_at", "created_by_id", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "status", "title", "updated_at") VALUES (OLD."address_id", OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."due_by", OLD."id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."point", OLD."status", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="6baffa0a34661eb6b04dcdf45dc5b37e2e1903a8",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_ced05",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AlterField(
            model_name="note",
            name="next_steps",
            field=models.ManyToManyField(blank=True, related_name="next_step_notes", to="notes.task"),
        ),
        migrations.AlterField(
            model_name="note",
            name="provided_services",
            field=models.ManyToManyField(blank=True, related_name="provided_notes", to="notes.servicerequest"),
        ),
        migrations.AlterField(
            model_name="note",
            name="purposes",
            field=models.ManyToManyField(blank=True, related_name="purpose_notes", to="notes.task"),
        ),
        migrations.AlterField(
            model_name="note",
            name="requested_services",
            field=models.ManyToManyField(blank=True, related_name="requested_notes", to="notes.servicerequest"),
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_add_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="note",
            name="note_remove_delete",
        ),
        migrations.AddField(
            model_name="note",
            name="interacted_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="noteevent",
            name="interacted_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="note",
            name="timestamp",
        ),
        migrations.RemoveField(
            model_name="noteevent",
            name="timestamp",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."interacted_at", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.add\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="af8720628c765b925f117c1aabab60ae25791acc",
                    operation="INSERT",
                    pgid="pgtrigger_note_add_insert_e05e6",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "title", "updated_at") VALUES (NEW."address_id", NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."interacted_at", NEW."is_submitted", NEW."organization_id", _pgh_attach_context(), NOW(), \'note.update\', NEW."id", NEW."point", NEW."private_details", NEW."public_details", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="064eb25c59e679dbadbe0287cb2ea35d6267b122",
                    operation="UPDATE",
                    pgid="pgtrigger_note_update_update_ac81f",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="note_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("address_id", "client_id", "created_at", "created_by_id", "id", "interacted_at", "is_submitted", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "point", "private_details", "public_details", "title", "updated_at") VALUES (OLD."address_id", OLD."client_id", OLD."created_at", OLD."created_by_id", OLD."id", OLD."interacted_at", OLD."is_submitted", OLD."organization_id", _pgh_attach_context(), NOW(), \'note.remove\', OLD."id", OLD."point", OLD."private_details", OLD."public_details", OLD."title", OLD."updated_at"); RETURN NULL;',
                    hash="1b8e90b46c1ae7823a18de74ef16036903cf08cc",
                    operation="DELETE",
                    pgid="pgtrigger_note_remove_delete_dd722",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.RunPython(update_caseworker_permission_template),
    ]
