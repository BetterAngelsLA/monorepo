# Generated by Django 4.2.11 on 2024-03-23 05:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import notes.enums
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pghistory", "0006_delete_aggregateevent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("common", "0004_attachment_attachmentgroupobjectpermission_and_more"),
        ("organizations", "0006_alter_organization_slug"),
        ("notes", "0016_remove_note_next_steps_remove_note_provided_services_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="MoodEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "descriptor",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("agitated", "Agitated"),
                            ("agreeable", "Agreeable"),
                            ("anxious", "Anxious"),
                            ("depressed", "Depressed"),
                            ("detached", "Detached"),
                            ("disorganized_thought", "Disorganized Thought"),
                            ("disoriented", "Disoriented"),
                            ("escalated", "Escalated"),
                            ("euthymic", "Euthymic"),
                            ("flat_blunted", "Flat/blunted"),
                            ("happy", "Happy"),
                            ("hopeless", "Hopeless"),
                            ("indifferent", "Indifferent"),
                            ("manic", "Manic"),
                            ("motivated", "Motivated"),
                            ("optimistic", "Optimistic"),
                            ("personable", "Personable"),
                            ("pleasant", "Pleasant"),
                            ("restless", "Restless"),
                            ("suicidal", "Suicidal"),
                        ],
                        choices_enum=notes.enums.MoodEnum,
                        max_length=20,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=100)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("public_details", models.TextField(blank=True)),
                ("private_details", models.TextField(blank=True)),
                ("is_submitted", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteNextStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteNextStepEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteProvidedService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteProvidedServiceEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NotePurpose",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NotePurposeEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteRequestedService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoteRequestedServiceEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServiceRequestEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("blanket", "Blanket"),
                            ("book", "Book"),
                            ("clothes", "Clothes"),
                            ("dental", "Dental"),
                            ("food", "Food"),
                            ("harm_reduction", "Harm Reduction"),
                            ("hygiene_kit", "Hygiene Kit"),
                            ("medical", "Medical"),
                            ("pet_care", "Pet Care"),
                            ("pet_food", "Pet Food"),
                            ("shelter", "Shelter"),
                            ("shoes", "Shoes"),
                            ("shower", "Shower"),
                            ("stabilize", "Stabilize"),
                            ("storage", "Storage"),
                            ("transport", "Transport"),
                            ("water", "Water"),
                            ("other", "Other"),
                        ],
                        choices_enum=notes.enums.ServiceEnum,
                        max_length=14,
                    ),
                ),
                (
                    "custom_service",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.ServiceRequestStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
                ("completed_on", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=100)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("to_do", "To Do")],
                        choices_enum=notes.enums.TaskStatusEnum,
                        max_length=9,
                    ),
                ),
                ("due_by", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mood",
            trigger=pgtrigger.compiler.Trigger(
                name="mood_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_moodevent" ("created_at", "descriptor", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (NEW."created_at", NEW."descriptor", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'mood.add\', NEW."id", NEW."updated_at"); RETURN NULL;',
                    hash="464d79fe7451d66cdd2edadb7129d590bd748405",
                    operation="INSERT",
                    pgid="pgtrigger_mood_add_insert_d64e0",
                    table="notes_mood",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="mood",
            trigger=pgtrigger.compiler.Trigger(
                name="mood_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_moodevent" ("created_at", "descriptor", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "updated_at") VALUES (OLD."created_at", OLD."descriptor", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'mood.remove\', OLD."id", OLD."updated_at"); RETURN NULL;',
                    hash="444b324a517f0c7683728da7516d1dee65d13faf",
                    operation="DELETE",
                    pgid="pgtrigger_mood_remove_delete_0c941",
                    table="notes_mood",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="b6834ce3c49a5384b7512cca9bb0ee8e01324000",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7ed5b",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="note",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_noteevent" ("client_id", "created_at", "created_by_id", "id", "is_submitted", "location_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "private_details", "public_details", "timestamp", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."id", NEW."is_submitted", NEW."location_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."private_details", NEW."public_details", NEW."timestamp", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="b5122522cee54db6bbbf17531fda6675ccd39bc9",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_38f06",
                    table="notes_note",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."service", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="3808bcb7f1b9e4a0e1dbbf73d9e38310789c6c45",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_cd1b7",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="servicerequest",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_servicerequestevent" ("client_id", "completed_on", "created_at", "created_by_id", "custom_service", "due_by", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service", "status", "updated_at") VALUES (NEW."client_id", NEW."completed_on", NEW."created_at", NEW."created_by_id", NEW."custom_service", NEW."due_by", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."service", NEW."status", NEW."updated_at"); RETURN NULL;',
                    hash="a292da22eb4c4c8ff98873c2753938299d67b4c5",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_f5094",
                    table="notes_servicerequest",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="8e1505708a01bc6eafa853b18b75b99d428f1532",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_2b90e",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "notes_taskevent" ("client_id", "created_at", "created_by_id", "due_by", "id", "location_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "title", "updated_at") VALUES (NEW."client_id", NEW."created_at", NEW."created_by_id", NEW."due_by", NEW."id", NEW."location_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."status", NEW."title", NEW."updated_at"); RETURN NULL;',
                    hash="1d329e70cbd6aff275c5d1aff0bf41ea531b8e2f",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_9f74c",
                    table="notes_task",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="created_by",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="location",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.location",
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="taskevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="created_by",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="servicerequestevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedserviceevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedserviceevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedserviceevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.noterequestedservice",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedserviceevent",
            name="service_request",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedservice",
            name="note",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_requested_services",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noterequestedservice",
            name="service_request",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_requested_services",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="notepurposeevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notepurposeevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="notepurposeevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.notepurpose",
            ),
        ),
        migrations.AddField(
            model_name="notepurposeevent",
            name="task",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="notepurpose",
            name="note",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_purposes",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notepurpose",
            name="task",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_purposes",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedserviceevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedserviceevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedserviceevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.noteprovidedservice",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedserviceevent",
            name="service_request",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedservice",
            name="note",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_provided_services",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="noteprovidedservice",
            name="service_request",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_provided_services",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.notenextstep",
            ),
        ),
        migrations.AddField(
            model_name="notenextstepevent",
            name="task",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="notenextstep",
            name="note",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_next_steps",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="notenextstep",
            name="task",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_next_steps",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="client",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="location",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="common.location",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="organization",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="organizations.organization",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="noteevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="note",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="notes.note",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="moodevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="notes.mood",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="next_steps",
            field=models.ManyToManyField(
                related_name="next_step_notes",
                through="notes.NoteNextStep",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="provided_services",
            field=models.ManyToManyField(
                related_name="provided_notes",
                through="notes.NoteProvidedService",
                to="notes.servicerequest",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="purposes",
            field=models.ManyToManyField(
                related_name="purpose_notes",
                through="notes.NotePurpose",
                to="notes.task",
            ),
        ),
        migrations.AddField(
            model_name="note",
            name="requested_services",
            field=models.ManyToManyField(
                related_name="requested_notes",
                through="notes.NoteRequestedService",
                to="notes.servicerequest",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noterequestedservice",
            trigger=pgtrigger.compiler.Trigger(
                name="note_requested_service_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noterequestedserviceevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service_request_id", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_requested_service.add\', NEW."id", NEW."service_request_id", NEW."updated_at"); RETURN NULL;',
                    hash="c7f5e4bf293fb8c0de2db1ef60e92a366b8df689",
                    operation="INSERT",
                    pgid="pgtrigger_note_requested_service_add_insert_91357",
                    table="notes_noterequestedservice",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noterequestedservice",
            trigger=pgtrigger.compiler.Trigger(
                name="note_requested_service_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noterequestedserviceevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service_request_id", "updated_at") VALUES (OLD."created_at", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_requested_service.remove\', OLD."id", OLD."service_request_id", OLD."updated_at"); RETURN NULL;',
                    hash="b5441d8209f70fdbfb23fb3c8f7cfbc048512ada",
                    operation="DELETE",
                    pgid="pgtrigger_note_requested_service_remove_delete_95949",
                    table="notes_noterequestedservice",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notepurpose",
            trigger=pgtrigger.compiler.Trigger(
                name="note_purpose_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notepurposeevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_purpose.add\', NEW."id", NEW."task_id", NEW."updated_at"); RETURN NULL;',
                    hash="ce3ad90d32b74348276ccadd0f02314783338d0f",
                    operation="INSERT",
                    pgid="pgtrigger_note_purpose_add_insert_ad353",
                    table="notes_notepurpose",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notepurpose",
            trigger=pgtrigger.compiler.Trigger(
                name="note_purpose_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notepurposeevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id", "updated_at") VALUES (OLD."created_at", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_purpose.remove\', OLD."id", OLD."task_id", OLD."updated_at"); RETURN NULL;',
                    hash="5bdc01993dc6cb71dced582e2def861607355072",
                    operation="DELETE",
                    pgid="pgtrigger_note_purpose_remove_delete_6e65b",
                    table="notes_notepurpose",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noteprovidedservice",
            trigger=pgtrigger.compiler.Trigger(
                name="note_provided_service_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteprovidedserviceevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service_request_id", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_provided_service.add\', NEW."id", NEW."service_request_id", NEW."updated_at"); RETURN NULL;',
                    hash="a7cb5938991cdab3d87dc930cf302c64e37d24f5",
                    operation="INSERT",
                    pgid="pgtrigger_note_provided_service_add_insert_5e8d5",
                    table="notes_noteprovidedservice",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="noteprovidedservice",
            trigger=pgtrigger.compiler.Trigger(
                name="note_provided_service_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_noteprovidedserviceevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "service_request_id", "updated_at") VALUES (OLD."created_at", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_provided_service.remove\', OLD."id", OLD."service_request_id", OLD."updated_at"); RETURN NULL;',
                    hash="8deae7ed8ccbc17525210a1f849e69093d5fa0a9",
                    operation="DELETE",
                    pgid="pgtrigger_note_provided_service_remove_delete_470f7",
                    table="notes_noteprovidedservice",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notenextstep",
            trigger=pgtrigger.compiler.Trigger(
                name="note_next_step_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notenextstepevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."note_id", _pgh_attach_context(), NOW(), \'note_next_step.add\', NEW."id", NEW."task_id", NEW."updated_at"); RETURN NULL;',
                    hash="bdc42932c233e0f4299a0e3770188443ccd46c30",
                    operation="INSERT",
                    pgid="pgtrigger_note_next_step_add_insert_a2017",
                    table="notes_notenextstep",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="notenextstep",
            trigger=pgtrigger.compiler.Trigger(
                name="note_next_step_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "notes_notenextstepevent" ("created_at", "id", "note_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "task_id", "updated_at") VALUES (OLD."created_at", OLD."id", OLD."note_id", _pgh_attach_context(), NOW(), \'note_next_step.remove\', OLD."id", OLD."task_id", OLD."updated_at"); RETURN NULL;',
                    hash="91814af8f1fefab2d1baf62b020698bbb5410cfa",
                    operation="DELETE",
                    pgid="pgtrigger_note_next_step_remove_delete_765fa",
                    table="notes_notenextstep",
                    when="AFTER",
                ),
            ),
        ),
    ]
