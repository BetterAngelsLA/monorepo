# Assuming Django version and date for the unified migration
# Generated by Django 4.2.9 on 2024-02-06 21:10

from django.db import migrations, models
import django.db.models.deletion
from django.core.exceptions import ObjectDoesNotExist
from accounts.groups import GroupTemplateNames
from notes.permissions import NotePermissions, PrivateNotePermissions


def create_permissions_if_not_exist(apps, schema_editor):
    Note = apps.get_model("notes", "Note")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")

    NoteContentType = ContentType.objects.get_for_model(Note)

    permissions_to_add = [
        PrivateNotePermissions.VIEW,
        PrivateNotePermissions.CHANGE,
        PrivateNotePermissions.DELETE,
        PrivateNotePermissions.ADD,
    ]

    for perm in permissions_to_add:
        # Split the enum value to get the codename without the app label
        codename = perm.value.split(".")[-1]
        # Generate a human-readable name for the permission
        name = "Can " + perm.name.lower().replace("_", " ") + " private note"

        Permission.objects.get_or_create(
            codename=codename,
            defaults={
                "name": name,
                "content_type": NoteContentType,
            },
        )


def create_caseworker_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    caseworker_template = PermissionGroupTemplate.objects.create(
        name=GroupTemplateNames.CASEWORKER
    )

    perm_map = [
        perm.split(".")[1]
        for perm in [
            NotePermissions.ADD,
            NotePermissions.CHANGE,
            NotePermissions.DELETE,
            NotePermissions.VIEW,
        ]
    ]

    permission = Permission.objects.filter(codename__in=perm_map)
    caseworker_template.permissions.set(permission)


def delete_old_caseworker_group(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    caseworker_group = Group.objects.get(name=GroupTemplateNames.CASEWORKER)
    caseworker_group.delete()


def delete_all_notes(apps, schema_editor):
    Note = apps.get_model("notes", "Note")
    Note.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("organizations", "0006_alter_organization_slug"),
        ("notes", "0003_add_casemanager_note_permissions"),
    ]

    operations = [
        migrations.RunPython(delete_all_notes, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_caseworker_permission_template),
        migrations.RunPython(delete_old_caseworker_group),
        migrations.AddField(
            model_name="note",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="organizations.organization",
            ),
        ),
        migrations.AlterField(
            model_name="notegroupobjectpermission",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="notes.note"
            ),
        ),
        migrations.AlterField(
            model_name="noteuserobjectpermission",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="notes.note"
            ),
        ),
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.AlterModelOptions(
            name="note",
            options={
                "permissions": (
                    ("add_private_note", "Can add private note"),
                    ("change_private_note", "Can change private note"),
                    ("delete_private_note", "Can delete private note"),
                    ("view_private_note", "Can view private note"),
                ),
            },
        ),
    ]
