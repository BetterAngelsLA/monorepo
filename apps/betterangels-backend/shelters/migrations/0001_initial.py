# Generated by Django 4.2.9 on 2024-02-14 06:30

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import shelters.enums


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CatchmentZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("point", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("spa", models.PositiveSmallIntegerField()),
                ("address", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=255)),
                ("state", models.CharField(max_length=255)),
                ("zip_code", models.PositiveSmallIntegerField()),
                ("confidential", models.BooleanField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Population",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            (shelters.enums.PopulationEnum["ADULTS"], "Adults"),
                            (shelters.enums.PopulationEnum["MEN"], "Men"),
                            (shelters.enums.PopulationEnum["WOMEN"], "Women"),
                            (shelters.enums.PopulationEnum["FAMILIES"], "Families"),
                            (shelters.enums.PopulationEnum["YOUTH"], "Youth"),
                            (shelters.enums.PopulationEnum["BOYS"], "Boys"),
                            (shelters.enums.PopulationEnum["GIRLS"], "Girls"),
                            (shelters.enums.PopulationEnum["SENIORS"], "Seniors"),
                            (shelters.enums.PopulationEnum["VETERANS"], "Veterans"),
                            (shelters.enums.PopulationEnum["LGBTQ"], "LGBTQ"),
                        ],
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Program",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                (
                    "catchment_zones",
                    models.ManyToManyField(to="shelters.catchmentzone"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Requirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            (shelters.enums.RequirementEnum["PHOTO_ID"], "Photo ID"),
                            (
                                shelters.enums.RequirementEnum["MEDICAID_OR_MEDICARE"],
                                "Medicaid or Medicare",
                            ),
                            (shelters.enums.RequirementEnum["VETERAN"], "Veteran"),
                            (
                                shelters.enums.RequirementEnum["RESERVATION"],
                                "Reservation",
                            ),
                            (shelters.enums.RequirementEnum["REFERRAL"], "Referral"),
                        ],
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            (shelters.enums.ServiceEnum["FOOD"], "Food"),
                            (shelters.enums.ServiceEnum["SHOWERS"], "Shower"),
                            (shelters.enums.ServiceEnum["CLOTHING"], "Clothing"),
                            (shelters.enums.ServiceEnum["MAIL"], "Mail"),
                            (shelters.enums.ServiceEnum["PHONE"], "Phone"),
                            (shelters.enums.ServiceEnum["COMPUTERS"], "Computers"),
                            (
                                shelters.enums.ServiceEnum["JOB_TRAINING"],
                                "Job Training",
                            ),
                            (shelters.enums.ServiceEnum["TUTORING"], "Tutoring"),
                            (
                                shelters.enums.ServiceEnum["LIFE_SKILLS_TRAINING"],
                                "Life Skills Training",
                            ),
                            (
                                shelters.enums.ServiceEnum["MEDICAL_SERVICES"],
                                "Medical Services",
                            ),
                            (
                                shelters.enums.ServiceEnum["MENTAL_HEALTH"],
                                "Mental Health",
                            ),
                            (
                                shelters.enums.ServiceEnum["DRUG_TREATMENT"],
                                "Drug Treatment",
                            ),
                            (
                                shelters.enums.ServiceEnum["FINANCIAL_PLANNING"],
                                "Financial Planning",
                            ),
                            (
                                shelters.enums.ServiceEnum["LEGAL_ASSISTANCE"],
                                "Legal Assistance",
                            ),
                            (
                                shelters.enums.ServiceEnum["TRANSPORTATION"],
                                "Transportation",
                            ),
                        ],
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Shelter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("image_url", models.URLField()),
                (
                    "how_to_enter",
                    models.CharField(
                        choices=[
                            (shelters.enums.HowToEnterEnum["CALL"], "Call"),
                            (shelters.enums.HowToEnterEnum["REFERRAL"], "Referral"),
                            (shelters.enums.HowToEnterEnum["WALK_IN"], "Walk-In"),
                        ]
                    ),
                ),
                ("max_stay", models.PositiveSmallIntegerField()),
                (
                    "average_bed_rate",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("website", models.URLField()),
                ("description", models.TextField()),
                ("bed_layout_description", models.TextField()),
                ("typical_stay_description", models.TextField()),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shelters.location",
                    ),
                ),
                ("population", models.ManyToManyField(to="shelters.population")),
                ("requirements", models.ManyToManyField(to="shelters.requirement")),
                ("services", models.ManyToManyField(to="shelters.service")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("temporary", models.BooleanField(default=False)),
                ("private", models.BooleanField()),
                ("population", models.ManyToManyField(to="shelters.population")),
                (
                    "shelter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rooms",
                        to="shelters.shelter",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProgramBedAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("beds_allocated", models.PositiveSmallIntegerField(default=0)),
                ("remaining_beds", models.PositiveSmallIntegerField(default=0)),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allocations",
                        to="shelters.program",
                    ),
                ),
                (
                    "shelter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allocations",
                        to="shelters.shelter",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="program",
            name="requirements",
            field=models.ManyToManyField(to="shelters.requirement"),
        ),
        migrations.CreateModel(
            name="Bed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "state",
                    models.CharField(
                        choices=[
                            (shelters.enums.BedStateEnum["RESERVED"], "Reserved"),
                            (shelters.enums.BedStateEnum["OCCUPIED"], "Occupied"),
                            (shelters.enums.BedStateEnum["EMPTY"], "Empty"),
                        ]
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="beds",
                        to="shelters.program",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="beds",
                        to="shelters.room",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
