# Generated by Django 4.2.11 on 2024-04-17 06:36

from accounts.permissions import ClientPermissions
from django.db import migrations

PERMISSIONS_TO_ADD = [
    ClientPermissions.ADD,
    ClientPermissions.CHANGE,
    ClientPermissions.DELETE,
    ClientPermissions.VIEW,
]

# Generate readable names based on the enum
PERM_MAP = {perm.split(".")[1]: "Can " + perm.name.lower().replace("_", " ") + " task" for perm in ClientPermissions}


def create_permissions_if_not_exist(apps, schema_editor):
    Client = apps.get_model("accounts", "Client")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    ClientContentType = ContentType.objects.get_for_model(Client, for_concrete_model=False)
    db_alias = schema_editor.connection.alias

    for codename, name in PERM_MAP.items():
        Permission.objects.using(db_alias).get_or_create(
            codename=codename,
            defaults={"name": name, "content_type": ClientContentType},
        )


def update_caseworker_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    caseworker_template = PermissionGroupTemplate.objects.get(name="Caseworker")

    perm_map = [
        perm.split(".")[1]
        for perm in [
            "accounts.add_client",
        ]
    ]

    permissions = Permission.objects.filter(codename__in=perm_map)
    caseworker_template.permissions.add(*permissions)


def revert_caseworker_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    caseworker_template = PermissionGroupTemplate.objects.get(name="Caseworker")

    perm_map = [
        perm.split(".")[1]
        for perm in [
            "accounts.add_client",
        ]
    ]

    permissions = Permission.objects.filter(codename__in=perm_map)
    caseworker_template.permissions.remove(*permissions)


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0013_clientuserobjectpermission_and_more"),
        ("notes", "0005_alter_note_options_note_organization_and_more"),
    ]

    operations = [
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.RunPython(update_caseworker_permission_template, revert_caseworker_permission_template),
    ]
