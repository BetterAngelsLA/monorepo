# Generated by Django 5.2.4 on 2025-07-08 20:47

from accounts.permissions import OrganizationPortalPermissions
from django.db import migrations


def create_permissions_if_not_exist(apps, schema_editor):
    Organization = apps.get_model("organizations", "Organization")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    OrganizationContentType = ContentType.objects.get_for_model(Organization)
    db_alias = schema_editor.connection.alias

    PERM_MAP = {perm.split(".")[1]: perm.label for perm in OrganizationPortalPermissions}
    for codename, name in PERM_MAP.items():
        Permission.objects.using(db_alias).get_or_create(
            codename=codename,
            content_type=OrganizationContentType,
            defaults={"name": name, "content_type": OrganizationContentType},
        )


def update_org_admin_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Organization = apps.get_model("organizations", "Organization")
    OrganizationContentType = ContentType.objects.get_for_model(Organization)
    org_admin_template = PermissionGroupTemplate.objects.get(name="Organization Admin")

    perm_map = [
        perm.split(".")[1]
        for perm in [
            "organizations.access_org_portal",
            "organizations.add_org_member",
            "organizations.remove_org_member",
        ]
    ]

    permissions = Permission.objects.filter(codename__in=perm_map, content_type=OrganizationContentType)
    org_admin_template.permissions.add(*permissions)


def update_org_superuser_permission_template(apps, schema_editor):
    PermissionGroupTemplate = apps.get_model("accounts", "PermissionGroupTemplate")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Organization = apps.get_model("organizations", "Organization")
    OrganizationContentType = ContentType.objects.get_for_model(Organization)
    org_superuser_template = PermissionGroupTemplate.objects.get(name="Organization Superuser")

    perm_map = [
        perm.split(".")[1]
        for perm in [
            "organizations.access_org_portal",
            "organizations.add_org_member",
            "organizations.remove_org_member",
            "organizations.change_org_member_role",
        ]
    ]

    permissions = Permission.objects.filter(codename__in=perm_map, content_type=OrganizationContentType)
    org_superuser_template.permissions.add(*permissions)


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0039_create_org_admin_templates"),
    ]

    operations = [
        migrations.RunPython(create_permissions_if_not_exist),
        migrations.RunPython(update_org_admin_permission_template),
        migrations.RunPython(update_org_superuser_permission_template),
    ]
