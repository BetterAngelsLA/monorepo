# Generated by Django 5.2.4 on 2025-08-01 06:06

import common.enums
import django.db.models.deletion
import django_choices_field.fields
import pgtrigger.compiler
import pgtrigger.migrations
import tasks.enums
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("clients", "0031_remove_clientprofile_client_profile_add_insert_and_more"),
        ("notes", "0020_remove_note_next_steps_remove_note_purposes_and_more"),
        ("organizations", "0006_alter_organization_slug"),
        ("pghistory", "0007_auto_20250421_0444"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("in_progress", "In Progress"), ("to_do", "To Do")],
                        choices_enum=tasks.enums.TaskStatusEnum,
                        max_length=11,
                    ),
                ),
                ("summary", models.CharField(max_length=100)),
                (
                    "team",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("bowtie_riverside_outreach", "Bowtie & Riverside Outreach"),
                            ("echo_park_on_site", "Echo Park On-site"),
                            ("echo_park_outreach", "Echo Park Outreach"),
                            ("hollywood_on_site", "Hollywood On-site"),
                            ("hollywood_outreach", "Hollywood Outreach"),
                            ("la_river_outreach", "LA River Outreach"),
                            ("los_feliz_outreach", "Los Feliz Outreach"),
                            ("northeast_hollywood_outreach", "Northeast Hollywood Outreach"),
                            ("silver_lake_outreach", "Silver Lake Outreach"),
                            ("slcc_on_site", "SLCC On-site"),
                            ("sunday_social_atwater_on_site", "Sunday Social / Atwater On-site"),
                            ("sunday_social_atwater_outreach", "Sunday Social / Atwater Outreach"),
                            ("wdi_on_site", "WDI On-site"),
                            ("wdi_outreach", "WDI Outreach"),
                        ],
                        choices_enum=common.enums.SelahTeamEnum,
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "client_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="clients.clientprofile",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="notes.note",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[("completed", "Completed"), ("in_progress", "In Progress"), ("to_do", "To Do")],
                        choices_enum=tasks.enums.TaskStatusEnum,
                        max_length=11,
                    ),
                ),
                ("summary", models.CharField(max_length=100)),
                (
                    "team",
                    django_choices_field.fields.TextChoicesField(
                        blank=True,
                        choices=[
                            ("bowtie_riverside_outreach", "Bowtie & Riverside Outreach"),
                            ("echo_park_on_site", "Echo Park On-site"),
                            ("echo_park_outreach", "Echo Park Outreach"),
                            ("hollywood_on_site", "Hollywood On-site"),
                            ("hollywood_outreach", "Hollywood Outreach"),
                            ("la_river_outreach", "LA River Outreach"),
                            ("los_feliz_outreach", "Los Feliz Outreach"),
                            ("northeast_hollywood_outreach", "Northeast Hollywood Outreach"),
                            ("silver_lake_outreach", "Silver Lake Outreach"),
                            ("slcc_on_site", "SLCC On-site"),
                            ("sunday_social_atwater_on_site", "Sunday Social / Atwater On-site"),
                            ("sunday_social_atwater_outreach", "Sunday Social / Atwater Outreach"),
                            ("wdi_on_site", "WDI On-site"),
                            ("wdi_outreach", "WDI Outreach"),
                        ],
                        choices_enum=common.enums.SelahTeamEnum,
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "client_profile",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="clients.clientprofile",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="notes.note",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="organizations.organization",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_add_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "tasks_taskevent" ("client_profile_id", "created_at", "created_by_id", "description", "id", "note_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "team", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."id", NEW."note_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'task.add\', NEW."id", NEW."status", NEW."summary", NEW."team", NEW."updated_at"); RETURN NULL;',
                    hash="11ba88d4f84f6a310832ed79d4d1c48e8750e1e0",
                    operation="INSERT",
                    pgid="pgtrigger_task_add_insert_be0f1",
                    table="tasks_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "tasks_taskevent" ("client_profile_id", "created_at", "created_by_id", "description", "id", "note_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "team", "updated_at") VALUES (NEW."client_profile_id", NEW."created_at", NEW."created_by_id", NEW."description", NEW."id", NEW."note_id", NEW."organization_id", _pgh_attach_context(), NOW(), \'task.update\', NEW."id", NEW."status", NEW."summary", NEW."team", NEW."updated_at"); RETURN NULL;',
                    hash="2d8d4d558d08a5a4c2f2d1b6d47153dee68bde66",
                    operation="UPDATE",
                    pgid="pgtrigger_task_update_update_1c3f7",
                    table="tasks_task",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="task",
            trigger=pgtrigger.compiler.Trigger(
                name="task_remove_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "tasks_taskevent" ("client_profile_id", "created_at", "created_by_id", "description", "id", "note_id", "organization_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status", "summary", "team", "updated_at") VALUES (OLD."client_profile_id", OLD."created_at", OLD."created_by_id", OLD."description", OLD."id", OLD."note_id", OLD."organization_id", _pgh_attach_context(), NOW(), \'task.remove\', OLD."id", OLD."status", OLD."summary", OLD."team", OLD."updated_at"); RETURN NULL;',
                    hash="05320035e1653bc2fce9bbe889fa7fbf8ff53296",
                    operation="DELETE",
                    pgid="pgtrigger_task_remove_delete_093f2",
                    table="tasks_task",
                    when="AFTER",
                ),
            ),
        ),
    ]
