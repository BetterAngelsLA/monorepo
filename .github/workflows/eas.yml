name: 📱 FE App Deployment

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:
  # prepare:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read # Required to find the last successful workflow run
  #     contents: read # Required for actions/checkout
  #   steps:
  #     - name: 🏗 Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # Checks out all branches and tags. Maybe we can make this better in the future?

  #     # This line is needed for nx affected to work when CI is running on a PR
  #     - name: 🔀 Track main if PR
  #       if: github.ref != 'refs/heads/main'
  #       run: git branch --track main origin/main

  #     - name: 🔧 Configure NX SHAs
  #       uses: nrwl/nx-set-shas@v4

  #     - name: 🔧 Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.12.2
  #     - run: |
  #         corepack enable
  #     - name: Setup Yarn in Node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: 'yarn'

  #     - name: 📦 Install dependencies
  #       run: yarn install

  #     - name: 🧩 Determine Affected Projects for eas-update
  #       id: set-matrix
  #       run: |
  #         # Get the list of affected projects with eas-update target
  #         affected_projects=$(yarn nx show projects --affected --exclude=shelter --withTarget eas-update)
  #         # Convert the list to a JSON matrix
  #         MATRIX_JSON=$(echo "$affected_projects" | jq -Rcs '
  #           split("\n") |
  #           map(select(. != "")) |
  #           if length == 0 then
  #               {}
  #           else
  #               {include: map({project: .})}
  #           end'
  #         )
  #         IS_MATRIX_EMPTY=$(echo "$MATRIX_JSON" | jq 'if .include | length == 0 then true else false end')
  #         echo "is_matrix_empty=$IS_MATRIX_EMPTY" >> $GITHUB_OUTPUT
  #         echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #     is_matrix_empty: ${{ steps.set-matrix.outputs.is_matrix_empty }}

  preview:
    # needs: prepare
    environment: preview
    runs-on: ubuntu-latest
    # if: needs.prepare.outputs.is_matrix_empty == 'false'
    concurrency: continuous-deploy-fingerprint-${{ github.event_name != 'pull_request' && 'main' || github.run_id }}
    strategy:
      # matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      matrix:
        project: [betterangels]
    permissions:
      # REQUIRED: Allow comments on PRs
      pull-requests: write # Allow comments on PRs
      # REQUIRED: Allow updating fingerprint in action caches
      actions: write
      # Following permissions are required for private repos
      contents: read
      packages: write
    steps:
      - name: 🏗 Check out repo
        uses: actions/checkout@v4
        with:
          # https://github.com/expo/expo-github-action/issues/229
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 🔧 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - run: |
          corepack enable
      - name: Setup Yarn in Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      - name: 🔧 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: yarn install

      - name: 🧹 Clear All .env files and load eas.json
        run: |
          find . -name '*.env*' -delete
          cat eas.json | jq -r '.build.preview.env | select(. != null) | to_entries | .[] | "\(.key)=\(.value)"' >> .env
        working-directory: apps/${{ matrix.project }}

      - name: Load Application Secrets
        id: filter-secrets
        shell: bash
        run: |
          echo "Filtering secrets with prefix 'EXPO_PUBLIC'"
          # Filter secrets with the prefix 'EXPO_PUBLIC' which are not necessarily real secrets
          # but include items such as API keys and configurations (e.g., Google API keys)
          # that we prefer not to commit directly into our GitHub repository.
          secrets=$(echo "$SECRETS_CONTEXT" | jq -r 'to_entries | map(select(.key | startswith("EXPO_PUBLIC"))) | .[] | "\(.key)=\(.value)"')

          # Write the filtered secrets to the .env file
          while IFS= read -r line; do
            echo "$line" >> .env
          done <<< "$secrets"
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        working-directory: apps/${{ matrix.project }}

      - name: Check fingerprint
        id: fingerprint
        uses: expo/expo-github-action/fingerprint@main
        with:
          working-directory: apps/${{ matrix.project }}

      - name: 🍏 Check for Existing Builds, Start New Builds if Needed, and Perform EAS Update
        if: github.ref != 'refs/heads/main'
        working-directory: apps/${{ matrix.project }}
        id: check_and_start_builds
        run: |
          # Extract the runtime version from the fingerprint output and write it to .env
          runtime_version=$(echo '${{ steps.fingerprint.outputs.current-fingerprint }}' | jq -r '.hash')
          echo "RUNTIME_VERSION=$runtime_version" >> .env

          # Define the platforms to check
          platforms=("android" "ios")
          slugs=()

          for platform in "${platforms[@]}"; do
            # Check for existing builds for the platform
            build_output=$(eas build:list --platform "$platform" \
              --status new --status in-progress --status finished \
              --buildProfile preview --runtimeVersion "$runtime_version" \
              --limit 1 --json --non-interactive 2>&1)

            echo $build_output
            # If no existing build, start a new build
            if [[ "$(echo "$build_output" | jq length)" -eq 0 ]]; then
              echo "No existing $platform build found for runtime version $runtime_version. Starting a new build."
              build_output=$(eas build --profile preview --platform "$platform" \
                --freeze-credentials --non-interactive --no-wait --json)
            else
              echo "$platform build found for runtime version $runtime_version."
            fi

            # Extract required fields from the build output JSON
            slug=$(echo "$build_output" | jq -r '.[0].project.slug')
            build_id=$(echo "$build_output" | jq -r '.[0].id')
            distribution=$(echo "$build_output" | jq -r '.[0].distribution')
            build_profile=$(echo "$build_output" | jq -r '.[0].buildProfile')
            runtime_version_from_build=$(echo "$build_output" | jq -r '.[0].runtimeVersion')
            app_version=$(echo "$build_output" | jq -r '.[0].appVersion')
            git_commit=$(echo "$build_output" | jq -r '.[0].gitCommitHash')
            build_link="https://expo.dev/accounts/better-angels/projects/${slug}/builds/${build_id}"

            echo "${platform}_build_id=$build_id" >> $GITHUB_OUTPUT
            echo "${platform}_build_link=$build_link" >> $GITHUB_OUTPUT
            echo "${platform}_distribution=$distribution" >> $GITHUB_OUTPUT
            echo "${platform}_build_profile=$build_profile" >> $GITHUB_OUTPUT
            echo "${platform}_runtime_version=$runtime_version_from_build" >> $GITHUB_OUTPUT
            echo "${platform}_app_version=$app_version" >> $GITHUB_OUTPUT
            echo "${platform}_git_commit=$git_commit" >> $GITHUB_OUTPUT

            slugs+=("$slug")
          done

          # Check if all slugs are the same
          unique_slugs=($(echo "${slugs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          if [ ${#unique_slugs[@]} -ne 1 ]; then
            echo "Error: Different slugs found for platforms: ${slugs[*]}"
            exit 1
          fi
          echo "slug=${unique_slugs[0]}" >> $GITHUB_OUTPUT

          # Perform EAS Update
          eas_update_output=$(eas update --non-interactive --auto --json)
          echo $eas_update_output

          # Extract update details
          for platform in "${platforms[@]}"; do
            update_info=$(echo "$eas_update_output" | jq -r ".[] | select(.platform == \"$platform\")")
            update_id=$(echo "$update_info" | jq -r '.id')
            branch=$(echo "$update_info" | jq -r '.branch')
            group_id=$(echo "$update_info" | jq -r '.group')
            update_commit=$(echo "$update_info" | jq -r '.gitCommitHash')
            update_qr_url="https://qr.expo.dev/eas-update?appScheme=${slug}&projectId=${{ steps.fingerprint.outputs.project_id }}&groupId=${group_id}"

            # Save each platform's update info to output
            echo "${platform}_update_id=$update_id" >> $GITHUB_OUTPUT
            echo "${platform}_branch=$branch" >> $GITHUB_OUTPUT
            echo "${platform}_group_id=$group_id" >> $GITHUB_OUTPUT
            echo "${platform}_update_qr_url=$update_qr_url" >> $GITHUB_OUTPUT
            echo "${platform}_update_commit=$update_commit" >> $GITHUB_OUTPUT
          done

      - name: 📝 Comment on PR
        if: github.event_name == 'pull_request'
        uses: edumserrano/find-create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '<!-- continuous-deploy-fingerprint-projectId:${{ steps.fingerprint.outputs.project_id }} -->'
          comment-author: 'github-actions[bot]'
          body: |
            <!-- continuous-deploy-fingerprint-projectId:${{ steps.fingerprint.outputs.project_id }} -->
            🚀 Expo continuous deployment is ready!

            - Project → **${{ matrix.project }}**
            - Platforms → **android**, **ios**
            - Scheme → **${{ steps.check_and_start_builds.outputs.slug }}**

            &nbsp; | 🤖 Android | 🍎 iOS
            --- | --- | ---
            Runtime Version | `${{ steps.check_and_start_builds.outputs.android_runtime_version }}` | `${{ steps.check_and_start_builds.outputs.ios_runtime_version }}`
            Build Details | [Build Permalink](${{ steps.check_and_start_builds.outputs.android_build_link }})<br /><details><summary>Details</summary>Distribution: `${{ steps.check_and_start_builds.outputs.android_distribution }}`<br />Build profile: `${{ steps.check_and_start_builds.outputs.android_build_profile }}`<br />Runtime version: `${{ steps.check_and_start_builds.outputs.android_runtime_version }}`<br />App version: `${{ steps.check_and_start_builds.outputs.android_app_version }}`<br />Git commit: `${{ steps.check_and_start_builds.outputs.android_git_commit }}`</details> | [Build Permalink](${{ steps.check_and_start_builds.outputs.ios_build_link }})<br /><details><summary>Details</summary>Distribution: `${{ steps.check_and_start_builds.outputs.ios_distribution }}`<br />Build profile: `${{ steps.check_and_start_builds.outputs.ios_build_profile }}`<br />Runtime version: `${{ steps.check_and_start_builds.outputs.ios_runtime_version }}`<br />App version: `${{ steps.check_and_start_builds.outputs.ios_app_version }}`<br />Git commit: `${{ steps.check_and_start_builds.outputs.ios_git_commit }}`</details>
            Update Details | [Update Permalink](${{ steps.check_and_start_builds.outputs.android_update_qr_url }})<br /><details><summary>Details</summary>Branch: `${{ steps.check_and_start_builds.outputs.android_branch }}`<br />Runtime version: `${{ steps.check_and_start_builds.outputs.android_runtime_version }}`<br />Git commit: `${{ steps.check_and_start_builds.outputs.android_update_commit }}`</details> | [Update Permalink](${{ steps.check_and_start_builds.outputs.ios_update_qr_url }})<br /><details><summary>Details</summary>Branch: `${{ steps.check_and_start_builds.outputs.ios_branch }}`<br />Runtime version: `${{ steps.check_and_start_builds.outputs.ios_runtime_version }}`<br />Git commit: `${{ steps.check_and_start_builds.outputs.ios_update_commit }}`</details>
            Update QR   | <a href="${{ steps.check_and_start_builds.outputs.android_update_qr_url }}"><img src="${{ steps.check_and_start_builds.outputs.android_update_qr_url }}" width="250px" height="250px" /></a> | <a href="${{ steps.check_and_start_builds.outputs.ios_update_qr_url }}"><img src="${{ steps.check_and_start_builds.outputs.ios_update_qr_url }}" width="250px" height="250px" /></a>
          edit-mode: replace

  #     - name: Set QR Code URLs and Commit Info
  #       id: set-urls
  #       run: |
  #         UPDATE_OUTPUT='${{ steps.continuous_deploy.outputs.update-output }}'

  #         IOS_UPDATE_ID=$(echo "${UPDATE_OUTPUT}" | jq -r '.[] | select(.platform == "ios") | .id')
  #         ANDROID_UPDATE_ID=$(echo "${UPDATE_OUTPUT}" | jq -r '.[] | select(.platform == "android") | .id')

  #         IOS_UPDATE_QR_URL="https://qr.expo.dev/eas-update?updateId=${IOS_UPDATE_ID}&appScheme=betterangels"
  #         ANDROID_UPDATE_QR_URL="https://qr.expo.dev/eas-update?updateId=${ANDROID_UPDATE_ID}&appScheme=betterangels"
  #         IOS_BUILD_QR_URL="https://expo.dev/accounts/better-angels/projects/betterangels/builds/${{ steps.continuous_deploy.outputs.ios-build-id }}"
  #         ANDROID_BUILD_QR_URL="https://expo.dev/accounts/better-angels/projects/betterangels/builds/${{ steps.continuous_deploy.outputs.android-build-id }}"

  #         COMMIT_ID=$(git rev-parse HEAD)
  #         COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" HEAD)

  #         {
  #           echo "ios_update_qr_url=${IOS_UPDATE_QR_URL}"
  #           echo "android_update_qr_url=${ANDROID_UPDATE_QR_URL}"
  #           echo "ios_build_qr_url=${IOS_BUILD_QR_URL}"
  #           echo "android_build_qr_url=${ANDROID_BUILD_QR_URL}"
  #           echo "commit_id=${COMMIT_ID}"
  #           echo "commit_message=${COMMIT_MESSAGE}"
  #         } >> $GITHUB_OUTPUT

  #     - name: Post to Slack
  #       uses: slackapi/slack-github-action@v1.27.0
  #       if: github.ref == 'refs/heads/main'
  #       with:
  #         payload: |
  #           {
  #             "channel": "#tech-outreach-main",
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "*New code has landed in main!* \n*Commit:* `${{ steps.set-urls.outputs.commit_id }}`\n*Message:* ${{ steps.set-urls.outputs.commit_message }}"
  #                 }
  #               },
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "*📱 iOS*\n\n<${{ steps.set-urls.outputs.ios_update_qr_url }}|Update>\n<${{ steps.set-urls.outputs.ios_build_qr_url }}|Build>"
  #                 }
  #               },
  #               {
  #                 "type": "divider"
  #               },
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "*🤖 Android*\n\n<${{ steps.set-urls.outputs.android_update_qr_url }}|Update>\n<${{ steps.set-urls.outputs.android_build_qr_url }}|Build>"
  #                 }
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  #     - name: 🧼 Cleanup .env file
  #       if: always()
  #       run: |
  #         rm -f .env
  #       working-directory: apps/${{ matrix.project }}

  # deploy:
  #   needs: prepare
  #   environment: production
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && needs.prepare.outputs.is_matrix_empty == 'false'
  #   concurrency: continuous-deploy-fingerprint-main
  #   env:
  #     APP_VARIANT: production
  #   strategy:
  #     matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
  #   permissions:
  #     # REQUIRED: Allow comments on PRs
  #     pull-requests: write # Allow comments on PRs
  #     # REQUIRED: Allow updating fingerprint in action caches
  #     actions: write
  #     # Following permissions are required for private repos
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: 🏗 Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         # https://github.com/expo/expo-github-action/issues/229
  #         ref: ${{ github.event.pull_request.head.ref }}

  #     - name: 🔧 Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.12.2
  #     - run: |
  #         corepack enable
  #     - name: Setup Yarn in Node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: 'yarn'

  #     - name: 🔧 Setup EAS
  #       uses: expo/expo-github-action@v8
  #       with:
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}

  #     - name: 📦 Install dependencies
  #       run: yarn install

  #     - name: 🧹 Clear All .env files and load eas.json
  #       run: |
  #         find . -name '*.env*' -delete
  #         cat eas.json | jq -r '.build.production.env | select(. != null) | to_entries | .[] | "\(.key)=\(.value)"' >> .env
  #       working-directory: apps/${{ matrix.project }}

  #     - name: Load Application Secrets
  #       id: filter-secrets
  #       shell: bash
  #       run: |
  #         echo "Filtering secrets with prefix 'EXPO_PUBLIC'"
  #         # Filter secrets with the prefix 'EXPO_PUBLIC' which are not necessarily real secrets
  #         # but include items such as API keys and configurations (e.g., Google API keys)
  #         # that we prefer not to commit directly into our GitHub repository.
  #         secrets=$(echo "$SECRETS_CONTEXT" | jq -r 'to_entries | map(select(.key | startswith("EXPO_PUBLIC"))) | .[] | "\(.key)=\(.value)"')

  #         # Write the filtered secrets to the .env file
  #         while IFS= read -r line; do
  #           echo "$line" >> .env
  #         done <<< "$secrets"
  #       env:
  #         SECRETS_CONTEXT: ${{ toJson(secrets) }}
  #       working-directory: apps/${{ matrix.project }}

  #     - name: 🚀 Continuously Deploy
  #       id: continuous_deploy
  #       uses: expo/expo-github-action/continuous-deploy-fingerprint@main
  #       with:
  #         profile: production
  #         branch: main
  #         working-directory: apps/${{ matrix.project }}

  #     - name: 🧼 Cleanup .env file
  #       if: always()
  #       run: |
  #         rm -f .env
  #       working-directory: apps/${{ matrix.project }}
