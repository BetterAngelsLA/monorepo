name: üì± FE App Deployment

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:
  # prepare:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üèó Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: üîÄ Track main if PR
  #       if: github.ref != 'refs/heads/main'
  #       run: git branch --track main origin/main

  #     - name: üîß Configure NX SHAs
  #       uses: nrwl/nx-set-shas@v4

  #     - name: üîß Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.12.2

  #     - run: corepack enable

  #     - name: Setup Yarn in Node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: 'yarn'

  #     - name: üì¶ Install dependencies
  #       run: yarn install

  #     - name: üß© Determine Affected Projects for eas-update
  #       id: set-matrix
  #       run: |
  #         # Get the list of affected projects with eas-update target
  #         affected_projects=$(yarn nx show projects --affected --exclude=shelter --withTarget eas-update)
  #         # Convert the list to a JSON matrix
  #         MATRIX_JSON=$(echo "$affected_projects" | jq -Rcs '
  #           split("\n") |
  #           map(select(. != "")) |
  #           if length == 0 then
  #               {}
  #           else
  #               {include: map({project: .})}
  #           end'
  #         )
  #         IS_MATRIX_EMPTY=$(echo "$MATRIX_JSON" | jq 'if .include | length == 0 then true else false end')
  #         echo "is_matrix_empty=$IS_MATRIX_EMPTY" >> $GITHUB_OUTPUT
  #         echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #     is_matrix_empty: ${{ steps.set-matrix.outputs.is_matrix_empty }}

  preview_build:
    # needs: prepare
    environment: preview
    runs-on: ubuntu-latest
    # if: needs.prepare.outputs.is_matrix_empty == 'false'
    strategy:
      # matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      matrix:
        project: [betterangels]
    steps:
      - name: üèó Check out repo
        uses: actions/checkout@v4

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - run: |
          corepack enable

      - name: Setup Yarn in Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      - name: üîß Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Install dependencies
        run: yarn install

      - name: Set up Secrets
        id: setup-secrets
        uses: ./.github/actions/expo-setup-secrets
        with:
          profile: preview
          project: ${{ matrix.project }}
          secrets: ${{ toJson(secrets) }}

      - name: Preview Build
        uses: ./.github/actions/expo-build
        id: preview_build
        with:
          profile: preview
          project: ${{ matrix.project }}
          runtime_version: ${{ steps.setup-secrets.outputs.runtime_version }}

      - name: Simulator Build
        uses: ./.github/actions/expo-build
        with:
          profile: development-simulator
          project: ${{ matrix.project }}
          platforms: ios
          runtime_version: ${{ steps.setup-secrets.outputs.runtime_version }}

      - name: Perform EAS Update
        uses: ./.github/actions/expo-update
        with:
          project: ${{ matrix.project }}
          branch: ${{ inputs.branch }}
          slug: ${{ steps.check_and_start_build.outputs.slug }}
          project_id: ${{ steps.preview_build.outputs.project_id }}

      - name: Delete .env file at end of job
        if: always()
        run: |
          rm -f .env
        shell: bash
        working-directory: apps/${{ inputs.project }}

      # - name: üìù Comment on PR
      #   if: github.event_name == 'pull_request'
      #   uses: edumserrano/find-create-or-update-comment@v1
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body-includes: '<!-- continuous-deploy-fingerprint-projectId:${{ steps.build_and_deploy.outputs.project_id }} -->'
      #     comment-author: 'github-actions[bot]'
      #     body: |
      #       <!-- continuous-deploy-fingerprint-projectId:${{ steps.build_and_deploy.outputs.project_id }} -->
      #       üöÄ Expo continuous deployment (Preview) is ready for **${{ matrix.project }}**!

      #       - Project ‚Üí **${{ matrix.project }}**
      #       - Environment ‚Üí **Preview**
      #       - Platforms ‚Üí **android**, **ios**
      #       - Scheme ‚Üí **${{ steps.build_and_deploy.outputs.slug }}**

      #       &nbsp; | ü§ñ Android | üçé iOS
      #       --- | --- | ---
      #       Runtime Version | `${{ steps.build_and_deploy.outputs.android_runtime_version }}` | `${{ steps.build_and_deploy.outputs.ios_runtime_version }}`
      #       Build Details | [Build Permalink](${{ steps.build_and_deploy.outputs.android_build_link }})<br /><details><summary>Details</summary>Distribution: `${{ steps.build_and_deploy.outputs.android_distribution }}`<br />Build profile: `${{ steps.build_and_deploy.outputs.android_build_profile }}`<br />Runtime version: `${{ steps.build_and_deploy.outputs.android_runtime_version }}`<br />App version: `${{ steps.build_and_deploy.outputs.android_app_version }}`<br />Git commit: `${{ steps.build_and_deploy.outputs.android_git_commit }}`</details> | [Build Permalink](${{ steps.build_and_deploy.outputs.ios_build_link }})<br /><details><summary>Details</summary>Distribution: `${{ steps.build_and_deploy.outputs.ios_distribution }}`<br />Build profile: `${{ steps.build_and_deploy.outputs.ios_build_profile }}`<br />Runtime version: `${{ steps.build_and_deploy.outputs.ios_runtime_version }}`<br />App version: `${{ steps.build_and_deploy.outputs.ios_app_version }}`<br />Git commit: `${{ steps.build_and_deploy.outputs.ios_git_commit }}`</details>
      #       Update Details | [Update Permalink](${{ steps.build_and_deploy.outputs.android_update_permalink }})<br /><details><summary>Details</summary>Branch: `${{ steps.build_and_deploy.outputs.android_branch }}`<br />Runtime version: `${{ steps.build_and_deploy.outputs.android_runtime_version }}`<br />Git commit: `${{ steps.build_and_deploy.outputs.android_update_commit }}`</details> | [Update Permalink](${{ steps.build_and_deploy.outputs.ios_update_permalink }})<br /><details><summary>Details</summary>Branch: `${{ steps.build_and_deploy.outputs.ios_branch }}`<br />Runtime version: `${{ steps.build_and_deploy.outputs.ios_runtime_version }}`<br />Git commit: `${{ steps.build_and_deploy.outputs.ios_update_commit }}`</details>
      #       Update QR   | <a href="${{ steps.build_and_deploy.outputs.android_update_qr_url }}"><img src="${{ steps.build_and_deploy.outputs.android_update_qr_url }}" width="250px" height="250px" /></a> | <a href="${{ steps.build_and_deploy.outputs.ios_update_qr_url }}"><img src="${{ steps.build_and_deploy.outputs.ios_update_qr_url }}" width="250px" height="250px" /></a>
      #     edit-mode: replace

      # - name: Post to Slack (Preview)
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   uses: slackapi/slack-github-action@v1.27.0
      #   with:
      #     payload: |
      #       {
      #         "channel": "#tech-outreach-main",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*New preview code has landed in main for project ${{ matrix.project }}!* \n*Commit:* `${{ steps.build_and_deploy.outputs.commit_id }}`\n*Message:* ${{ steps.build_and_deploy.outputs.commit_message }}"
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*üì± iOS (Preview)*\n\n<${{ steps.build_and_deploy.outputs.ios_update_qr_url }}|Update>\n<${{ steps.build_and_deploy.outputs.ios_build_link }}|Build>"
      #             }
      #           },
      #           {
      #             "type": "divider"
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*ü§ñ Android (Preview)*\n\n<${{ steps.build_and_deploy.outputs.android_update_qr_url }}|Update>\n<${{ steps.build_and_deploy.outputs.android_build_link }}|Build>"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # production_build:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   if: needs.prepare.outputs.is_matrix_empty == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   strategy:
  #     matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
  #   steps:
  #     - name: üèó Check out repo
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Build and Deploy (Production)
  #       uses: ./.github/actions/build_and_deploy
  #       with:
  #         environment: 'production'
  #         project: ${{ matrix.project }}
  #         branch: 'main'
  #         expo-token: ${{ secrets.EXPO_TOKEN }}
  #         expo-apple-app-specific-password: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}
  #       id: build_and_deploy
