name: üì± FE App Deployment

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      actions: read # Required to find the last successful workflow run
      contents: read # Required for actions/checkout
    steps:
      - name: üèó Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Checks out all branches and tags. Maybe we can make this better in the future?

      # This line is needed for nx affected to work when CI is running on a PR
      - name: üîÄ Track main if PR
        if: github.ref != 'refs/heads/main'
        run: git branch --track main origin/main

      - name: üîß Configure NX SHAs
        uses: nrwl/nx-set-shas@v4

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - run: |
          corepack enable
      - name: Setup Yarn in Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      - name: üì¶ Install dependencies
        run: yarn install

      - name: üß© Determine Affected Projects for eas-update
        id: set-matrix
        run: |
          # Get the list of affected projects with eas-update target
          affected_projects=$(yarn nx show projects --affected --exclude=shelter --withTarget eas-update)
          # Convert the list to a JSON matrix
          MATRIX_JSON=$(echo "$affected_projects" | jq -Rcs '
            split("\n") |
            map(select(. != "")) |
            if length == 0 then
                {}
            else
                {include: map({project: .})}
            end'
          )
          IS_MATRIX_EMPTY=$(echo "$MATRIX_JSON" | jq 'if .include | length == 0 then true else false end')
          echo "is_matrix_empty=$IS_MATRIX_EMPTY" >> $GITHUB_OUTPUT
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      is_matrix_empty: ${{ steps.set-matrix.outputs.is_matrix_empty }}

  preview:
    needs: prepare
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.is_matrix_empty == 'false'
    concurrency: continuous-deploy-fingerprint-${{ github.event_name != 'pull_request' && 'main' || github.run_id }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    permissions:
      # REQUIRED: Allow comments of PRs
      pull-requests: write # Allow comments on PRs
      # REQUIRED: Allow updating fingerprint in acton caches
      actions: write
      # Following permissions are required for private repos
      contents: read
      packages: write
    steps:
      - name: üèó Check out repo
        uses: actions/checkout@v4
        with:
          # https://github.com/expo/expo-github-action/issues/229
          ref: ${{ github.event.pull_request.head.ref }}

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - run: |
          corepack enable
      - name: Setup Yarn in Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      - name: üîß Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: 9.2.0
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Install dependencies
        run: yarn install

      - name: üîç Determine Channel Config
        # When not in production we use the preview eas.json config.
        # This will not necessarily map to the actual deployed channel.
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "CHANNEL_CONFIG=production" >> $GITHUB_ENV
          else
            echo "CHANNEL_CONFIG=preview" >> $GITHUB_ENV
          fi

      - name: üßπ Clear All .env files and load eas.json
        run: |
          find . -name '*.env*' -delete
          cat eas.json | jq -r '.build.${{ env.CHANNEL_CONFIG }}.env | select(. != null) | to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        working-directory: apps/${{ matrix.project }}

      - name: üöÄ Continuously Deploy
        id: continuos_deploy
        uses: expo/expo-github-action/continuous-deploy-fingerprint@main
        with:
          profile: ${{  env.CHANNEL_CONFIG }}
          branch: ${{ github.event.pull_request.head.ref }}
          working-directory: apps/${{ matrix.project }}

      - name: üçè Apple Simulator Build
        if: github.ref != 'refs/heads/main'
        working-directory: apps/${{ matrix.project }}
        run: |
          build_list_output=$(eas build:list --platform ios --status finished --buildProfile development-simulator --runtimeVersion ${{ steps.continuos_deploy.outputs.ios-fingerprint }} --limit 1 --json --non-interactive)
          if [ -z "$build_list_output" ]; then
            eas build --profile development-simulator --platform ios
          fi
          else
            echo "A simulator was already found for ${{ steps.continuos_deploy.outputs.ios-fingerprint }}."
          fi
