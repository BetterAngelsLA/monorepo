name: 'Build and Deploy'
description: 'Build and deploy the project'

inputs:
  environment:
    required: true
    type: string
  project:
    required: true
    type: string
  branch:
    required: true
    type: string
  expo-token:
    required: true
    type: string

outputs:
  android_build_id:
    description: 'Android build ID for tracking the build.'
  android_build_link:
    description: 'Link to the Android build.'
  android_distribution:
    description: 'Distribution channel for the Android build.'
  android_build_profile:
    description: 'Build profile used for Android.'
  android_runtime_version:
    description: 'Runtime version for Android.'
  android_app_version:
    description: 'App version for Android.'
  android_git_commit:
    description: 'Git commit hash for the Android build.'
  android_branch:
    description: 'Branch name for the Android update.'
  android_update_id:
    description: 'Update ID for the Android app.'
  android_group_id:
    description: 'Group ID for Android update.'
  android_update_permalink:
    description: 'Permalink for the Android update.'
  android_update_qr_url:
    description: 'QR URL for Android update download.'
  android_update_commit:
    description: 'Commit hash for Android update.'
  ios_build_id:
    description: 'iOS build ID for tracking the build.'
  ios_build_link:
    description: 'Link to the iOS build.'
  ios_distribution:
    description: 'Distribution channel for the iOS build.'
  ios_build_profile:
    description: 'Build profile used for iOS.'
  ios_runtime_version:
    description: 'Runtime version for iOS.'
  ios_app_version:
    description: 'App version for iOS.'
  ios_git_commit:
    description: 'Git commit hash for the iOS build.'
  ios_branch:
    description: 'Branch name for the iOS update.'
  ios_update_id:
    description: 'Update ID for the iOS app.'
  ios_group_id:
    description: 'Group ID for iOS update.'
  ios_update_permalink:
    description: 'Permalink for the iOS update.'
  ios_update_qr_url:
    description: 'QR URL for iOS update download.'
  ios_update_commit:
    description: 'Commit hash for iOS update.'
  slug:
    description: 'Project slug for Expo tracking.'
  project_id:
    description: 'Project ID for tracking purposes.'
  commit_id:
    description: 'Git commit ID of the current build.'
  commit_message:
    description: 'Commit message for the current build.'

runs:
  using: 'composite'
  steps:
    - name: 🔧 Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.12.2

    - run: corepack enable
      shell: bash

    - name: Setup Yarn in Node
      uses: actions/setup-node@v4
      with:
        cache: 'yarn'

    - name: 🔧 Setup EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ inputs.expo-token }}

    - name: 📦 Install dependencies
      run: yarn install
      shell: bash

    - name: 🧹 Clear All .env files and load eas.json
      run: |
        find . -name '*.env*' -delete
        cat eas.json | jq -r '.build["'"${{ inputs.environment }}"'"].env | select(. != null) | to_entries | .[] | "\(.key)=\(.value)"' >> .env
      working-directory: apps/${{ inputs.project }}
      shell: bash

    - name: Load Application Secrets
      id: filter-secrets
      shell: bash
      run: |
        echo "Loading secrets prefixed with 'EXPO_PUBLIC_'"
        for var in $(printenv | grep '^EXPO_PUBLIC_'); do
          echo "$var" >> .env
        done
      working-directory: apps/${{ inputs.project }}

    - name: Check fingerprint
      id: fingerprint
      uses: expo/expo-github-action/fingerprint@main
      with:
        working-directory: apps/${{ inputs.project }}

    - name: Set Commit Info
      id: set_commit_info
      run: |
        COMMIT_ID=$(git rev-parse HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" HEAD)
        echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
        echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
      shell: bash

    - name: 🍏 Check for Existing Builds, Start New Builds if Needed, and Perform EAS Update
      id: check_and_start_builds
      run: |
        set -x
        if [ "${{ inputs.environment }}" == "preview" ]; then
          PROFILE="preview"
        else
          PROFILE="production"
        fi

        BRANCH="${{ inputs.branch }}"

        runtime_version="${{ steps.fingerprint.outputs.current-fingerprint }}"
        RUNTIME_VERSION=$(echo "$runtime_version" | jq -r '.hash') || {
          echo "Failed to parse runtime version"
          exit 1
        }

        echo "RUNTIME_VERSION=$RUNTIME_VERSION" >> .env
        echo "Runtime version set to $RUNTIME_VERSION"
        platforms=("android" "ios")
        slugs=()
        project_ids=()

        for platform in "${platforms[@]}"; do
          build_output=$(eas build:list --platform "$platform" \
            --status new --status in-progress --status finished \
            --buildProfile "$PROFILE" --runtimeVersion "$runtime_version" \
            --limit 1 --json --non-interactive 2>&1)

          echo $build_output

          if [[ "$(echo "$build_output" | jq length)" -eq 0 ]]; then
            echo "No existing $platform build found for runtime version $runtime_version. Starting a new build."
            build_output=$(eas build --profile "$PROFILE" --platform "$platform" \
              --freeze-credentials --non-interactive --no-wait --json)
          else
            echo "$platform build found for runtime version $runtime_version."
          fi

          # Handle both array and single object response
          if [[ "$(echo "$build_output" | jq 'type')" == "array" ]]; then
            build_info=$(echo "$build_output" | jq '.[0]')
          else
            build_info="$build_output"
          fi

          slug=$(echo "$build_info" | jq -r '.project.slug')
          project_id=$(echo "$build_info" | jq -r '.project.id')
          build_id=$(echo "$build_info" | jq -r '.id')
          distribution=$(echo "$build_info" | jq -r '.distribution')
          build_profile=$(echo "$build_info" | jq -r '.buildProfile')
          runtime_version_from_build=$(echo "$build_info" | jq -r '.runtimeVersion')
          app_version=$(echo "$build_info" | jq -r '.appVersion')
          git_commit=$(echo "$build_info" | jq -r '.gitCommitHash')
          build_link="https://expo.dev/accounts/better-angels/projects/${slug}/builds/${build_id}"

          echo "${platform}_build_id=$build_id" >> $GITHUB_OUTPUT
          echo "${platform}_build_link=$build_link" >> $GITHUB_OUTPUT
          echo "${platform}_distribution=$distribution" >> $GITHUB_OUTPUT
          echo "${platform}_build_profile=$build_profile" >> $GITHUB_OUTPUT
          echo "${platform}_runtime_version=$runtime_version_from_build" >> $GITHUB_OUTPUT
          echo "${platform}_app_version=$app_version" >> $GITHUB_OUTPUT
          echo "${platform}_git_commit=$git_commit" >> $GITHUB_OUTPUT

          slugs+=("$slug")
          project_ids+=("$project_id")
        done

        unique_slugs=($(echo "${slugs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
        unique_project_ids=($(echo "${project_ids[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        if [ ${#unique_slugs[@]} -ne 1 ]; then
          echo "Error: Different slugs found for platforms: ${slugs[*]}"
          exit 1
        fi

        if [ ${#unique_project_ids[@]} -ne 1 ]; then
          echo "Error: Different project IDs found for platforms: ${project_ids[*]}"
          exit 1
        fi

        echo "slug=${unique_slugs[0]}" >> $GITHUB_OUTPUT
        echo "project_id=${unique_project_ids[0]}" >> $GITHUB_OUTPUT

        eas_update_output=$(eas update --branch $BRANCH --non-interactive --auto --json)
        echo $eas_update_output

        for platform in "${platforms[@]}"; do
          update_info=$(echo "$eas_update_output" | jq -r ".[] | select(.platform == \"$platform\")")
          update_id=$(echo "$update_info" | jq -r '.id')
          branch=$(echo "$update_info" | jq -r '.branch')
          group_id=$(echo "$update_info" | jq -r '.group')
          update_commit=$(echo "$update_info" | jq -r '.gitCommitHash')
          update_permalink="https://expo.dev/projects/${unique_project_ids[0]}/updates/${update_id}"
          update_qr_url="https://qr.expo.dev/eas-update?appScheme=${slug}&projectId=${unique_project_ids[0]}&groupId=${group_id}"

          echo "${platform}_update_id=$update_id" >> $GITHUB_OUTPUT
          echo "${platform}_branch=$branch" >> $GITHUB_OUTPUT
          echo "${platform}_group_id=$group_id" >> $GITHUB_OUTPUT
          echo "${platform}_update_permalink=$update_permalink" >> $GITHUB_OUTPUT
          echo "${platform}_update_qr_url=$update_qr_url" >> $GITHUB_OUTPUT
          echo "${platform}_update_commit=$update_commit" >> $GITHUB_OUTPUT
        done
      shell: bash
