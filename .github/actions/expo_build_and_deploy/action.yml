name: 'Build and Deploy'
description: 'Build and deploy the project'

inputs:
  environment:
    required: true
    type: string
  project:
    required: true
    type: string
  branch:
    required: true
    type: string
  expo-token:
    required: true
    type: string

outputs:
  android_build_id:
    description: 'Android build ID for tracking the build.'
  android_build_link:
    description: 'Link to the Android build.'
  android_distribution:
    description: 'Distribution channel for the Android build.'
  android_build_profile:
    description: 'Build profile used for Android.'
  android_runtime_version:
    description: 'Runtime version for Android.'
  android_app_version:
    description: 'App version for Android.'
  android_git_commit:
    description: 'Git commit hash for the Android build.'
  android_branch:
    description: 'Branch name for the Android update.'
  android_update_id:
    description: 'Update ID for the Android app.'
  android_group_id:
    description: 'Group ID for Android update.'
  android_update_permalink:
    description: 'Permalink for the Android update.'
  android_update_qr_url:
    description: 'QR URL for Android update download.'
  android_update_commit:
    description: 'Commit hash for Android update.'
  ios_build_id:
    description: 'iOS build ID for tracking the build.'
  ios_build_link:
    description: 'Link to the iOS build.'
  ios_distribution:
    description: 'Distribution channel for the iOS build.'
  ios_build_profile:
    description: 'Build profile used for iOS.'
  ios_runtime_version:
    description: 'Runtime version for iOS.'
  ios_app_version:
    description: 'App version for iOS.'
  ios_git_commit:
    description: 'Git commit hash for the iOS build.'
  ios_branch:
    description: 'Branch name for the iOS update.'
  ios_update_id:
    description: 'Update ID for the iOS app.'
  ios_group_id:
    description: 'Group ID for iOS update.'
  ios_update_permalink:
    description: 'Permalink for the iOS update.'
  ios_update_qr_url:
    description: 'QR URL for iOS update download.'
  ios_update_commit:
    description: 'Commit hash for iOS update.'
  slug:
    description: 'Project slug for Expo tracking.'
  project_id:
    description: 'Project ID for tracking purposes.'
  commit_id:
    description: 'Git commit ID of the current build.'
  commit_message:
    description: 'Commit message for the current build.'

runs:
  using: 'composite'
  steps:
    - name: 🔧 Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.12.2

    - run: corepack enable

    - name: Setup Yarn in Node
      uses: actions/setup-node@v4
      with:
        cache: 'yarn'

    - name: 🔧 Setup EAS
      uses: expo/expo-github-action@v8
      with:
        eas-version: latest
        token: ${{ inputs.expo-token }}

    - name: 📦 Install dependencies
      run: yarn install

    - name: 🧹 Clear All .env files and load eas.json
      run: |
        find . -name '*.env*' -delete
        cat eas.json | jq -r '.build["'"${{ inputs.environment }}"'"].env | select(. != null) | to_entries | .[] | "\(.key)=\(.value)"' >> .env
      working-directory: apps/${{ inputs.project }}

    - name: Load Application Secrets
      id: filter-secrets
      shell: bash
      run: |
        echo "Filtering secrets with prefix 'EXPO_PUBLIC'"
        secrets=$(echo "$SECRETS_CONTEXT" | jq -r 'to_entries | map(select(.key | startswith("EXPO_PUBLIC"))) | .[] | "\(.key)=\(.value)"')

        while IFS= read -r line; do
          echo "$line" >> .env
        done <<< "$secrets"
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
      working-directory: apps/${{ inputs.project }}

    - name: Check fingerprint
      id: fingerprint
      uses: expo/expo-github-action/fingerprint@main
      with:
        working-directory: apps/${{ inputs.project }}

    - name: Set Commit Info
      id: set_commit_info
      run: |
        COMMIT_ID=$(git rev-parse HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" HEAD)
        echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
        echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

    - name: 🍏 Check for Existing Builds, Start New Builds if Needed, and Perform EAS Update
      id: check_and_start_builds
      run: |
        # existing script
      working-directory: apps/${{ inputs.project }}

    - name: Set Outputs
      id: set_outputs
      run: |
        echo "android_build_id=${{ steps.check_and_start_builds.outputs.android_build_id }}" >> $GITHUB_OUTPUT
        echo "android_build_link=${{ steps.check_and_start_builds.outputs.android_build_link }}" >> $GITHUB_OUTPUT
        echo "android_distribution=${{ steps.check_and_start_builds.outputs.android_distribution }}" >> $GITHUB_OUTPUT
        echo "android_build_profile=${{ steps.check_and_start_builds.outputs.android_build_profile }}" >> $GITHUB_OUTPUT
        echo "android_runtime_version=${{ steps.check_and_start_builds.outputs.android_runtime_version }}" >> $GITHUB_OUTPUT
        echo "android_app_version=${{ steps.check_and_start_builds.outputs.android_app_version }}" >> $GITHUB_OUTPUT
        echo "android_git_commit=${{ steps.check_and_start_builds.outputs.android_git_commit }}" >> $GITHUB_OUTPUT
        echo "android_branch=${{ steps.check_and_start_builds.outputs.android_branch }}" >> $GITHUB_OUTPUT
        echo "android_update_id=${{ steps.check_and_start_builds.outputs.android_update_id }}" >> $GITHUB_OUTPUT
        echo "android_group_id=${{ steps.check_and_start_builds.outputs.android_group_id }}" >> $GITHUB_OUTPUT
        echo "android_update_permalink=${{ steps.check_and_start_builds.outputs.android_update_permalink }}" >> $GITHUB_OUTPUT
        echo "android_update_qr_url=${{ steps.check_and_start_builds.outputs.android_update_qr_url }}" >> $GITHUB_OUTPUT
        echo "android_update_commit=${{ steps.check_and_start_builds.outputs.android_update_commit }}" >> $GITHUB_OUTPUT
        echo "ios_build_id=${{ steps.check_and_start_builds.outputs.ios_build_id }}" >> $GITHUB_OUTPUT
        echo "ios_build_link=${{ steps.check_and_start_builds.outputs.ios_build_link }}" >> $GITHUB_OUTPUT
        echo "ios_distribution=${{ steps.check_and_start_builds.outputs.ios_distribution }}" >> $GITHUB_OUTPUT
        echo "ios_build_profile=${{ steps.check_and_start_builds.outputs.ios_build_profile }}" >> $GITHUB_OUTPUT
        echo "ios_runtime_version=${{ steps.check_and_start_builds.outputs.ios_runtime_version }}" >> $GITHUB_OUTPUT
        echo "ios_app_version=${{ steps.check_and_start_builds.outputs.ios_app_version }}" >> $GITHUB_OUTPUT
        echo "ios_git_commit=${{ steps.check_and_start_builds.outputs.ios_git_commit }}" >> $GITHUB_OUTPUT
        echo "ios_branch=${{ steps.check_and_start_builds.outputs.ios_branch }}" >> $GITHUB_OUTPUT
        echo "ios_update_id=${{ steps.check_and_start_builds.outputs.ios_update_id }}" >> $GITHUB_OUTPUT
        echo "ios_group_id=${{ steps.check_and_start_builds.outputs.ios_group_id }}" >> $GITHUB_OUTPUT
        echo "ios_update_permalink=${{ steps.check_and_start_builds.outputs.ios_update_permalink }}" >> $GITHUB_OUTPUT
        echo "ios_update_qr_url=${{ steps.check_and_start_builds.outputs.ios_update_qr_url }}" >> $GITHUB_OUTPUT
        echo "ios_update_commit=${{ steps.check_and_start_builds.outputs.ios_update_commit }}" >> $GITHUB_OUTPUT
        echo "slug=${{ steps.check_and_start_builds.outputs.slug }}" >> $GITHUB_OUTPUT
        echo "project_id=${{ steps.check_and_start_builds.outputs.project_id }}" >> $GITHUB_OUTPUT
        echo "commit_id=${{ steps.set_commit_info.outputs.commit_id }}" >> $GITHUB_OUTPUT
        echo "commit_message=${{ steps.set_commit_info.outputs.commit_message }}" >> $GITHUB_OUTPUT

    - name: 🧼 Cleanup .env file
      if: always()
      run: rm -f .env
      working-directory: apps/${{ inputs.project }}
