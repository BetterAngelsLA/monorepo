diff --git a/apps/betterangels-backend/accounts/schema.py b/apps/betterangels-backend/accounts/schema.py
index f6ab663a..423d1ffa 100644
--- a/apps/betterangels-backend/accounts/schema.py
+++ b/apps/betterangels-backend/accounts/schema.py
@@ -8,12 +8,14 @@ from accounts.services import send_magic_link
 from common.graphql.types import DeletedObjectType
 from common.permissions.utils import IsAuthenticated
 from django.db import transaction
+from django.db.models import QuerySet
 from notes.permissions import NotePermissions
 from organizations.models import Organization
 from strawberry.types import Info
 from strawberry_django import auth
 from strawberry_django.auth.utils import get_current_user
 from strawberry_django.mutations import resolvers
+from strawberry_django.pagination import OffsetPaginated
 from strawberry_django.permissions import HasPerm
 from strawberry_django.utils.requests import get_request
 
@@ -33,9 +35,12 @@ from .types import (
 class Query:
     current_user: UserType = auth.current_user()  # type: ignore
 
-    @strawberry.field(extensions=[HasPerm(NotePermissions.ADD)])
-    def available_organizations(self, info: Info) -> list[OrganizationType]:
-        return list(Organization.objects.filter(permission_groups__name__icontains=GroupTemplateNames.CASEWORKER))
+    @strawberry_django.offset_paginated(OffsetPaginated[OrganizationType], extensions=[HasPerm(NotePermissions.ADD)])
+    def caseworker_organizations(self) -> QuerySet[Organization]:
+        queryset: QuerySet[Organization] = Organization.objects.filter(
+            permission_groups__name__icontains=GroupTemplateNames.CASEWORKER
+        )
+        return queryset
 
 
 @strawberry.type
diff --git a/apps/betterangels-backend/accounts/tests/test_queries.py b/apps/betterangels-backend/accounts/tests/test_queries.py
index c37eefca..e80281fd 100644
--- a/apps/betterangels-backend/accounts/tests/test_queries.py
+++ b/apps/betterangels-backend/accounts/tests/test_queries.py
@@ -5,7 +5,6 @@ from django.test import ignore_warnings
 from model_bakery import baker
 from organizations.models import Organization, OrganizationUser
 from unittest_parametrize import ParametrizedTestCase, parametrize
-
 from .baker_recipes import organization_recipe, permission_group_recipe
 
 
@@ -137,26 +136,34 @@ class CurrentUserGraphQLTests(GraphQLBaseTestCase, ParametrizedTestCase):
         self.assertCountEqual(response["data"]["currentUser"]["organizations"], expected_organizations)
 
 
-class AvailableOrganizationGraphQLTests(GraphQLBaseTestCase):
-    def test_available_organizations_query(self) -> None:
+class OrganizationQueryTestCase(GraphQLBaseTestCase):
+    def test_caseworker_organizations_query(self) -> None:
         self.graphql_client.force_login(self.org_1_case_manager_1)
 
         # This recipe creates an organization in the process. Including this here because even though
         # Caseworker orgs are created elsewhere in the test suite, this test should be self-contained.
         permission_group_recipe.make(name="Caseworker")
 
-        expected_organization_count = Organization.objects.filter(
-            permission_groups__name__icontains=GroupTemplateNames.CASEWORKER
-        ).count()
-
         query = """
-            query {
-                availableOrganizations {
-                    id
-                    name
+            query CaseworkerOrganizations($pagination: OffsetPaginationInput) {
+                caseworkerOrganizations(pagination: $pagination) {
+                    totalCount
+                    results {
+                        id
+                        name
+                    }
+                    pageInfo {
+                        offset
+                        limit
+                    }
                 }
             }
         """
+        variables = {"pagination": {"offset": 0, "limit": 10}}
+        response = self.execute_graphql(query, variables=variables)
 
-        response = self.execute_graphql(query)
-        self.assertEqual(len(response["data"]["availableOrganizations"]), expected_organization_count)
+        caseworker_organizations = response["data"]["caseworkerOrganizations"]["results"]
+        expected_caseworker_organizations = Organization.objects.filter(permission_group__name__icontains=GroupTemplateNames.CASEWORKER).oder_by('name').values('id', 'name')
+        actual_caseworker_organizations = [{"id": int(cw_org["id"]), "name": cw_org["name"]} for cw_org in caseworker_organizations]
+
+        self.assertEqual(expected_caseworker_organizations, actual_caseworker_organizations)
diff --git a/apps/betterangels-backend/accounts/types.py b/apps/betterangels-backend/accounts/types.py
index b3a7e096..7b90dabb 100644
--- a/apps/betterangels-backend/accounts/types.py
+++ b/apps/betterangels-backend/accounts/types.py
@@ -27,7 +27,13 @@ class LoginInput:
     password: str
 
 
-@strawberry_django.type(Organization)
+@strawberry_django.ordering.order(Organization)
+class OrganizationOrder:
+    name: auto
+    id: auto
+
+
+@strawberry_django.type(Organization, order=OrganizationOrder)  # type ignore
 class OrganizationType:
     id: ID
     name: auto
diff --git a/apps/betterangels-backend/clients/tests/test_permissions.py b/apps/betterangels-backend/clients/tests/test_permissions.py
index 16feac2a..3d70ef1c 100644
--- a/apps/betterangels-backend/clients/tests/test_permissions.py
+++ b/apps/betterangels-backend/clients/tests/test_permissions.py
@@ -298,7 +298,7 @@ class OrganizationPermissionTestCase(GraphQLBaseTestCase):
             (None, False),  # Anonymous user should not succeed
         ],
     )
-    def test_view_available_organizations_permission(self, user_label: str, should_succeed: bool) -> None:
+    def test_view_caseworker_organizations_permission(self, user_label: str, should_succeed: bool) -> None:
         self._handle_user_login(user_label)
 
         # This recipe creates an organization in the process. Including this here because even though
@@ -306,16 +306,24 @@ class OrganizationPermissionTestCase(GraphQLBaseTestCase):
         permission_group_recipe.make(name="Caseworker")
 
         query = """
-            query {
-                availableOrganizations {
-                    id
-                    name
+            query CaseworkerOrganizations($pagination: OffsetPaginationInput) {
+                caseworkerOrganizations(pagination: $pagination) {
+                    totalCount
+                    results {
+                        id
+                        name
+                    }
+                    pageInfo {
+                        offset
+                        limit
+                    }
                 }
             }
         """
-        response = self.execute_graphql(query)
+        variables = {"pagination": {"offset": 0, "limit": 10}}
+        response = self.execute_graphql(query, variables=variables)
 
         if should_succeed:
-            self.assertTrue(len(response["data"]["availableOrganizations"]) > 0)
+            self.assertTrue(len(response["data"]["caseworkerOrganizations"]["results"]) > 0)
         else:
-            self.assertTrue(len(response["data"]["availableOrganizations"]) == 0)
+            self.assertTrue(len(response["data"]["caseworkerOrganizations"]["results"]) == 0)
