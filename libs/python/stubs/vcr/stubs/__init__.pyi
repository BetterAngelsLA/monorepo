from . import compat as compat
from _typeshed import Incomplete
from collections.abc import Generator
from http.client import HTTPResponse
from vcr.errors import CannotOverwriteExistingCassetteException as CannotOverwriteExistingCassetteException
from vcr.request import Request as Request

log: Incomplete

class VCRFakeSocket:
    def close(self) -> None: ...
    def settimeout(self, *args, **kwargs) -> None: ...
    def fileno(self): ...

def parse_headers(header_list): ...
def serialize_headers(response): ...

class VCRHTTPResponse(HTTPResponse):
    fp: Incomplete
    recorded_response: Incomplete
    reason: Incomplete
    status: Incomplete
    version: Incomplete
    headers: Incomplete
    length: Incomplete
    def __init__(self, recorded_response) -> None: ...
    @property
    def closed(self): ...
    def read(self, *args, **kwargs): ...
    def read1(self, *args, **kwargs): ...
    def readall(self): ...
    def readinto(self, *args, **kwargs): ...
    def readline(self, *args, **kwargs): ...
    def readlines(self, *args, **kwargs): ...
    def seekable(self): ...
    def tell(self): ...
    def isatty(self): ...
    def seek(self, *args, **kwargs): ...
    def close(self): ...
    def getcode(self): ...
    def isclosed(self): ...
    def info(self): ...
    def getheaders(self): ...
    def getheader(self, header, default: Incomplete | None = ...): ...
    def readable(self): ...
    @property
    def length_remaining(self): ...
    def get_redirect_location(self): ...
    @property
    def data(self): ...
    def drain_conn(self) -> None: ...
    def stream(self, amt: int = ..., decode_content: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...

class VCRConnection:
    cassette: Incomplete
    def request(self, method, url, body: Incomplete | None = ..., headers: Incomplete | None = ..., *args, **kwargs) -> None: ...
    def putrequest(self, method, url, *args, **kwargs) -> None: ...
    def putheader(self, header, *values) -> None: ...
    def send(self, data) -> None: ...
    def close(self) -> None: ...
    def endheaders(self, message_body: Incomplete | None = ...) -> None: ...
    def getresponse(self, _: bool = ..., **kwargs): ...
    def set_debuglevel(self, *args, **kwargs) -> None: ...
    def connect(self, *args, **kwargs): ...
    @property
    def sock(self): ...
    real_connection: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __getattr__(self, name): ...

class VCRHTTPConnection(VCRConnection): ...

class VCRHTTPSConnection(VCRConnection):
    is_verified: bool
