from ._handle_coroutine import handle_coroutine as handle_coroutine
from .errors import UnhandledHTTPRequestError as UnhandledHTTPRequestError
from .matchers import get_matchers_results as get_matchers_results, method as method, requests_match as requests_match, uri as uri
from .patch import CassettePatcherBuilder as CassettePatcherBuilder
from .persisters.filesystem import CassetteDecodeError as CassetteDecodeError, CassetteNotFoundError as CassetteNotFoundError, FilesystemPersister as FilesystemPersister
from .record_mode import RecordMode as RecordMode
from .serializers import yamlserializer as yamlserializer
from .util import partition_dict as partition_dict
from _typeshed import Incomplete

log: Incomplete

class CassetteContextDecorator:
    @classmethod
    def from_args(cls, cassette_class, **kwargs): ...
    cls: Incomplete
    def __init__(self, cls, args_getter) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info) -> None: ...
    def __call__(self, function, instance, args, kwargs): ...
    @staticmethod
    def get_function_name(function): ...

class Cassette:
    @classmethod
    def load(cls, **kwargs): ...
    @classmethod
    def use_arg_getter(cls, arg_getter): ...
    @classmethod
    def use(cls, **kwargs): ...
    inject: Incomplete
    record_mode: Incomplete
    custom_patches: Incomplete
    allow_playback_repeats: Incomplete
    data: Incomplete
    play_counts: Incomplete
    dirty: bool
    rewound: bool
    def __init__(self, path, serializer: Incomplete | None = ..., persister: Incomplete | None = ..., record_mode=..., match_on=..., before_record_request: Incomplete | None = ..., before_record_response: Incomplete | None = ..., custom_patches=..., inject: bool = ..., allow_playback_repeats: bool = ...) -> None: ...
    @property
    def play_count(self): ...
    @property
    def all_played(self): ...
    @property
    def requests(self): ...
    @property
    def responses(self): ...
    @property
    def write_protected(self): ...
    def append(self, request, response) -> None: ...
    def filter_request(self, request): ...
    def can_play_response_for(self, request): ...
    def play_response(self, request): ...
    def responses_of(self, request): ...
    def rewind(self) -> None: ...
    def find_requests_with_most_matches(self, request): ...
    def __len__(self) -> int: ...
    def __contains__(self, request) -> bool: ...
