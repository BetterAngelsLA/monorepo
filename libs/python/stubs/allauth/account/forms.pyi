from . import app_settings as app_settings
from ..utils import build_absolute_uri as build_absolute_uri, get_username_max_length as get_username_max_length, set_form_field_order as set_form_field_order
from .adapter import get_adapter as get_adapter
from .app_settings import AuthenticationMethod as AuthenticationMethod
from .models import EmailAddress as EmailAddress
from .utils import filter_users_by_email as filter_users_by_email, get_user_model as get_user_model, perform_login as perform_login, setup_user_email as setup_user_email, sync_user_email_addresses as sync_user_email_addresses, url_str_to_user_pk as url_str_to_user_pk, user_email as user_email, user_pk_to_url_str as user_pk_to_url_str, user_username as user_username
from _typeshed import Incomplete
from django import forms
from django.contrib.auth.tokens import PasswordResetTokenGenerator

class EmailAwarePasswordResetTokenGenerator(PasswordResetTokenGenerator): ...

default_token_generator: Incomplete

class PasswordVerificationMixin:
    def clean(self): ...

class PasswordField(forms.CharField):
    def __init__(self, *args, **kwargs) -> None: ...

class SetPasswordField(PasswordField):
    user: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self, value): ...

class LoginForm(forms.Form):
    password: Incomplete
    remember: Incomplete
    user: Incomplete
    error_messages: Incomplete
    request: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def user_credentials(self): ...
    def clean_login(self): ...
    def clean(self): ...
    def login(self, request, redirect_url: Incomplete | None = ...): ...

class _DummyCustomSignupForm(forms.Form):
    def signup(self, request, user) -> None: ...

class BaseSignupForm(Incomplete):
    username: Incomplete
    email: Incomplete
    username_required: Incomplete
    prevent_enumeration: Incomplete
    account_already_exists: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def clean_username(self): ...
    def clean_email(self): ...
    def validate_unique_email(self, value): ...
    def clean(self): ...
    def custom_signup(self, request, user) -> None: ...

class SignupForm(BaseSignupForm):
    def __init__(self, *args, **kwargs) -> None: ...
    def clean(self): ...
    def save(self, request): ...

class UserForm(forms.Form):
    user: Incomplete
    def __init__(self, user: Incomplete | None = ..., *args, **kwargs) -> None: ...

class AddEmailForm(UserForm):
    email: Incomplete
    def clean_email(self): ...
    def save(self, request): ...

class ChangePasswordForm(PasswordVerificationMixin, UserForm):
    oldpassword: Incomplete
    password1: Incomplete
    password2: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clean_oldpassword(self): ...
    def save(self) -> None: ...

class SetPasswordForm(PasswordVerificationMixin, UserForm):
    password1: Incomplete
    password2: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def save(self) -> None: ...

class ResetPasswordForm(forms.Form):
    email: Incomplete
    users: Incomplete
    def clean_email(self): ...
    def save(self, request, **kwargs): ...

class ResetPasswordKeyForm(PasswordVerificationMixin, forms.Form):
    password1: Incomplete
    password2: Incomplete
    user: Incomplete
    temp_key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def save(self) -> None: ...

class UserTokenForm(forms.Form):
    uidb36: Incomplete
    key: Incomplete
    reset_user: Incomplete
    token_generator = default_token_generator
    error_messages: Incomplete
    def clean(self): ...
